{"ast":null,"code":"var _jsxFileName = \"/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/Scene.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Card, Chip, CardContent, Typography, Button, TextField, Dialog, DialogActions, InputLabel, FormControl, MenuItem, Select, Box } from \"@mui/material\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Scene = () => {\n  _s();\n  const [descriptions, setDescriptions] = useState([]);\n  const [editedDescription, setEditedDescription] = useState(\"\");\n  const [selectedDescriptionId, setSelectedDescriptionId] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [isLoading, setLoading] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n  const url = \"http://127.0.0.1:8000/descriptions/\";\n  const token = Cookies.get(\"jwtToken\");\n  const parameters = {\n    video_id: 19,\n    jwt: token\n  };\n  useEffect(() => {\n    axios.get(url, {\n      params: parameters\n    }).then(response => {\n      // Parse JSON strings into JavaScript objects\n      const descriptions = response.data.descriptions.map(item => JSON.parse(item));\n\n      // Extract unique user names from all descriptions and set them in state\n      const uniqueUserNames = Array.from(new Set(descriptions.map(description => {\n        // Log each user name before adding it to the set\n        console.log(description.username);\n        return description.username;\n      })));\n      setDescriptions(descriptions);\n      setLoading(false);\n      // Assuming the first user in the uniqueUserNames array as the initial user\n      setCurrentUser(uniqueUserNames[0]);\n    }).catch(err => {\n      console.log(\"Error fetching description data\", err);\n      setLoading(false);\n    });\n  }, []);\n  const handleUserChange = event => {\n    const selectedUser = event.target.value;\n    setCurrentUser(selectedUser);\n  };\n  const handleEditClick = (descriptionId, descriptionText) => {\n    setSelectedDescriptionId(descriptionId);\n    setEditedDescription(descriptionText);\n    setIsEditing(true);\n  };\n  const handleSaveClick = () => {\n    if (selectedDescriptionId !== null) {\n      const updatedDescription = {\n        id: selectedDescriptionId,\n        updatedDescription: editedDescription\n      };\n      axios.put(`http://127.0.0.1:8000/descriptions/${selectedDescriptionId}`, updatedDescription).then(response => {\n        console.log('Description updated successfully:', response.data.message);\n\n        // Trigger a re-render by fetching updated data from the API\n        axios.get(url, {\n          params: parameters\n        }).then(response => {\n          const descriptions = response.data.descriptions.map(item => JSON.parse(item));\n          setDescriptions(descriptions);\n          setIsEditing(false);\n          setSelectedDescriptionId(null);\n        }).catch(err => {\n          console.log('Error fetching updated description data', err);\n        });\n      }).catch(error => {\n        console.error('Error updating description:', error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [currentUser && /*#__PURE__*/_jsxDEV(FormControl, {\n        sx: {\n          margin: \"20px 0\",\n          width: \"300px\",\n          backgroundColor: \"primary.main\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          children: \"User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: currentUser,\n          onChange: handleUserChange,\n          children: Array.from(new Set(descriptions.map(description => description.username))).map(username => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: username,\n            children: username\n          }, username, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), descriptions.filter(description => description.username === currentUser).sort((a, b) => parseInt(a.time_stamp) - parseInt(b.time_stamp)) // Sort based on timestamps\n      .map(description => /*#__PURE__*/_jsxDEV(Card, {\n        variant: \"outlined\",\n        sx: {\n          marginBottom: \"10px\",\n          backgroundColor: \"primary.main\"\n        },\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Chip, {\n            label: Math.floor(parseInt(description.time_stamp) / 60) + \":\" + parseInt(description.time_stamp) % 60,\n            sx: {\n              backgroundColor: \"secondary.light\",\n              color: \"white\",\n              marginBottom: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 19\n          }, this), isEditing && selectedDescriptionId === description.id ? /*#__PURE__*/_jsxDEV(TextField, {\n            multiline: true,\n            fullWidth: true,\n            sx: {\n              backgroundColor: \"white\"\n            },\n            variant: \"outlined\",\n            label: \"Edit Description\",\n            value: editedDescription,\n            onChange: e => setEditedDescription(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(Box, {\n            p: 1.5,\n            borderRadius: \"5px\",\n            sx: {\n              backgroundColor: \"white\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              children: [description.descriptions, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: \"10px\"\n            },\n            children: isEditing && selectedDescriptionId === description.id ? /*#__PURE__*/_jsxDEV(DialogActions, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: handleSaveClick,\n                sx: {\n                  backgroundColor: \"secondary.main\",\n                  color: \"white\",\n                  marginTop: \"10px\"\n                },\n                className: \"category-btn\",\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => handleEditClick(description.id, description.descriptions),\n              sx: {\n                backgroundColor: \"secondary.main\",\n                color: \"white\",\n                marginTop: \"10px\"\n              },\n              className: \"category-btn\",\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 17\n        }, this)\n      }, description.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(Scene, \"vuwTB/ZxPsasrWOkFO63GSz1sGo=\");\n_c = Scene;\nexport default Scene;\n\n// import React, { useState, useEffect } from \"react\";\n// import {\n//   Card,\n//   Chip,\n//   CardContent,\n//   Typography,\n//   Button,\n//   TextField,\n//   Dialog,\n//   DialogActions,\n//   InputLabel,\n//   FormControl,\n//   MenuItem,\n//   Select,\n//   Box,\n// } from \"@mui/material\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n\n// const fakeUsers = [\n//   { id: 1, name: \"User 1\" },\n//   { id: 2, name: \"User 2\" },\n//   // Add more users as needed\n// ];\n\n// const Scene = () => {\n//   const [currentUser, setCurrentUser] = useState(fakeUsers[0]);\n//   const [fakeDescriptions, setFakeDescriptions] = useState([\n//     {\n//       id: 1,\n//       timestamp: \"00:05\",\n//       userId: 1,\n//       description: \"Description 1 by User 1\",\n//     },\n//     {\n//       id: 2,\n//       timestamp: \"00:10\",\n//       userId: 1,\n//       description: \"Description 1 by User 1 at 10 seconds\",\n//     },\n//     {\n//       id: 3,\n//       timestamp: \"00:15\",\n//       userId: 1,\n//       description: \"Description 1 by User 1 at 10 seconds\",\n//     },\n//     {\n//       id: 4,\n//       timestamp: \"01:30\",\n//       userId: 2,\n//       description: \"Description 2 by User 2\",\n//     },\n//     // Add more fake descriptions as needed\n//   ]);\n//   const [editedDescription, setEditedDescription] = useState(\"\");\n//   const [selectedDescriptionId, setSelectedDescriptionId] = useState(null);\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [isLoading, setLoading] = useState(true);\n//   const [desc, setDesc] = useState();\n\n//   const url = \"http://127.0.0.1:8000/descriptions/\";\n//   const token = Cookies.get(\"jwtToken\");\n//   const parameters = { video_id: 19, jwt: token };\n\n//   useEffect(() => {\n\n//     axios.get(url, { params: parameters })\n//       .then((response) => {\n//         console.log(\"Received description data in edit descriptions page\", response.data.descriptions);\n//         setDesc(\n//           response.data.descriptions.map((item) => {\n//             return JSON.parse(item);\n//           })\n//         );\n//         setLoading(false);\n//       })\n//       .catch((err) => {\n//         console.log(\"Not receiving data description data\", err);\n//         setLoading(false);\n//       });\n\n//   }, []);\n\n//   if (isLoading) {\n//     return <div className=\"App\">Loading...</div>;\n//   }\n\n//   const handleUserChange = (event) => {\n//     const userId = event.target.value;\n//     const selectedUser = fakeUsers.find((user) => user.id === userId);\n//     setCurrentUser(selectedUser);\n//   };\n\n//   const handleEditClick = (descriptionId, descriptionText) => {\n//     setSelectedDescriptionId(descriptionId);\n//     setEditedDescription(descriptionText);\n//     setIsEditing(true);\n//   };\n\n//   const handleSaveClick = () => {\n//     if (selectedDescriptionId !== null) {\n//       const updatedDescriptions = fakeDescriptions.map((description) =>\n//         description.id === selectedDescriptionId\n//           ? { ...description, description: editedDescription }\n//           : description\n//       );\n//       setFakeDescriptions(updatedDescriptions);\n//       setIsEditing(false);\n//       setSelectedDescriptionId(null);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <FormControl\n//         sx={{\n//           margin: \"20px 0\",\n//           width: \"300px\",\n//           backgroundColor: \"primary.main\",\n//         }}\n//       >\n//         <InputLabel>User</InputLabel>\n//         <Select value={currentUser.id} onChange={handleUserChange}>\n//           {fakeUsers.map((user) => (\n//             <MenuItem key={user.id} value={user.id}>\n//               {user.name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       {fakeDescriptions\n//         .filter((description) => description.userId === currentUser.id)\n//         .map((description) => (\n//           <Card\n//             key={description.id}\n//             variant=\"outlined\"\n//             sx={{ marginBottom: \"10px\", backgroundColor: \"primary.main\" }}\n//           >\n//             <CardContent>\n//               <Chip\n//                 label={description.timestamp}\n//                 sx={{\n//                   backgroundColor: \"secondary.light\",\n//                   color: \"white\",\n//                   marginBottom: \"20px\",\n//                 }}\n//               />\n//               {isEditing && selectedDescriptionId === description.id ? (\n//                 <TextField\n//                   multiline\n//                   fullWidth\n//                   sx={{\n//                     backgroundColor: \"white\",\n//                   }}\n//                   variant=\"outlined\"\n//                   label=\"Edit Description\"\n//                   value={editedDescription}\n//                   onChange={(e) => setEditedDescription(e.target.value)}\n//                 />\n//               ) : (\n//                 <Box p={1.5}  borderRadius=\"5px\" sx={{backgroundColor : \"white\"}}>\n//                 <Typography variant=\"body1\">\n//                   {description.description}\n//                 </Typography>\n//                 </Box>\n//               )}\n//               <div style={{ marginTop: \"10px\" }}>\n//                 {isEditing && selectedDescriptionId === description.id ? (\n//                   <DialogActions>\n//                     <Button\n//                       onClick={handleSaveClick}\n//                       sx={{\n//                         backgroundColor: \"secondary.main\",\n//                         color: \"white\",\n//                         marginTop: \"10px\",\n//                       }}\n//                       className=\"category-btn\"\n//                     >\n//                       Save\n//                     </Button>\n//                   </DialogActions>\n//                 ) : (\n//                   <Button\n//                     onClick={() =>\n//                       handleEditClick(description.id, description.description)\n//                     }\n//                     sx={{\n//                       backgroundColor: \"secondary.main\",\n//                       color: \"white\",\n//                       marginTop: \"10px\",\n//                     }}\n//                     className=\"category-btn\"\n//                   >\n//                     Edit\n//                   </Button>\n//                 )}\n//               </div>\n//             </CardContent>\n//           </Card>\n//         ))}\n//     </div>\n//   );\n// };\n\n// export default Scene;\nvar _c;\n$RefreshReg$(_c, \"Scene\");","map":{"version":3,"names":["React","useState","useEffect","Card","Chip","CardContent","Typography","Button","TextField","Dialog","DialogActions","InputLabel","FormControl","MenuItem","Select","Box","axios","Cookies","jsxDEV","_jsxDEV","Scene","_s","descriptions","setDescriptions","editedDescription","setEditedDescription","selectedDescriptionId","setSelectedDescriptionId","isEditing","setIsEditing","isLoading","setLoading","currentUser","setCurrentUser","url","token","get","parameters","video_id","jwt","params","then","response","data","map","item","JSON","parse","uniqueUserNames","Array","from","Set","description","console","log","username","catch","err","handleUserChange","event","selectedUser","target","value","handleEditClick","descriptionId","descriptionText","handleSaveClick","updatedDescription","id","put","message","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","sx","margin","width","backgroundColor","onChange","filter","sort","a","b","parseInt","time_stamp","variant","marginBottom","label","Math","floor","color","multiline","fullWidth","e","p","borderRadius","style","marginTop","onClick","_c","$RefreshReg$"],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/Scene.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  Chip,\n  CardContent,\n  Typography,\n  Button,\n  TextField,\n  Dialog,\n  DialogActions,\n  InputLabel,\n  FormControl,\n  MenuItem,\n  Select,\n  Box,\n} from \"@mui/material\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\n\nconst Scene = () => {\n  const [descriptions, setDescriptions] = useState([]);\n  const [editedDescription, setEditedDescription] = useState(\"\");\n  const [selectedDescriptionId, setSelectedDescriptionId] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [isLoading, setLoading] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  const url = \"http://127.0.0.1:8000/descriptions/\";\n  const token = Cookies.get(\"jwtToken\");\n  const parameters = { video_id: 19, jwt: token };\n\n  useEffect(() => {\n    axios\n      .get(url, { params: parameters })\n      .then((response) => {\n        // Parse JSON strings into JavaScript objects\n        const descriptions = response.data.descriptions.map((item) =>\n          JSON.parse(item)\n        );\n\n        // Extract unique user names from all descriptions and set them in state\n        const uniqueUserNames = Array.from(\n          new Set(\n            descriptions.map((description) => {\n              // Log each user name before adding it to the set\n              console.log(description.username);\n              return description.username;\n            })\n          )\n        );\n\n        setDescriptions(descriptions);\n        setLoading(false);\n        // Assuming the first user in the uniqueUserNames array as the initial user\n        setCurrentUser(uniqueUserNames[0]);\n      })\n      .catch((err) => {\n        console.log(\"Error fetching description data\", err);\n        setLoading(false);\n      });\n  }, []);\n\n  const handleUserChange = (event) => {\n    const selectedUser = event.target.value;\n    setCurrentUser(selectedUser);\n  };\n\n  const handleEditClick = (descriptionId, descriptionText) => {\n    setSelectedDescriptionId(descriptionId);\n    setEditedDescription(descriptionText);\n    setIsEditing(true);\n  };\n\n  const handleSaveClick = () => {\n    if (selectedDescriptionId !== null) {\n      const updatedDescription = {\n        id: selectedDescriptionId,\n        updatedDescription: editedDescription,\n      };\n  \n      axios\n        .put(`http://127.0.0.1:8000/descriptions/${selectedDescriptionId}`, updatedDescription)\n        .then((response) => {\n          console.log('Description updated successfully:', response.data.message);\n  \n          // Trigger a re-render by fetching updated data from the API\n          axios\n            .get(url, { params: parameters })\n            .then((response) => {\n              const descriptions = response.data.descriptions.map((item) =>\n                JSON.parse(item)\n              );\n              setDescriptions(descriptions);\n              setIsEditing(false);\n              setSelectedDescriptionId(null);\n            })\n            .catch((err) => {\n              console.log('Error fetching updated description data', err);\n            });\n        })\n        .catch((error) => {\n          console.error('Error updating description:', error);\n        });\n    }\n  };\n  \n\n  return (\n    <div>\n      {isLoading ? (\n        <div className=\"App\">Loading...</div>\n      ) : (\n        <div>\n          {/* User selection dropdown */}\n          {currentUser && (\n            <FormControl\n              sx={{\n                margin: \"20px 0\",\n                width: \"300px\",\n                backgroundColor: \"primary.main\",\n              }}\n            >\n              <InputLabel>User</InputLabel>\n              <Select value={currentUser} onChange={handleUserChange}>\n                {Array.from(\n                  new Set(\n                    descriptions.map((description) => description.username)\n                  )\n                ).map((username) => (\n                  <MenuItem key={username} value={username}>\n                    {username}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          )}\n\n          {/* Description cards */}\n          {descriptions\n            .filter((description) => description.username === currentUser)\n            .sort((a, b) => parseInt(a.time_stamp) - parseInt(b.time_stamp)) // Sort based on timestamps\n            .map((description) => (\n              <Card\n                key={description.id}\n                variant=\"outlined\"\n                sx={{ marginBottom: \"10px\", backgroundColor: \"primary.main\" }}\n              >\n                <CardContent>\n                  <Chip\n                    label={Math.floor(parseInt(description.time_stamp)/60) + \":\" + parseInt(description.time_stamp)%60}\n                    sx={{\n                      backgroundColor: \"secondary.light\",\n                      color: \"white\",\n                      marginBottom: \"20px\",\n                    }}\n                  />\n                  {isEditing && selectedDescriptionId === description.id ? (\n                    <TextField\n                      multiline\n                      fullWidth\n                      sx={{\n                        backgroundColor: \"white\",\n                      }}\n                      variant=\"outlined\"\n                      label=\"Edit Description\"\n                      value={editedDescription}\n                      onChange={(e) => setEditedDescription(e.target.value)}\n                    />\n                  ) : (\n                    <Box\n                      p={1.5}\n                      borderRadius=\"5px\"\n                      sx={{ backgroundColor: \"white\" }}\n                    >\n                      <Typography variant=\"body1\">\n                        {description.descriptions}{\" \"}\n                        {/* Assuming description property name is descriptions */}\n                      </Typography>\n                    </Box>\n                  )}\n                  <div style={{ marginTop: \"10px\" }}>\n                    {isEditing && selectedDescriptionId === description.id ? (\n                      <DialogActions>\n                        <Button\n                          onClick={handleSaveClick}\n                          sx={{\n                            backgroundColor: \"secondary.main\",\n                            color: \"white\",\n                            marginTop: \"10px\",\n                          }}\n                          className=\"category-btn\"\n                        >\n                          Save\n                        </Button>\n                      </DialogActions>\n                    ) : (\n                      <Button\n                        onClick={() =>\n                          handleEditClick(\n                            description.id,\n                            description.descriptions\n                          )\n                        }\n                        sx={{\n                          backgroundColor: \"secondary.main\",\n                          color: \"white\",\n                          marginTop: \"10px\",\n                        }}\n                        className=\"category-btn\"\n                      >\n                        Edit\n                      </Button>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Scene;\n\n// import React, { useState, useEffect } from \"react\";\n// import {\n//   Card,\n//   Chip,\n//   CardContent,\n//   Typography,\n//   Button,\n//   TextField,\n//   Dialog,\n//   DialogActions,\n//   InputLabel,\n//   FormControl,\n//   MenuItem,\n//   Select,\n//   Box,\n// } from \"@mui/material\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n\n// const fakeUsers = [\n//   { id: 1, name: \"User 1\" },\n//   { id: 2, name: \"User 2\" },\n//   // Add more users as needed\n// ];\n\n// const Scene = () => {\n//   const [currentUser, setCurrentUser] = useState(fakeUsers[0]);\n//   const [fakeDescriptions, setFakeDescriptions] = useState([\n//     {\n//       id: 1,\n//       timestamp: \"00:05\",\n//       userId: 1,\n//       description: \"Description 1 by User 1\",\n//     },\n//     {\n//       id: 2,\n//       timestamp: \"00:10\",\n//       userId: 1,\n//       description: \"Description 1 by User 1 at 10 seconds\",\n//     },\n//     {\n//       id: 3,\n//       timestamp: \"00:15\",\n//       userId: 1,\n//       description: \"Description 1 by User 1 at 10 seconds\",\n//     },\n//     {\n//       id: 4,\n//       timestamp: \"01:30\",\n//       userId: 2,\n//       description: \"Description 2 by User 2\",\n//     },\n//     // Add more fake descriptions as needed\n//   ]);\n//   const [editedDescription, setEditedDescription] = useState(\"\");\n//   const [selectedDescriptionId, setSelectedDescriptionId] = useState(null);\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [isLoading, setLoading] = useState(true);\n//   const [desc, setDesc] = useState();\n\n//   const url = \"http://127.0.0.1:8000/descriptions/\";\n//   const token = Cookies.get(\"jwtToken\");\n//   const parameters = { video_id: 19, jwt: token };\n\n//   useEffect(() => {\n\n//     axios.get(url, { params: parameters })\n//       .then((response) => {\n//         console.log(\"Received description data in edit descriptions page\", response.data.descriptions);\n//         setDesc(\n//           response.data.descriptions.map((item) => {\n//             return JSON.parse(item);\n//           })\n//         );\n//         setLoading(false);\n//       })\n//       .catch((err) => {\n//         console.log(\"Not receiving data description data\", err);\n//         setLoading(false);\n//       });\n\n//   }, []);\n\n//   if (isLoading) {\n//     return <div className=\"App\">Loading...</div>;\n//   }\n\n//   const handleUserChange = (event) => {\n//     const userId = event.target.value;\n//     const selectedUser = fakeUsers.find((user) => user.id === userId);\n//     setCurrentUser(selectedUser);\n//   };\n\n//   const handleEditClick = (descriptionId, descriptionText) => {\n//     setSelectedDescriptionId(descriptionId);\n//     setEditedDescription(descriptionText);\n//     setIsEditing(true);\n//   };\n\n//   const handleSaveClick = () => {\n//     if (selectedDescriptionId !== null) {\n//       const updatedDescriptions = fakeDescriptions.map((description) =>\n//         description.id === selectedDescriptionId\n//           ? { ...description, description: editedDescription }\n//           : description\n//       );\n//       setFakeDescriptions(updatedDescriptions);\n//       setIsEditing(false);\n//       setSelectedDescriptionId(null);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <FormControl\n//         sx={{\n//           margin: \"20px 0\",\n//           width: \"300px\",\n//           backgroundColor: \"primary.main\",\n//         }}\n//       >\n//         <InputLabel>User</InputLabel>\n//         <Select value={currentUser.id} onChange={handleUserChange}>\n//           {fakeUsers.map((user) => (\n//             <MenuItem key={user.id} value={user.id}>\n//               {user.name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       {fakeDescriptions\n//         .filter((description) => description.userId === currentUser.id)\n//         .map((description) => (\n//           <Card\n//             key={description.id}\n//             variant=\"outlined\"\n//             sx={{ marginBottom: \"10px\", backgroundColor: \"primary.main\" }}\n//           >\n//             <CardContent>\n//               <Chip\n//                 label={description.timestamp}\n//                 sx={{\n//                   backgroundColor: \"secondary.light\",\n//                   color: \"white\",\n//                   marginBottom: \"20px\",\n//                 }}\n//               />\n//               {isEditing && selectedDescriptionId === description.id ? (\n//                 <TextField\n//                   multiline\n//                   fullWidth\n//                   sx={{\n//                     backgroundColor: \"white\",\n//                   }}\n//                   variant=\"outlined\"\n//                   label=\"Edit Description\"\n//                   value={editedDescription}\n//                   onChange={(e) => setEditedDescription(e.target.value)}\n//                 />\n//               ) : (\n//                 <Box p={1.5}  borderRadius=\"5px\" sx={{backgroundColor : \"white\"}}>\n//                 <Typography variant=\"body1\">\n//                   {description.description}\n//                 </Typography>\n//                 </Box>\n//               )}\n//               <div style={{ marginTop: \"10px\" }}>\n//                 {isEditing && selectedDescriptionId === description.id ? (\n//                   <DialogActions>\n//                     <Button\n//                       onClick={handleSaveClick}\n//                       sx={{\n//                         backgroundColor: \"secondary.main\",\n//                         color: \"white\",\n//                         marginTop: \"10px\",\n//                       }}\n//                       className=\"category-btn\"\n//                     >\n//                       Save\n//                     </Button>\n//                   </DialogActions>\n//                 ) : (\n//                   <Button\n//                     onClick={() =>\n//                       handleEditClick(description.id, description.description)\n//                     }\n//                     sx={{\n//                       backgroundColor: \"secondary.main\",\n//                       color: \"white\",\n//                       marginTop: \"10px\",\n//                     }}\n//                     className=\"category-btn\"\n//                   >\n//                     Edit\n//                   </Button>\n//                 )}\n//               </div>\n//             </CardContent>\n//           </Card>\n//         ))}\n//     </div>\n//   );\n// };\n\n// export default Scene;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}