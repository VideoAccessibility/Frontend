{"ast":null,"code":"var _jsxFileName = \"/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/AddDescriptions.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\nimport dayjs from \"dayjs\";\nimport { Box, Stack, Typography, Grid, TextField, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogActions, Chip, Divider } from \"@mui/material\";\nimport { TimeField } from \"@mui/x-date-pickers/TimeField\";\nimport { Sidebar, Player, Navbar, Notes } from \"./\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport formatTime from \"../utils/functions\";\nimport { useLocation, Link } from \"react-router-dom\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddDescriptions = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [selectedCategory, setSelectedCategory] = useState();\n  const [endTime, setEndTime] = useState(dayjs(\"00:00\", \"mm:ss\"));\n  const [startTime, setStartTime] = useState(dayjs(\"00:00\", \"mm:ss\"));\n  const [played, setPlayed] = useState(0);\n  const [frames, setFrames] = useState([]);\n  const [description, setDescription] = useState(\"\");\n  const [selectedFrameIndex, setSelectedFrameIndex] = useState(null);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const playerRef = useRef(null);\n  const framesContainerRef = useRef(null);\n  const location = useLocation();\n  const {\n    video_id,\n    video_path\n  } = location.state;\n  function Frame({\n    sceneNo,\n    startTime,\n    endTime,\n    description\n  }) {\n    _s();\n    const ref = useRef();\n    useEffect(() => {\n      if (ref.current) {\n        ref.current.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\"\n        });\n      }\n    }, [sceneNo]);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      p: 2,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        columnSpacing: {\n          xs: 1,\n          sm: 2,\n          md: 3\n        },\n        ref: ref,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              color: \"primary.dark\"\n            },\n            children: [\"Scene \", sceneNo + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(Chip, {\n            label: formatTime(startTime) + \" - \" + formatTime(endTime),\n            sx: {\n              backgroundColor: \"secondary.light\",\n              color: \"white\",\n              marginBottom: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            children: [/*#__PURE__*/_jsxDEV(IconButton, {\n              edge: \"end\",\n              \"aria-label\": \"replay the scene from the start timestamp\",\n              onClick: () => handleReplayFrame(startTime),\n              children: /*#__PURE__*/_jsxDEV(ReplayIcon, {\n                sx: {\n                  color: \"#EF6262\"\n                },\n                \"aria-label\": \"replay the scene from the start timestamp\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              edge: \"end\",\n              \"aria-label\": \"delete\",\n              onClick: () => handleRemoveFrame(sceneNo),\n              sx: {\n                marginLeft: \"20px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                sx: {\n                  color: \"#EF6262\"\n                },\n                \"aria-label\": \"delete scene\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              edge: \"end\",\n              \"aria-label\": \"edit\",\n              onClick: () => handleEditFrame(sceneNo),\n              sx: {\n                marginLeft: \"20px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(EditIcon, {\n                sx: {\n                  color: \"#EF6262\"\n                },\n                \"aria-label\": \"edit scene\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          md: 3,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            sx: {\n              color: \"primary.dark\"\n            },\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 9,\n          md: 9,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            p: 1.5,\n            borderRadius: \"5px\",\n            sx: {\n              backgroundColor: \"white\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              sx: {\n                color: \"#1D5B79\"\n              },\n              children: description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Load frames from localStorage on component mount\n  _s(Frame, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n  useEffect(() => {\n    const storedFrames = localStorage.getItem(`frames_${video_id}`);\n    if (storedFrames) {\n      setFrames(JSON.parse(storedFrames));\n    }\n  }, [video_id]);\n\n  // Update frames in localStorage whenever frames state changes\n  useEffect(() => {\n    localStorage.setItem(`frames_${video_id}`, JSON.stringify(frames));\n  }, [frames, video_id]);\n  const handleCallback = progressData => {\n    setPlayed(progressData);\n  };\n  const handleAddFrame = () => {\n    // Set the index of the newly added frame\n    if (description) {\n      const newFrame = {\n        start: played,\n        end: parseInt(endTime.$m) * 60 + parseInt(endTime.$s),\n        description: description,\n        id: frames.length\n      };\n      setFrames([...frames, newFrame]);\n      setDescription(\"\");\n      setEndTime(dayjs(\"00:00\", \"mm:ss\"));\n      //console.log(parseInt(endTime.$m)*60 + parseInt(endTime.$s))\n      // Find the index of the newly added frame in the sorted frames\n    } else {\n      // Handle invalid input (show error message, prevent adding frame, etc.)\n      console.log(\"Invalid input. Please enter a valid end time.\");\n    }\n  };\n  const handleReplayFrame = startTimestamp => {\n    // Call the seekToTimestamp function in the Player component\n    if (playerRef.current) {\n      playerRef.current.seekTo(startTimestamp, 'seconds');\n      setPlayed(startTimestamp); // Update the played state to reflect the new timestamp\n    }\n  };\n\n  const handleRemoveFrame = index => {\n    const updatedFrames = [...frames];\n    updatedFrames.splice(index, 1);\n    setFrames(updatedFrames);\n  };\n  const handleEditFrame = index => {\n    setSelectedFrameIndex(index);\n    setDescription(frames[index].description);\n    setEndTime(dayjs(formatTime(frames[index].end), \"mm:ss\"));\n    // setPlayed(frames[index].time);\n    setEditDialogOpen(true);\n  };\n  const handleSaveEdit = () => {\n    if (description) {\n      const updatedFrames = [...frames];\n      updatedFrames[selectedFrameIndex].description = description;\n      updatedFrames[selectedFrameIndex].end = parseInt(endTime.$m) * 60 + parseInt(endTime.$s);\n      setFrames(updatedFrames);\n      setEditDialogOpen(false);\n      setDescription(\"\");\n      setEndTime(dayjs(\"00:00\", \"mm:ss\"));\n    }\n  };\n  const handleIncreaseEndTime = () => {\n    setEndTime(prevEndTime => prevEndTime.add(1, 'second'));\n  };\n  const handleDecreaseEndTime = () => {\n    setEndTime(prevEndTime => prevEndTime.subtract(1, 'second'));\n  };\n  const handlePublishDescriptions = async () => {\n    try {\n      for (let frame of frames) {\n        // Assuming you have an API endpoint for posting descriptions, adjust the URL accordingly\n        const apiUrl = \"http://127.0.0.1:8000/descriptions/\";\n        const token = Cookies.get(\"jwtToken\");\n        const response = await axios.post(apiUrl, {\n          video_id: video_id,\n          jwt: token,\n          time_stamp_start: frame.start,\n          descriptions: frame.description,\n          time_stamp_end: frame.end,\n          ai_or_human: \"human\"\n        });\n\n        // Handle the response from the backend API if needed\n        console.log(\"Description published:\", response.data);\n      }\n\n      // Optional: Show a success message to the user after all descriptions are published\n      console.log(\"All descriptions published successfully!\");\n    } catch (error) {\n      // Handle errors if the API request fails\n      console.error(\"Error publishing descriptions:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      sx: {\n        flexDirection: {\n          sx: \"column\",\n          md: \"row\"\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          height: {\n            sx: \"auto\",\n            md: \"90vh\"\n          },\n          paddingRight: {\n            sx: 0,\n            md: 2\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(Sidebar, {\n          selectedCategory: selectedCategory,\n          setSelectedCategory: setSelectedCategory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        p: 2,\n        sx: {\n          overflowY: \"auto\",\n          height: \"90vh\",\n          flex: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: [/*#__PURE__*/_jsxDEV(Player, {\n            path: video_path,\n            parentCallback: handleCallback,\n            seekToTimestamp: handleReplayFrame,\n            playerRef: playerRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            p: 2,\n            sx: {\n              backgroundColor: \"primary.main\",\n              borderRadius: \"5px\",\n              paddingBottom: \"20px\"\n            },\n            mt: 1,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                color: \"primary.dark\"\n              },\n              children: [\"Add description at \", formatTime(played)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n              dateAdapter: AdapterDayjs,\n              children: [/*#__PURE__*/_jsxDEV(TimeField, {\n                label: \"End timestamp\",\n                value: endTime,\n                onChange: newValue => setEndTime(newValue),\n                format: \"mm:ss\",\n                sx: {\n                  marginBottom: \"10px\",\n                  backgroundColor: \"white\",\n                  borderRadius: \"5px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"increase end time\",\n                onClick: handleIncreaseEndTime,\n                children: /*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"decrease end time\",\n                onClick: handleDecreaseEndTime,\n                children: /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              value: description,\n              onChange: e => setDescription(e.target.value),\n              variant: \"outlined\",\n              fullWidth: true,\n              placeholder: \"Enter description\",\n              sx: {\n                marginBottom: \"10px\",\n                backgroundColor: \"white\",\n                borderRadius: \"5px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              sx: {\n                backgroundColor: \"secondary.main\",\n                color: \"white\"\n              },\n              className: \"category-btn\",\n              onClick: handleAddFrame,\n              children: \"Add Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4.9,\n          marginLeft: 1,\n          sx: {\n            backgroundColor: \"primary.main\",\n            borderRadius: \"5px\",\n            height: \"85vh\",\n            // Set the height to 75vh\n            overflowY: \"auto\" // Set overflow to auto for vertical scrolling\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              height: \"75vh\",\n              overflowY: \"auto\"\n            },\n            children: frames.slice() // Create a shallow copy of the frames array\n            .sort((a, b) => a.start - b.start) // Sort the frames based on starting timestamp\n            .map((frame, index) => /*#__PURE__*/_jsxDEV(Frame, {\n              sceneNo: index,\n              description: frame.description,\n              startTime: frame.start,\n              endTime: frame.end\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n            open: editDialogOpen,\n            onClose: () => setEditDialogOpen(false),\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n              children: [\"Edit Description at timestamp \", played]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n              children: [/*#__PURE__*/_jsxDEV(LocalizationProvider, {\n                dateAdapter: AdapterDayjs,\n                children: /*#__PURE__*/_jsxDEV(TimeField, {\n                  label: \"End timestamp\",\n                  value: endTime,\n                  onChange: newValue => setEndTime(newValue),\n                  format: \"mm:ss\",\n                  sx: {\n                    marginBottom: \"10px\",\n                    backgroundColor: \"white\",\n                    borderRadius: \"5px\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                value: description,\n                onChange: e => setDescription(e.target.value),\n                variant: \"outlined\",\n                fullWidth: true,\n                placeholder: \"Enter description\",\n                style: {\n                  marginBottom: \"10px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => setEditDialogOpen(false),\n                sx: {\n                  backgroundColor: \"secondary.main\",\n                  color: \"white\"\n                },\n                className: \"category-btn\",\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: handleSaveEdit,\n                sx: {\n                  backgroundColor: \"secondary.main\",\n                  color: \"white\"\n                },\n                className: \"category-btn\",\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            sx: {\n              backgroundColor: \"secondary.main\",\n              color: \"white\",\n              margin: \"20px\"\n            },\n            className: \"category-btn\",\n            onClick: handlePublishDescriptions,\n            disabled: frames.length <= 0,\n            children: \"Publish Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n};\n_s2(AddDescriptions, \"DSl9pM0ZJD0hGWZ4Wz36xznNr/Y=\", false, function () {\n  return [useLocation];\n});\n_c = AddDescriptions;\nexport default AddDescriptions;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import DeleteIcon from \"@mui/icons-material/Delete\";\n// import EditIcon from \"@mui/icons-material/Edit\";\n// import ReplayIcon from '@mui/icons-material/Replay';\n// import ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\n// import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\n// import dayjs from \"dayjs\";\n// import {\n//   Box,\n//   Stack,\n//   Typography,\n//   Grid,\n//   TextField,\n//   Button,\n//   IconButton,\n//   Dialog,\n//   DialogTitle,\n//   DialogContent,\n//   DialogActions,\n//   Chip,\n//   Divider,\n// } from \"@mui/material\";\n// import { TimeField } from \"@mui/x-date-pickers/TimeField\";\n// import { Sidebar, Player, Navbar, Notes } from \"./\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import formatTime from \"../utils/functions\";\n// import { useLocation, Link } from \"react-router-dom\";\n// import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\n// import { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\n\n// const AddDescriptions = () => {\n//   const [selectedCategory, setSelectedCategory] = useState();\n//   const [endTime, setEndTime] = useState(dayjs(\"00:00\", \"mm:ss\"));\n//   const [startTime, setStartTime] = useState(dayjs(\"00:00\", \"mm:ss\"));\n//   const [played, setPlayed] = useState(0);\n//   const [frames, setFrames] = useState([]);\n//   const [description, setDescription] = useState(\"\");\n//   const [selectedFrameIndex, setSelectedFrameIndex] = useState(null);\n//   const [editDialogOpen, setEditDialogOpen] = useState(false);\n//   const playerRef = useRef(null);\n//   const framesContainerRef = useRef(null);\n//   const location = useLocation();\n//   const { video_id, video_path } = location.state;\n\n//   // Load frames from localStorage on component mount\n//   useEffect(() => {\n//     const storedFrames = localStorage.getItem(`frames_${video_id}`);\n//     if (storedFrames) {\n//       setFrames(JSON.parse(storedFrames));\n//     }\n//   }, [video_id]);\n\n//   // Update frames in localStorage whenever frames state changes\n//   useEffect(() => {\n//     localStorage.setItem(`frames_${video_id}`, JSON.stringify(frames));\n//   }, [frames, video_id]);\n\n//   const handleCallback = (progressData) => {\n//     setPlayed(progressData);\n//   };\n\n//   const handleAddFrame = () => {\n//     // Set the index of the newly added frame\n//     if (description) {\n//       const newFrame = {\n//         start: played,\n//         end: parseInt(endTime.$m) * 60 + parseInt(endTime.$s),\n//         description: description,\n//       };\n//       setFrames([...frames, newFrame]);\n//       setDescription(\"\");\n//       setEndTime(dayjs(\"00:00\", \"mm:ss\"));\n//       //console.log(parseInt(endTime.$m)*60 + parseInt(endTime.$s))\n//       // Find the index of the newly added frame in the sorted frames\n//     } else {\n//       // Handle invalid input (show error message, prevent adding frame, etc.)\n//       console.log(\"Invalid input. Please enter a valid end time.\");\n//     }\n//   };\n\n//   const handleReplayFrame = (startTimestamp) => {\n//     // Call the seekToTimestamp function in the Player component\n//     if (playerRef.current) {\n//       playerRef.current.seekTo(startTimestamp, 'seconds');\n//       setPlayed(startTimestamp); // Update the played state to reflect the new timestamp\n//     }\n//   };\n\n//   const handleRemoveFrame = (index) => {\n//     const updatedFrames = [...frames];\n//     updatedFrames.splice(index, 1);\n//     setFrames(updatedFrames);\n//   };\n\n//   const handleEditFrame = (index) => {\n//     setSelectedFrameIndex(index);\n//     setDescription(frames[index].description);\n//     setEndTime(dayjs(formatTime(frames[index].end), \"mm:ss\"));\n//     // setPlayed(frames[index].time);\n//     setEditDialogOpen(true);\n//   };\n\n//   const handleSaveEdit = () => {\n//     if (description) {\n//       const updatedFrames = [...frames];\n//       updatedFrames[selectedFrameIndex].description = description;\n//       updatedFrames[selectedFrameIndex].end =\n//         parseInt(endTime.$m) * 60 + parseInt(endTime.$s);\n//       setFrames(updatedFrames);\n//       setEditDialogOpen(false);\n//       setDescription(\"\");\n//       setEndTime(dayjs(\"00:00\", \"mm:ss\"));\n//     }\n//   };\n\n//   const handleIncreaseEndTime = () => {\n//     setEndTime((prevEndTime) => prevEndTime.add(1, 'second'));\n//   };\n\n//   const handleDecreaseEndTime = () => {\n//     setEndTime((prevEndTime) => prevEndTime.subtract(1, 'second'));\n//   };\n\n//   const handlePublishDescriptions = async () => {\n//     try {\n//       for (let frame of frames) {\n//         // Assuming you have an API endpoint for posting descriptions, adjust the URL accordingly\n//         const apiUrl = \"http://127.0.0.1:8000/descriptions/\";\n//         const token = Cookies.get(\"jwtToken\");\n//         const response = await axios.post(apiUrl, {\n//           video_id: video_id,\n//           jwt: token,\n//           time_stamp_start: frame.start,\n//           descriptions: frame.description,\n//           time_stamp_end: frame.end,\n//           ai_or_human: \"human\",\n//         });\n\n//         // Handle the response from the backend API if needed\n//         console.log(\"Description published:\", response.data);\n//       }\n\n//       // Optional: Show a success message to the user after all descriptions are published\n//       console.log(\"All descriptions published successfully!\");\n//     } catch (error) {\n//       // Handle errors if the API request fails\n//       console.error(\"Error publishing descriptions:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <Stack sx={{ flexDirection: { sx: \"column\", md: \"row\" } }}>\n//         <Box\n//           sx={{\n//             height: { sx: \"auto\", md: \"90vh\" },\n//             paddingRight: { sx: 0, md: 2 },\n//           }}\n//         >\n//           <Sidebar\n//             selectedCategory={selectedCategory}\n//             setSelectedCategory={setSelectedCategory}\n//           />\n//         </Box>\n\n//         <Grid\n//           container\n//           p={2}\n//           sx={{ overflowY: \"auto\", height: \"90vh\", flex: 2 }}\n//         >\n//           <Grid item xs={12} md={7}>\n//             <Player path={video_path} parentCallback={handleCallback} seekToTimestamp={handleReplayFrame} playerRef={playerRef} />\n//             <Box\n//               p={2}\n//               sx={{\n//                 backgroundColor: \"primary.main\",\n//                 borderRadius: \"5px\",\n//                 paddingBottom: \"20px\",\n//               }}\n//               mt={1}\n//             >\n//               <Typography variant=\"h6\" sx={{ color: \"primary.dark\" }}>\n//                 Add description at {formatTime(played)}\n//               </Typography>\n//               <hr />\n//               <LocalizationProvider dateAdapter={AdapterDayjs}>\n//                 <TimeField\n//                   label=\"End timestamp\"\n//                   value={endTime}\n//                   onChange={(newValue) => setEndTime(newValue)}\n//                   format=\"mm:ss\"\n//                   sx={{\n//                     marginBottom: \"10px\",\n//                     backgroundColor: \"white\",\n//                     borderRadius: \"5px\",\n//                   }}\n//                 />\n//                         <IconButton\n//                   aria-label=\"increase end time\"\n//                   onClick={handleIncreaseEndTime}\n//                 >\n//                   <ArrowUpwardIcon />\n//                 </IconButton>\n//                 <IconButton\n//                   aria-label=\"decrease end time\"\n//                   onClick={handleDecreaseEndTime}\n//                 >\n//                   <ArrowDownwardIcon />\n//                 </IconButton>\n//                 {/* {console.log(\"this is value\", endTime.$m, endTime.$s)} */}\n//               </LocalizationProvider>\n\n//               <TextField\n//                 value={description}\n//                 onChange={(e) => setDescription(e.target.value)}\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 placeholder=\"Enter description\"\n//                 sx={{\n//                   marginBottom: \"10px\",\n//                   backgroundColor: \"white\",\n//                   borderRadius: \"5px\",\n//                 }}\n//               />\n//               <Button\n//                 sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n//                 className=\"category-btn\"\n//                 onClick={handleAddFrame}\n//               >\n//                 Add Description\n//               </Button>\n//             </Box>\n//           </Grid>\n\n//           <Grid\n//             item\n//             xs={12}\n//             md={4.9}\n//             marginLeft={1}\n//             sx={{\n//               backgroundColor: \"primary.main\",\n//               borderRadius: \"5px\",\n//               height: \"85vh\", // Set the height to 75vh\n//               overflowY: \"auto\", // Set overflow to auto for vertical scrolling\n//             }}\n//           >\n//             <Box sx={{ height: \"75vh\", overflowY: \"auto\"}}>\n//               {frames\n//                 .slice() // Create a shallow copy of the frames array\n//                 .sort((a, b) => a.start - b.start) // Sort the frames based on starting timestamp\n//                 .map((frame, index) => (\n//                   <Box key={index} p={2}>\n//                     <Grid container columnSpacing={{ xs: 1, sm: 2, md: 3 }} ref={framesContainerRef}>\n//                       {/* Displays Scene number */}\n//                       <Grid item xs={3}>\n//                         <Typography variant=\"h6\" sx={{ color: \"primary.dark\" }}>\n//                           Scene {index+1}\n//                         </Typography>\n//                       </Grid>\n//                       {/* Displays time stamp */}\n//                       <Grid item xs={3}>\n//                         <Chip\n//                           label={\n//                             formatTime(frame.start) +\n//                             \" - \" +\n//                             formatTime(frame.end)\n//                           }\n//                           sx={{\n//                             backgroundColor: \"secondary.light\",\n//                             color: \"white\",\n//                             marginBottom: \"20px\",\n//                           }}\n//                         />\n//                       </Grid>\n//                       <Grid item xs={6}>\n//                         <Box display=\"flex\" justifyContent=\"flex-end\">\n//                         <IconButton\n//                             edge=\"end\"\n//                             aria-label=\"replay the scene from the start timestamp\"\n//                             onClick={() => handleReplayFrame(frame.start)}\n//                           >\n//                             <ReplayIcon\n//                               sx={{\n//                                 color: \"#EF6262\",\n//                               }}\n//                               aria-label=\"replay the scene from the start timestamp\"\n//                             />\n//                           </IconButton>\n//                           <IconButton\n//                             edge=\"end\"\n//                             aria-label=\"delete\"\n//                             onClick={() => handleRemoveFrame(index)}\n//                             sx={{ marginLeft: \"20px\" }}\n//                           >\n//                             <DeleteIcon\n//                               sx={{\n//                                 color: \"#EF6262\",\n//                               }}\n//                               aria-label=\"delete scene\"\n//                             />\n//                           </IconButton>\n//                           <IconButton\n//                             edge=\"end\"\n//                             aria-label=\"edit\"\n//                             onClick={() => handleEditFrame(index)}\n//                             sx={{ marginLeft: \"20px\" }}\n//                           >\n//                             <EditIcon\n//                               sx={{\n//                                 color: \"#EF6262\",\n//                               }}\n//                               aria-label=\"edit scene\"\n//                             />\n//                           </IconButton>\n//                         </Box>\n//                       </Grid>\n\n//                       <Grid item xs={3} md={3}>\n//                         <Typography\n//                           variant=\"subtitle1\"\n//                           sx={{ color: \"primary.dark\" }}\n//                         >\n//                           Description\n//                         </Typography>\n//                       </Grid>\n//                       <Grid item xs={9} md={9}>\n//                         <Box\n//                           p={1.5}\n//                           borderRadius=\"5px\"\n//                           sx={{ backgroundColor: \"white\" }}\n//                         >\n//                           <Typography variant=\"body1\" sx={{ color: \"#1D5B79\" }}>\n//                             {frame.description}\n//                           </Typography>\n//                         </Box>\n//                       </Grid>\n//                     </Grid>\n//                   </Box>\n//                 ))}\n//             </Box>\n\n//             <Dialog\n//               open={editDialogOpen}\n//               onClose={() => setEditDialogOpen(false)}\n//               fullWidth\n//             >\n//               <DialogTitle>Edit Description at timestamp {played}</DialogTitle>\n//               <DialogContent>\n//                 <LocalizationProvider dateAdapter={AdapterDayjs}>\n//                   <TimeField\n//                     label=\"End timestamp\"\n//                     value={endTime}\n//                     onChange={(newValue) => setEndTime(newValue)}\n//                     format=\"mm:ss\"\n//                     sx={{\n//                       marginBottom: \"10px\",\n//                       backgroundColor: \"white\",\n//                       borderRadius: \"5px\",\n//                     }}\n//                   />\n//                   {/* {console.log(\"this is value\", endTime.$m, endTime.$s)} */}\n//                 </LocalizationProvider>\n//                 <TextField\n//                   value={description}\n//                   onChange={(e) => setDescription(e.target.value)}\n//                   variant=\"outlined\"\n//                   fullWidth\n//                   placeholder=\"Enter description\"\n//                   style={{ marginBottom: \"10px\" }}\n//                 />\n//               </DialogContent>\n//               <DialogActions>\n//                 <Button\n//                   onClick={() => setEditDialogOpen(false)}\n//                   sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n//                   className=\"category-btn\"\n//                 >\n//                   Cancel\n//                 </Button>\n//                 <Button\n//                   onClick={handleSaveEdit}\n//                   sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n//                   className=\"category-btn\"\n//                 >\n//                   Save\n//                 </Button>\n//               </DialogActions>\n//             </Dialog>\n//             <Divider />\n//                 <Button\n//                   sx={{\n//                     backgroundColor: \"secondary.main\",\n//                     color: \"white\",\n//                     margin:\"20px\"\n//                   }}\n\n//                   className=\"category-btn\"\n//                   onClick={handlePublishDescriptions}\n//                   disabled={frames.length <= 0}\n//                 >\n//                   Publish Description\n//                 </Button>\n//           </Grid>\n//         </Grid>\n//       </Stack>\n//     </div>\n//   );\n// };\n\n// export default AddDescriptions;\nvar _c;\n$RefreshReg$(_c, \"AddDescriptions\");","map":{"version":3,"names":["React","useState","useEffect","useRef","DeleteIcon","EditIcon","ReplayIcon","ArrowUpwardIcon","ArrowDownwardIcon","dayjs","Box","Stack","Typography","Grid","TextField","Button","IconButton","Dialog","DialogTitle","DialogContent","DialogActions","Chip","Divider","TimeField","Sidebar","Player","Navbar","Notes","axios","Cookies","formatTime","useLocation","Link","AdapterDayjs","LocalizationProvider","jsxDEV","_jsxDEV","AddDescriptions","_s2","_s","$RefreshSig$","selectedCategory","setSelectedCategory","endTime","setEndTime","startTime","setStartTime","played","setPlayed","frames","setFrames","description","setDescription","selectedFrameIndex","setSelectedFrameIndex","editDialogOpen","setEditDialogOpen","playerRef","framesContainerRef","location","video_id","video_path","state","Frame","sceneNo","ref","current","scrollIntoView","behavior","block","p","children","container","columnSpacing","xs","sm","md","item","variant","sx","color","fileName","_jsxFileName","lineNumber","columnNumber","label","backgroundColor","marginBottom","display","justifyContent","edge","onClick","handleReplayFrame","handleRemoveFrame","marginLeft","handleEditFrame","borderRadius","storedFrames","localStorage","getItem","JSON","parse","setItem","stringify","handleCallback","progressData","handleAddFrame","newFrame","start","end","parseInt","$m","$s","id","length","console","log","startTimestamp","seekTo","index","updatedFrames","splice","handleSaveEdit","handleIncreaseEndTime","prevEndTime","add","handleDecreaseEndTime","subtract","handlePublishDescriptions","frame","apiUrl","token","get","response","post","jwt","time_stamp_start","descriptions","time_stamp_end","ai_or_human","data","error","flexDirection","height","paddingRight","overflowY","flex","path","parentCallback","seekToTimestamp","paddingBottom","mt","dateAdapter","value","onChange","newValue","format","e","target","fullWidth","placeholder","className","slice","sort","a","b","map","open","onClose","style","margin","disabled","_c","$RefreshReg$"],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/AddDescriptions.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\nimport dayjs from \"dayjs\";\nimport {\n  Box,\n  Stack,\n  Typography,\n  Grid,\n  TextField,\n  Button,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Chip,\n  Divider,\n} from \"@mui/material\";\nimport { TimeField } from \"@mui/x-date-pickers/TimeField\";\nimport { Sidebar, Player, Navbar, Notes } from \"./\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport formatTime from \"../utils/functions\";\nimport { useLocation, Link } from \"react-router-dom\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\n\n\n\nconst AddDescriptions = () => {\n  const [selectedCategory, setSelectedCategory] = useState();\n  const [endTime, setEndTime] = useState(dayjs(\"00:00\", \"mm:ss\"));\n  const [startTime, setStartTime] = useState(dayjs(\"00:00\", \"mm:ss\"));\n  const [played, setPlayed] = useState(0);\n  const [frames, setFrames] = useState([]);\n  const [description, setDescription] = useState(\"\");\n  const [selectedFrameIndex, setSelectedFrameIndex] = useState(null);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const playerRef = useRef(null);\n  const framesContainerRef = useRef(null);\n  const location = useLocation();\n  const { video_id, video_path } = location.state;\n\n  function Frame({sceneNo,startTime, endTime, description }){\n    const ref = useRef();\n\n    useEffect(() => {\n      if (ref.current) {\n        ref.current.scrollIntoView({ behavior: \"smooth\", block: \"end\" });\n      }\n    }, [sceneNo]);\n\n    return(\n      <Box p={2}>\n      <Grid container columnSpacing={{ xs: 1, sm: 2, md: 3 }} ref={ref}>\n        {/* Displays Scene number */}\n        <Grid item xs={3}>\n          <Typography variant=\"h6\" sx={{ color: \"primary.dark\" }}>\n            Scene {sceneNo+1}\n          </Typography>\n        </Grid>\n        {/* Displays time stamp */}\n        <Grid item xs={3}>\n          <Chip\n            label={\n              formatTime(startTime) +\n              \" - \" +\n              formatTime(endTime)\n            }\n            sx={{\n              backgroundColor: \"secondary.light\",\n              color: \"white\",\n              marginBottom: \"20px\",\n            }}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <Box display=\"flex\" justifyContent=\"flex-end\">\n          <IconButton\n              edge=\"end\"\n              aria-label=\"replay the scene from the start timestamp\"\n              onClick={() => handleReplayFrame(startTime)}\n            >\n              <ReplayIcon\n                sx={{\n                  color: \"#EF6262\",\n                }}\n                aria-label=\"replay the scene from the start timestamp\"\n              />\n            </IconButton>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={() => handleRemoveFrame(sceneNo)}\n              sx={{ marginLeft: \"20px\" }}\n            >\n              <DeleteIcon\n                sx={{\n                  color: \"#EF6262\",\n                }}\n                aria-label=\"delete scene\"\n              />\n            </IconButton>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"edit\"\n              onClick={() => handleEditFrame(sceneNo)}\n              sx={{ marginLeft: \"20px\" }}\n            >\n              <EditIcon\n                sx={{\n                  color: \"#EF6262\",\n                }}\n                aria-label=\"edit scene\"\n              />\n            </IconButton>\n          </Box>\n        </Grid>\n\n        <Grid item xs={3} md={3}>\n          <Typography\n            variant=\"subtitle1\"\n            sx={{ color: \"primary.dark\" }}\n          >\n            Description\n          </Typography>\n        </Grid>\n        <Grid item xs={9} md={9}>\n          <Box\n            p={1.5}\n            borderRadius=\"5px\"\n            sx={{ backgroundColor: \"white\" }}\n          >\n            <Typography variant=\"body1\" sx={{ color: \"#1D5B79\" }}>\n              {description}\n            </Typography>\n          </Box>\n        </Grid>\n      </Grid>\n    </Box>\n    );\n\n  }\n\n  // Load frames from localStorage on component mount\n  useEffect(() => {\n    const storedFrames = localStorage.getItem(`frames_${video_id}`);\n    if (storedFrames) {\n      setFrames(JSON.parse(storedFrames));\n    }\n  }, [video_id]);\n\n  // Update frames in localStorage whenever frames state changes\n  useEffect(() => {\n    localStorage.setItem(`frames_${video_id}`, JSON.stringify(frames));\n  }, [frames, video_id]);\n\n  \n  const handleCallback = (progressData) => {\n    setPlayed(progressData);\n  };\n\n\n\n  const handleAddFrame = () => {\n    // Set the index of the newly added frame\n    if (description) {\n      const newFrame = {\n        start: played,\n        end: parseInt(endTime.$m) * 60 + parseInt(endTime.$s),\n        description: description,\n        id:frames.length\n      };\n      setFrames([...frames, newFrame]);\n      setDescription(\"\");\n      setEndTime(dayjs(\"00:00\", \"mm:ss\"));\n      //console.log(parseInt(endTime.$m)*60 + parseInt(endTime.$s))\n      // Find the index of the newly added frame in the sorted frames\n    } else {\n      // Handle invalid input (show error message, prevent adding frame, etc.)\n      console.log(\"Invalid input. Please enter a valid end time.\");\n    }\n  };\n\n\n  const handleReplayFrame = (startTimestamp) => {\n    // Call the seekToTimestamp function in the Player component\n    if (playerRef.current) {\n      playerRef.current.seekTo(startTimestamp, 'seconds');\n      setPlayed(startTimestamp); // Update the played state to reflect the new timestamp\n    }\n  };\n\n  const handleRemoveFrame = (index) => {\n    const updatedFrames = [...frames];\n    updatedFrames.splice(index, 1);\n    setFrames(updatedFrames);\n  };\n\n  const handleEditFrame = (index) => {\n    setSelectedFrameIndex(index);\n    setDescription(frames[index].description);\n    setEndTime(dayjs(formatTime(frames[index].end), \"mm:ss\"));\n    // setPlayed(frames[index].time);\n    setEditDialogOpen(true);\n  };\n\n  const handleSaveEdit = () => {\n    if (description) {\n      const updatedFrames = [...frames];\n      updatedFrames[selectedFrameIndex].description = description;\n      updatedFrames[selectedFrameIndex].end =\n        parseInt(endTime.$m) * 60 + parseInt(endTime.$s);\n      setFrames(updatedFrames);\n      setEditDialogOpen(false);\n      setDescription(\"\");\n      setEndTime(dayjs(\"00:00\", \"mm:ss\"));\n    }\n  };\n\n  const handleIncreaseEndTime = () => {\n    setEndTime((prevEndTime) => prevEndTime.add(1, 'second'));\n  };\n\n  const handleDecreaseEndTime = () => {\n    setEndTime((prevEndTime) => prevEndTime.subtract(1, 'second'));\n  };\n\n\n  const handlePublishDescriptions = async () => {\n    try {\n      for (let frame of frames) {\n        // Assuming you have an API endpoint for posting descriptions, adjust the URL accordingly\n        const apiUrl = \"http://127.0.0.1:8000/descriptions/\";\n        const token = Cookies.get(\"jwtToken\");\n        const response = await axios.post(apiUrl, {\n          video_id: video_id,\n          jwt: token,\n          time_stamp_start: frame.start,\n          descriptions: frame.description,\n          time_stamp_end: frame.end,\n          ai_or_human: \"human\",\n        });\n\n        // Handle the response from the backend API if needed\n        console.log(\"Description published:\", response.data);\n      }\n\n      // Optional: Show a success message to the user after all descriptions are published\n      console.log(\"All descriptions published successfully!\");\n    } catch (error) {\n      // Handle errors if the API request fails\n      console.error(\"Error publishing descriptions:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <Navbar />\n      <Stack sx={{ flexDirection: { sx: \"column\", md: \"row\" } }}>\n        <Box\n          sx={{\n            height: { sx: \"auto\", md: \"90vh\" },\n            paddingRight: { sx: 0, md: 2 },\n          }}\n        >\n          <Sidebar\n            selectedCategory={selectedCategory}\n            setSelectedCategory={setSelectedCategory}\n          />\n        </Box>\n\n        <Grid\n          container\n          p={2}\n          sx={{ overflowY: \"auto\", height: \"90vh\", flex: 2 }}\n        >\n          <Grid item xs={12} md={7}>\n            <Player path={video_path} parentCallback={handleCallback} seekToTimestamp={handleReplayFrame} playerRef={playerRef} />\n            <Box\n              p={2}\n              sx={{\n                backgroundColor: \"primary.main\",\n                borderRadius: \"5px\",\n                paddingBottom: \"20px\",\n              }}\n              mt={1}\n            >\n              <Typography variant=\"h6\" sx={{ color: \"primary.dark\" }}>\n                Add description at {formatTime(played)}\n              </Typography>\n              <hr />\n              <LocalizationProvider dateAdapter={AdapterDayjs}>\n                <TimeField\n                  label=\"End timestamp\"\n                  value={endTime}\n                  onChange={(newValue) => setEndTime(newValue)}\n                  format=\"mm:ss\"\n                  sx={{\n                    marginBottom: \"10px\",\n                    backgroundColor: \"white\",\n                    borderRadius: \"5px\",\n                  }}\n                />\n                        <IconButton\n                  aria-label=\"increase end time\"\n                  onClick={handleIncreaseEndTime}\n                >\n                  <ArrowUpwardIcon />\n                </IconButton>\n                <IconButton\n                  aria-label=\"decrease end time\"\n                  onClick={handleDecreaseEndTime}\n                >\n                  <ArrowDownwardIcon />\n                </IconButton>\n                {/* {console.log(\"this is value\", endTime.$m, endTime.$s)} */}\n              </LocalizationProvider>\n\n              <TextField\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                variant=\"outlined\"\n                fullWidth\n                placeholder=\"Enter description\"\n                sx={{\n                  marginBottom: \"10px\",\n                  backgroundColor: \"white\",\n                  borderRadius: \"5px\",\n                }}\n              />\n              <Button\n                sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n                className=\"category-btn\"\n                onClick={handleAddFrame}\n              >\n                Add Description\n              </Button>\n            </Box>\n          </Grid>\n\n          <Grid\n            item\n            xs={12}\n            md={4.9}\n            marginLeft={1}\n            sx={{\n              backgroundColor: \"primary.main\",\n              borderRadius: \"5px\",\n              height: \"85vh\", // Set the height to 75vh\n              overflowY: \"auto\", // Set overflow to auto for vertical scrolling\n            }}\n          >\n            <Box sx={{ height: \"75vh\", overflowY: \"auto\"}}>\n              {frames\n                .slice() // Create a shallow copy of the frames array\n                .sort((a, b) => a.start - b.start) // Sort the frames based on starting timestamp\n                .map((frame, index) => (\n                    <Frame\n                      key={id}\n                      sceneNo={index}\n                      description={frame.description}\n                      startTime={frame.start}\n                      endTime={frame.end}\n                    />\n                ))}\n            </Box>\n\n            <Dialog\n              open={editDialogOpen}\n              onClose={() => setEditDialogOpen(false)}\n              fullWidth\n            >\n              <DialogTitle>Edit Description at timestamp {played}</DialogTitle>\n              <DialogContent>\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\n                  <TimeField\n                    label=\"End timestamp\"\n                    value={endTime}\n                    onChange={(newValue) => setEndTime(newValue)}\n                    format=\"mm:ss\"\n                    sx={{\n                      marginBottom: \"10px\",\n                      backgroundColor: \"white\",\n                      borderRadius: \"5px\",\n                    }}\n                  />\n                  {/* {console.log(\"this is value\", endTime.$m, endTime.$s)} */}\n                </LocalizationProvider>\n                <TextField\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  variant=\"outlined\"\n                  fullWidth\n                  placeholder=\"Enter description\"\n                  style={{ marginBottom: \"10px\" }}\n                />\n              </DialogContent>\n              <DialogActions>\n                <Button\n                  onClick={() => setEditDialogOpen(false)}\n                  sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n                  className=\"category-btn\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleSaveEdit}\n                  sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n                  className=\"category-btn\"\n                >\n                  Save\n                </Button>\n              </DialogActions>\n            </Dialog>\n            <Divider />\n                <Button\n                  sx={{\n                    backgroundColor: \"secondary.main\",\n                    color: \"white\",\n                    margin:\"20px\"\n                  }}\n                  \n                  className=\"category-btn\"\n                  onClick={handlePublishDescriptions}\n                  disabled={frames.length <= 0}\n                >\n                  Publish Description\n                </Button>\n          </Grid>\n        </Grid>\n      </Stack>\n    </div>\n  );\n};\n\nexport default AddDescriptions;\n\n\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import DeleteIcon from \"@mui/icons-material/Delete\";\n// import EditIcon from \"@mui/icons-material/Edit\";\n// import ReplayIcon from '@mui/icons-material/Replay';\n// import ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\n// import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\n// import dayjs from \"dayjs\";\n// import {\n//   Box,\n//   Stack,\n//   Typography,\n//   Grid,\n//   TextField,\n//   Button,\n//   IconButton,\n//   Dialog,\n//   DialogTitle,\n//   DialogContent,\n//   DialogActions,\n//   Chip,\n//   Divider,\n// } from \"@mui/material\";\n// import { TimeField } from \"@mui/x-date-pickers/TimeField\";\n// import { Sidebar, Player, Navbar, Notes } from \"./\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import formatTime from \"../utils/functions\";\n// import { useLocation, Link } from \"react-router-dom\";\n// import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\n// import { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\n\n// const AddDescriptions = () => {\n//   const [selectedCategory, setSelectedCategory] = useState();\n//   const [endTime, setEndTime] = useState(dayjs(\"00:00\", \"mm:ss\"));\n//   const [startTime, setStartTime] = useState(dayjs(\"00:00\", \"mm:ss\"));\n//   const [played, setPlayed] = useState(0);\n//   const [frames, setFrames] = useState([]);\n//   const [description, setDescription] = useState(\"\");\n//   const [selectedFrameIndex, setSelectedFrameIndex] = useState(null);\n//   const [editDialogOpen, setEditDialogOpen] = useState(false);\n//   const playerRef = useRef(null);\n//   const framesContainerRef = useRef(null);\n//   const location = useLocation();\n//   const { video_id, video_path } = location.state;\n\n\n//   // Load frames from localStorage on component mount\n//   useEffect(() => {\n//     const storedFrames = localStorage.getItem(`frames_${video_id}`);\n//     if (storedFrames) {\n//       setFrames(JSON.parse(storedFrames));\n//     }\n//   }, [video_id]);\n\n//   // Update frames in localStorage whenever frames state changes\n//   useEffect(() => {\n//     localStorage.setItem(`frames_${video_id}`, JSON.stringify(frames));\n//   }, [frames, video_id]);\n\n  \n//   const handleCallback = (progressData) => {\n//     setPlayed(progressData);\n//   };\n\n\n\n//   const handleAddFrame = () => {\n//     // Set the index of the newly added frame\n//     if (description) {\n//       const newFrame = {\n//         start: played,\n//         end: parseInt(endTime.$m) * 60 + parseInt(endTime.$s),\n//         description: description,\n//       };\n//       setFrames([...frames, newFrame]);\n//       setDescription(\"\");\n//       setEndTime(dayjs(\"00:00\", \"mm:ss\"));\n//       //console.log(parseInt(endTime.$m)*60 + parseInt(endTime.$s))\n//       // Find the index of the newly added frame in the sorted frames\n//     } else {\n//       // Handle invalid input (show error message, prevent adding frame, etc.)\n//       console.log(\"Invalid input. Please enter a valid end time.\");\n//     }\n//   };\n\n\n//   const handleReplayFrame = (startTimestamp) => {\n//     // Call the seekToTimestamp function in the Player component\n//     if (playerRef.current) {\n//       playerRef.current.seekTo(startTimestamp, 'seconds');\n//       setPlayed(startTimestamp); // Update the played state to reflect the new timestamp\n//     }\n//   };\n\n//   const handleRemoveFrame = (index) => {\n//     const updatedFrames = [...frames];\n//     updatedFrames.splice(index, 1);\n//     setFrames(updatedFrames);\n//   };\n\n//   const handleEditFrame = (index) => {\n//     setSelectedFrameIndex(index);\n//     setDescription(frames[index].description);\n//     setEndTime(dayjs(formatTime(frames[index].end), \"mm:ss\"));\n//     // setPlayed(frames[index].time);\n//     setEditDialogOpen(true);\n//   };\n\n//   const handleSaveEdit = () => {\n//     if (description) {\n//       const updatedFrames = [...frames];\n//       updatedFrames[selectedFrameIndex].description = description;\n//       updatedFrames[selectedFrameIndex].end =\n//         parseInt(endTime.$m) * 60 + parseInt(endTime.$s);\n//       setFrames(updatedFrames);\n//       setEditDialogOpen(false);\n//       setDescription(\"\");\n//       setEndTime(dayjs(\"00:00\", \"mm:ss\"));\n//     }\n//   };\n\n//   const handleIncreaseEndTime = () => {\n//     setEndTime((prevEndTime) => prevEndTime.add(1, 'second'));\n//   };\n\n//   const handleDecreaseEndTime = () => {\n//     setEndTime((prevEndTime) => prevEndTime.subtract(1, 'second'));\n//   };\n\n\n//   const handlePublishDescriptions = async () => {\n//     try {\n//       for (let frame of frames) {\n//         // Assuming you have an API endpoint for posting descriptions, adjust the URL accordingly\n//         const apiUrl = \"http://127.0.0.1:8000/descriptions/\";\n//         const token = Cookies.get(\"jwtToken\");\n//         const response = await axios.post(apiUrl, {\n//           video_id: video_id,\n//           jwt: token,\n//           time_stamp_start: frame.start,\n//           descriptions: frame.description,\n//           time_stamp_end: frame.end,\n//           ai_or_human: \"human\",\n//         });\n\n//         // Handle the response from the backend API if needed\n//         console.log(\"Description published:\", response.data);\n//       }\n\n//       // Optional: Show a success message to the user after all descriptions are published\n//       console.log(\"All descriptions published successfully!\");\n//     } catch (error) {\n//       // Handle errors if the API request fails\n//       console.error(\"Error publishing descriptions:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <Stack sx={{ flexDirection: { sx: \"column\", md: \"row\" } }}>\n//         <Box\n//           sx={{\n//             height: { sx: \"auto\", md: \"90vh\" },\n//             paddingRight: { sx: 0, md: 2 },\n//           }}\n//         >\n//           <Sidebar\n//             selectedCategory={selectedCategory}\n//             setSelectedCategory={setSelectedCategory}\n//           />\n//         </Box>\n\n//         <Grid\n//           container\n//           p={2}\n//           sx={{ overflowY: \"auto\", height: \"90vh\", flex: 2 }}\n//         >\n//           <Grid item xs={12} md={7}>\n//             <Player path={video_path} parentCallback={handleCallback} seekToTimestamp={handleReplayFrame} playerRef={playerRef} />\n//             <Box\n//               p={2}\n//               sx={{\n//                 backgroundColor: \"primary.main\",\n//                 borderRadius: \"5px\",\n//                 paddingBottom: \"20px\",\n//               }}\n//               mt={1}\n//             >\n//               <Typography variant=\"h6\" sx={{ color: \"primary.dark\" }}>\n//                 Add description at {formatTime(played)}\n//               </Typography>\n//               <hr />\n//               <LocalizationProvider dateAdapter={AdapterDayjs}>\n//                 <TimeField\n//                   label=\"End timestamp\"\n//                   value={endTime}\n//                   onChange={(newValue) => setEndTime(newValue)}\n//                   format=\"mm:ss\"\n//                   sx={{\n//                     marginBottom: \"10px\",\n//                     backgroundColor: \"white\",\n//                     borderRadius: \"5px\",\n//                   }}\n//                 />\n//                         <IconButton\n//                   aria-label=\"increase end time\"\n//                   onClick={handleIncreaseEndTime}\n//                 >\n//                   <ArrowUpwardIcon />\n//                 </IconButton>\n//                 <IconButton\n//                   aria-label=\"decrease end time\"\n//                   onClick={handleDecreaseEndTime}\n//                 >\n//                   <ArrowDownwardIcon />\n//                 </IconButton>\n//                 {/* {console.log(\"this is value\", endTime.$m, endTime.$s)} */}\n//               </LocalizationProvider>\n\n//               <TextField\n//                 value={description}\n//                 onChange={(e) => setDescription(e.target.value)}\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 placeholder=\"Enter description\"\n//                 sx={{\n//                   marginBottom: \"10px\",\n//                   backgroundColor: \"white\",\n//                   borderRadius: \"5px\",\n//                 }}\n//               />\n//               <Button\n//                 sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n//                 className=\"category-btn\"\n//                 onClick={handleAddFrame}\n//               >\n//                 Add Description\n//               </Button>\n//             </Box>\n//           </Grid>\n\n//           <Grid\n//             item\n//             xs={12}\n//             md={4.9}\n//             marginLeft={1}\n//             sx={{\n//               backgroundColor: \"primary.main\",\n//               borderRadius: \"5px\",\n//               height: \"85vh\", // Set the height to 75vh\n//               overflowY: \"auto\", // Set overflow to auto for vertical scrolling\n//             }}\n//           >\n//             <Box sx={{ height: \"75vh\", overflowY: \"auto\"}}>\n//               {frames\n//                 .slice() // Create a shallow copy of the frames array\n//                 .sort((a, b) => a.start - b.start) // Sort the frames based on starting timestamp\n//                 .map((frame, index) => (\n//                   <Box key={index} p={2}>\n//                     <Grid container columnSpacing={{ xs: 1, sm: 2, md: 3 }} ref={framesContainerRef}>\n//                       {/* Displays Scene number */}\n//                       <Grid item xs={3}>\n//                         <Typography variant=\"h6\" sx={{ color: \"primary.dark\" }}>\n//                           Scene {index+1}\n//                         </Typography>\n//                       </Grid>\n//                       {/* Displays time stamp */}\n//                       <Grid item xs={3}>\n//                         <Chip\n//                           label={\n//                             formatTime(frame.start) +\n//                             \" - \" +\n//                             formatTime(frame.end)\n//                           }\n//                           sx={{\n//                             backgroundColor: \"secondary.light\",\n//                             color: \"white\",\n//                             marginBottom: \"20px\",\n//                           }}\n//                         />\n//                       </Grid>\n//                       <Grid item xs={6}>\n//                         <Box display=\"flex\" justifyContent=\"flex-end\">\n//                         <IconButton\n//                             edge=\"end\"\n//                             aria-label=\"replay the scene from the start timestamp\"\n//                             onClick={() => handleReplayFrame(frame.start)}\n//                           >\n//                             <ReplayIcon\n//                               sx={{\n//                                 color: \"#EF6262\",\n//                               }}\n//                               aria-label=\"replay the scene from the start timestamp\"\n//                             />\n//                           </IconButton>\n//                           <IconButton\n//                             edge=\"end\"\n//                             aria-label=\"delete\"\n//                             onClick={() => handleRemoveFrame(index)}\n//                             sx={{ marginLeft: \"20px\" }}\n//                           >\n//                             <DeleteIcon\n//                               sx={{\n//                                 color: \"#EF6262\",\n//                               }}\n//                               aria-label=\"delete scene\"\n//                             />\n//                           </IconButton>\n//                           <IconButton\n//                             edge=\"end\"\n//                             aria-label=\"edit\"\n//                             onClick={() => handleEditFrame(index)}\n//                             sx={{ marginLeft: \"20px\" }}\n//                           >\n//                             <EditIcon\n//                               sx={{\n//                                 color: \"#EF6262\",\n//                               }}\n//                               aria-label=\"edit scene\"\n//                             />\n//                           </IconButton>\n//                         </Box>\n//                       </Grid>\n\n//                       <Grid item xs={3} md={3}>\n//                         <Typography\n//                           variant=\"subtitle1\"\n//                           sx={{ color: \"primary.dark\" }}\n//                         >\n//                           Description\n//                         </Typography>\n//                       </Grid>\n//                       <Grid item xs={9} md={9}>\n//                         <Box\n//                           p={1.5}\n//                           borderRadius=\"5px\"\n//                           sx={{ backgroundColor: \"white\" }}\n//                         >\n//                           <Typography variant=\"body1\" sx={{ color: \"#1D5B79\" }}>\n//                             {frame.description}\n//                           </Typography>\n//                         </Box>\n//                       </Grid>\n//                     </Grid>\n//                   </Box>\n//                 ))}\n//             </Box>\n\n//             <Dialog\n//               open={editDialogOpen}\n//               onClose={() => setEditDialogOpen(false)}\n//               fullWidth\n//             >\n//               <DialogTitle>Edit Description at timestamp {played}</DialogTitle>\n//               <DialogContent>\n//                 <LocalizationProvider dateAdapter={AdapterDayjs}>\n//                   <TimeField\n//                     label=\"End timestamp\"\n//                     value={endTime}\n//                     onChange={(newValue) => setEndTime(newValue)}\n//                     format=\"mm:ss\"\n//                     sx={{\n//                       marginBottom: \"10px\",\n//                       backgroundColor: \"white\",\n//                       borderRadius: \"5px\",\n//                     }}\n//                   />\n//                   {/* {console.log(\"this is value\", endTime.$m, endTime.$s)} */}\n//                 </LocalizationProvider>\n//                 <TextField\n//                   value={description}\n//                   onChange={(e) => setDescription(e.target.value)}\n//                   variant=\"outlined\"\n//                   fullWidth\n//                   placeholder=\"Enter description\"\n//                   style={{ marginBottom: \"10px\" }}\n//                 />\n//               </DialogContent>\n//               <DialogActions>\n//                 <Button\n//                   onClick={() => setEditDialogOpen(false)}\n//                   sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n//                   className=\"category-btn\"\n//                 >\n//                   Cancel\n//                 </Button>\n//                 <Button\n//                   onClick={handleSaveEdit}\n//                   sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n//                   className=\"category-btn\"\n//                 >\n//                   Save\n//                 </Button>\n//               </DialogActions>\n//             </Dialog>\n//             <Divider />\n//                 <Button\n//                   sx={{\n//                     backgroundColor: \"secondary.main\",\n//                     color: \"white\",\n//                     margin:\"20px\"\n//                   }}\n                  \n//                   className=\"category-btn\"\n//                   onClick={handlePublishDescriptions}\n//                   disabled={frames.length <= 0}\n//                 >\n//                   Publish Description\n//                 </Button>\n//           </Grid>\n//         </Grid>\n//       </Stack>\n//     </div>\n//   );\n// };\n\n// export default AddDescriptions;\n"],"mappings":"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Ae;AAuZrB,eAAeA,eAAe;;AAI9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAuI,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}