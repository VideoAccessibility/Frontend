{"ast":null,"code":"var _jsxFileName = \"/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/AskAI.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Swal from 'sweetalert2';\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport { Button } from \"@mui/material\";\nimport KeyboardVoiceIcon from '@mui/icons-material/KeyboardVoice';\nimport useSpeechRecognition from './useSpeechRecognition'; // Import the speech recognition hook\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AskAI = props => {\n  _s();\n  const {\n    listening,\n    transcript,\n    startListening,\n    stopListening\n  } = useSpeechRecognition();\n  const handleSpeechRecognition = () => {\n    startListening();\n    Swal.fire({\n      title: 'Listening...',\n      html: `\n        <p>Listening to your question. Click stop when you're done speaking.</p>\n        <p><strong>Transcript:</strong> ${transcript}</p>\n      `,\n      showCancelButton: true,\n      confirmButtonText: 'Submit Question',\n      cancelButtonText: 'Cancel',\n      preConfirm: () => {\n        stopListening();\n        return transcript;\n      }\n    }).then(result => {\n      if (!result.isDismissed && result.value) {\n        // Handle the transcript, send it to the server or perform any other actions\n        const token = Cookies.get(\"jwtToken\");\n        const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n        const postData = {\n          \"id\": props.videoID,\n          \"question\": result.value,\n          \"currentTime\": props.timeStamp,\n          \"jwt\": token\n        };\n        axios.post(apiUrl, postData).then(response => {\n          // Handle the successful response\n          console.log(\"Response:\", response.data);\n        }).catch(error => {\n          // Handle errors, if any\n          console.error(\"Error:\", error);\n        });\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSpeechRecognition,\n      children: /*#__PURE__*/_jsxDEV(KeyboardVoiceIcon, {\n        sx: {\n          fontSize: \"70px\",\n          backgroundColor: \"#1D5B79\",\n          color: \"#EF6262\",\n          ml: \"5px\",\n          borderRadius: \"100%\",\n          padding: \"20px\",\n          margin: \"20px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(AskAI, \"792AAR1kwgCuH+KIlYQFoHtFGJA=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = AskAI;\nexport default AskAI;\n\n// // This is the the alert box that opens when a user wants to ask a questions regarding a scene of a video\n// import React from 'react';\n// import Swal from 'sweetalert2';\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import {Button,  DialogContent, DialogContentText, DialogActions} from \"@mui/material\";\n// import KeyboardVoiceIcon from '@mui/icons-material/KeyboardVoice';\n\n// const AskAI = (props) => {\n//   (async () => {\n\n//     const { value: text } = await Swal.fire({\n//       input: 'textarea',\n//       inputLabel: 'Type in your question regarding the frame',\n//       inputPlaceholder: 'Type your question here...',\n//       icon: 'question',\n//       inputAttributes: {\n//         'aria-label': 'Type the question you want to ask about the frame here'\n//       },\n//       showCancelButton: false,\n//       confirmButtonText: 'Submit Question',\n//       cancelButtonText: 'Cancel',\n//     })\n\n//     if (text) {\n//       // Swal.fire(text)\n//       const token = Cookies.get(\"jwtToken\");\n//       // Define the API endpoint where you want to send the POST request\n//       const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n//       console.log(\"This is my props id\", props.videoID)\n//       const postData = {\n//         \"id\": props.videoID,\n//         \"question\":text,\n//         \"currentTime\": props.timeStamp,\n//         \"jwt\":token\n//       };\n\n//       axios\n//         .post(apiUrl, postData)\n//         .then((response) => {\n//           // Handle the successful response\n//           console.log(\"Response:\", response.data);\n\n//         })\n//         .catch((error) => {\n//           // Handle errors, if any\n//           console.error(\"Error:\", error);\n//         });\n//     }\n\n//     })()\n//   return (\n//     <div>\n//      { props.parentCallback()}\n//         {/* <DialogContent>\n//         <KeyboardVoiceIcon\n//             sx={{ fontSize: \"70px\", backgroundColor:\"#1D5B79\", color: \"#EF6262\", ml: \"5px\", borderRadius:\"100%\" , padding:\"20px\", margin: \"20px\"}}\n//         />\n//           <DialogContentText id=\"alert-dialog-description\" justifyContent={\"center\"}>\n//             Ask your questions regarding the frame here\n//           </DialogContentText>\n//         </DialogContent>\n//         <DialogActions>\n//         </DialogActions> */}\n//     </div>\n//   );\n// }\n\n// export default AskAI\nvar _c;\n$RefreshReg$(_c, \"AskAI\");","map":{"version":3,"names":["React","Swal","axios","Cookies","Button","KeyboardVoiceIcon","useSpeechRecognition","jsxDEV","_jsxDEV","AskAI","props","_s","listening","transcript","startListening","stopListening","handleSpeechRecognition","fire","title","html","showCancelButton","confirmButtonText","cancelButtonText","preConfirm","then","result","isDismissed","value","token","get","apiUrl","postData","videoID","timeStamp","post","response","console","log","data","catch","error","children","onClick","sx","fontSize","backgroundColor","color","ml","borderRadius","padding","margin","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/AskAI.jsx"],"sourcesContent":["import React from 'react';\nimport Swal from 'sweetalert2';\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport { Button } from \"@mui/material\";\nimport KeyboardVoiceIcon from '@mui/icons-material/KeyboardVoice';\nimport useSpeechRecognition from './useSpeechRecognition'; // Import the speech recognition hook\n\nconst AskAI = (props) => {\n  const { listening, transcript, startListening, stopListening } = useSpeechRecognition();\n\n  const handleSpeechRecognition = () => {\n    startListening();\n\n    Swal.fire({\n      title: 'Listening...',\n      html: `\n        <p>Listening to your question. Click stop when you're done speaking.</p>\n        <p><strong>Transcript:</strong> ${transcript}</p>\n      `,\n      showCancelButton: true,\n      confirmButtonText: 'Submit Question',\n      cancelButtonText: 'Cancel',\n      preConfirm: () => {\n        stopListening();\n        return transcript;\n      }\n    }).then((result) => {\n      if (!result.isDismissed && result.value) {\n        // Handle the transcript, send it to the server or perform any other actions\n        const token = Cookies.get(\"jwtToken\");\n        const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n        const postData = {\n          \"id\": props.videoID,\n          \"question\": result.value,\n          \"currentTime\": props.timeStamp,\n          \"jwt\": token\n        };\n\n        axios\n          .post(apiUrl, postData)\n          .then((response) => {\n            // Handle the successful response\n            console.log(\"Response:\", response.data);\n          })\n          .catch((error) => {\n            // Handle errors, if any\n            console.error(\"Error:\", error);\n          });\n      }\n    });\n  };\n\n  return (\n    <div>\n      <Button onClick={handleSpeechRecognition}>\n        <KeyboardVoiceIcon sx={{ fontSize: \"70px\", backgroundColor:\"#1D5B79\", color: \"#EF6262\", ml: \"5px\", borderRadius:\"100%\", padding:\"20px\", margin: \"20px\"}} />\n      </Button>\n    </div>\n  );\n};\n\nexport default AskAI;\n\n\n\n// // This is the the alert box that opens when a user wants to ask a questions regarding a scene of a video\n// import React from 'react';\n// import Swal from 'sweetalert2';\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import {Button,  DialogContent, DialogContentText, DialogActions} from \"@mui/material\";\n// import KeyboardVoiceIcon from '@mui/icons-material/KeyboardVoice';\n\n// const AskAI = (props) => {\n//   (async () => {\n\n//     const { value: text } = await Swal.fire({\n//       input: 'textarea',\n//       inputLabel: 'Type in your question regarding the frame',\n//       inputPlaceholder: 'Type your question here...',\n//       icon: 'question',\n//       inputAttributes: {\n//         'aria-label': 'Type the question you want to ask about the frame here'\n//       },\n//       showCancelButton: false,\n//       confirmButtonText: 'Submit Question',\n//       cancelButtonText: 'Cancel',\n//     })\n    \n//     if (text) {\n//       // Swal.fire(text)\n//       const token = Cookies.get(\"jwtToken\");\n//       // Define the API endpoint where you want to send the POST request\n//       const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n//       console.log(\"This is my props id\", props.videoID)\n//       const postData = {\n//         \"id\": props.videoID,\n//         \"question\":text,\n//         \"currentTime\": props.timeStamp,\n//         \"jwt\":token\n//       };\n  \n//       axios\n//         .post(apiUrl, postData)\n//         .then((response) => {\n//           // Handle the successful response\n//           console.log(\"Response:\", response.data);\n\n//         })\n//         .catch((error) => {\n//           // Handle errors, if any\n//           console.error(\"Error:\", error);\n//         });\n//     }\n    \n//     })()\n//   return (\n//     <div>\n//      { props.parentCallback()}\n//         {/* <DialogContent>\n//         <KeyboardVoiceIcon\n//             sx={{ fontSize: \"70px\", backgroundColor:\"#1D5B79\", color: \"#EF6262\", ml: \"5px\", borderRadius:\"100%\" , padding:\"20px\", margin: \"20px\"}}\n//         />\n//           <DialogContentText id=\"alert-dialog-description\" justifyContent={\"center\"}>\n//             Ask your questions regarding the frame here\n//           </DialogContentText>\n//         </DialogContent>\n//         <DialogActions>\n//         </DialogActions> */}\n//     </div>\n//   );\n// }\n\n// export default AskAI"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}