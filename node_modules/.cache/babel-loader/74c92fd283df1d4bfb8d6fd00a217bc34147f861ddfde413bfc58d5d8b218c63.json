{"ast":null,"code":"var _jsxFileName = \"/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/ChatGPT.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { TextToSpeech } from \"./\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatGPT = props => {\n  _s();\n  const video = require('./' + props.path);\n  const [utterance, setUtterance] = useState(null);\n  const [voice, setVoice] = useState(null);\n  const [videoDescriptions, setVideoDescriptions] = useState([{\n    timestamp: 0,\n    description: \"Description for start of video\"\n  }, {\n    timestamp: 5,\n    description: \"Description at 5 seconds\"\n  }, {\n    timestamp: 10,\n    description: \"Description at 10 seconds\"\n  }\n  // Add more descriptions with timestamps as needed\n  ]);\n\n  const [currentDescriptionIndex, setCurrentDescriptionIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isSpeechPlaying, setIsSpeechPlaying] = useState(false);\n  useEffect(() => {\n    const video = document.getElementById('video');\n    const handleTimeUpdate = () => {\n      const currentTime = Math.floor(video.currentTime);\n      const index = videoDescriptions.findIndex(description => description.timestamp === currentTime);\n      if (index !== -1 && index !== currentDescriptionIndex) {\n        setCurrentDescriptionIndex(index);\n        video.pause();\n        playSpeech(videoDescriptions[currentDescriptionIndex].description);\n      }\n    };\n    video.addEventListener('timeupdate', handleTimeUpdate);\n    return () => {\n      video.removeEventListener('timeupdate', handleTimeUpdate);\n    };\n  }, [currentDescriptionIndex, videoDescriptions]);\n  function playSpeech(text) {\n    const synth = window.speechSynthesis;\n    const u = new SpeechSynthesisUtterance(text);\n    const voices = synth.getVoices();\n    setUtterance(u);\n    setVoice(voices[0]);\n    synth.speak(u);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      id: \"video\",\n      controls: true,\n      width: \"640\",\n      height: \"360\",\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: video,\n        type: \"video/mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), \"Your browser does not support the video tag.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Video Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: videoDescriptions[currentDescriptionIndex].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextToSpeech, {\n        text: videoDescriptions[currentDescriptionIndex].description,\n        isPlayed: isSpeechPlaying,\n        onStart: () => setIsSpeechPlaying(true)\n        // onStart={() => playSpeech(videoDescriptions[currentDescriptionIndex].description)}\n        ,\n        onEnd: () => setIsSpeechPlaying(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatGPT, \"ci0IM65Gg2u3+0gyAUxD6RkgK9A=\");\n_c = ChatGPT;\nexport default ChatGPT;\nvar _c;\n$RefreshReg$(_c, \"ChatGPT\");","map":{"version":3,"names":["React","useState","useEffect","TextToSpeech","jsxDEV","_jsxDEV","ChatGPT","props","_s","video","require","path","utterance","setUtterance","voice","setVoice","videoDescriptions","setVideoDescriptions","timestamp","description","currentDescriptionIndex","setCurrentDescriptionIndex","isPlaying","setIsPlaying","isSpeechPlaying","setIsSpeechPlaying","document","getElementById","handleTimeUpdate","currentTime","Math","floor","index","findIndex","pause","playSpeech","addEventListener","removeEventListener","text","synth","window","speechSynthesis","u","SpeechSynthesisUtterance","voices","getVoices","speak","children","id","controls","width","height","src","type","fileName","_jsxFileName","lineNumber","columnNumber","isPlayed","onStart","onEnd","_c","$RefreshReg$"],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/ChatGPT.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { TextToSpeech } from \"./\";\n\nconst ChatGPT = (props) => {\n  const video = require('./' + props.path);\n  const [utterance, setUtterance] = useState(null);\n  const [voice, setVoice] = useState(null);\n  const [videoDescriptions, setVideoDescriptions] = useState([\n    { timestamp: 0, description: \"Description for start of video\" },\n    { timestamp: 5, description: \"Description at 5 seconds\" },\n    { timestamp: 10, description: \"Description at 10 seconds\" },\n    // Add more descriptions with timestamps as needed\n  ]);\n\n  const [currentDescriptionIndex, setCurrentDescriptionIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isSpeechPlaying, setIsSpeechPlaying] = useState(false);\n\n  useEffect(() => {\n    const video = document.getElementById('video');\n\n    const handleTimeUpdate = () => {\n      const currentTime = Math.floor(video.currentTime);\n      const index = videoDescriptions.findIndex(description => description.timestamp === currentTime);\n\n      if (index !== -1 && index !== currentDescriptionIndex) {\n        setCurrentDescriptionIndex(index);\n        video.pause();\n        playSpeech(videoDescriptions[currentDescriptionIndex].description);\n      }\n    };\n\n    video.addEventListener('timeupdate', handleTimeUpdate);\n\n    return () => {\n      video.removeEventListener('timeupdate', handleTimeUpdate);\n    };\n  }, [currentDescriptionIndex, videoDescriptions]);\n\n  function playSpeech(text){\n    const synth = window.speechSynthesis;\n    const u = new SpeechSynthesisUtterance(text);\n    const voices = synth.getVoices();\n\n    setUtterance(u);\n    setVoice(voices[0]);\n    synth.speak(u);\n\n  }\n\n  return (\n    <div>\n      <video id=\"video\" controls width=\"640\" height=\"360\">\n        <source src={video} type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n\n      <div>\n        <h2>Video Description</h2>\n        <p>{videoDescriptions[currentDescriptionIndex].description}</p>\n        <TextToSpeech\n            text={videoDescriptions[currentDescriptionIndex].description}\n            isPlayed={isSpeechPlaying}\n            onStart={() => setIsSpeechPlaying(true)}\n            // onStart={() => playSpeech(videoDescriptions[currentDescriptionIndex].description)}\n            onEnd={() => setIsSpeechPlaying(false)}\n          />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatGPT;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}