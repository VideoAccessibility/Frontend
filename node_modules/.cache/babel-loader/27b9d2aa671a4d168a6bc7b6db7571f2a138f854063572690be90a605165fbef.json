{"ast":null,"code":"var _jsxFileName = \"/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/AddDescriptions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport dayjs from \"dayjs\";\nimport { Box, Stack, Typography, Grid, TextField, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogActions, Chip, Divider } from \"@mui/material\";\nimport { TimeField } from \"@mui/x-date-pickers/TimeField\";\nimport { Sidebar, Player, Navbar, Notes } from \"./\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport formatTime from \"../utils/functions\";\nimport { useLocation, Link } from \"react-router-dom\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddDescriptions = () => {\n  _s();\n  const [selectedCategory, setSelectedCategory] = useState();\n  const [endTime, setEndTime] = useState(dayjs(\"00:00\", \"mm:ss\"));\n  const [played, setPlayed] = useState(0);\n  const [frames, setFrames] = useState([]);\n  const [description, setDescription] = useState(\"\");\n  const [selectedFrameIndex, setSelectedFrameIndex] = useState(null);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const playerRef = useRef(null);\n  // const [value, setValue] = React.useState(dayjs(\"00:00\",\"mm:ss\"));\n\n  const location = useLocation();\n  const {\n    video_id,\n    video_path\n  } = location.state;\n\n  // Load frames from localStorage on component mount\n  useEffect(() => {\n    const storedFrames = localStorage.getItem(`frames_${video_id}`);\n    if (storedFrames) {\n      setFrames(JSON.parse(storedFrames));\n    }\n  }, [video_id]);\n\n  // Update frames in localStorage whenever frames state changes\n  useEffect(() => {\n    localStorage.setItem(`frames_${video_id}`, JSON.stringify(frames));\n  }, [frames, video_id]);\n  const handleCallback = progressData => {\n    setPlayed(progressData);\n  };\n  const handleAddFrame = () => {\n    if (description) {\n      const newFrame = {\n        start: played,\n        end: parseInt(endTime.$m) * 60 + parseInt(endTime.$s),\n        description: description\n      };\n      setFrames([...frames, newFrame]);\n      setDescription(\"\");\n      setEndTime(dayjs(\"00:00\", \"mm:ss\"));\n      //console.log(parseInt(endTime.$m)*60 + parseInt(endTime.$s))\n    } else {\n      // Handle invalid input (show error message, prevent adding frame, etc.)\n      console.log(\"Invalid input. Please enter a valid end time.\");\n    }\n  };\n  const handleReplayFrame = startTimestamp => {\n    // Call the seekToTimestamp function in the Player component\n    if (playerRef.current) {\n      playerRef.current.seekTo(startTimestamp, 'seconds');\n      setPlayed(startTimestamp); // Update the played state to reflect the new timestamp\n    }\n  };\n\n  const handleRemoveFrame = index => {\n    const updatedFrames = [...frames];\n    updatedFrames.splice(index, 1);\n    setFrames(updatedFrames);\n  };\n  const handleEditFrame = index => {\n    setSelectedFrameIndex(index);\n    setDescription(frames[index].description);\n    setEndTime(dayjs(formatTime(frames[index].end), \"mm:ss\"));\n    // setPlayed(frames[index].time);\n    setEditDialogOpen(true);\n  };\n  const handleSaveEdit = () => {\n    if (description) {\n      const updatedFrames = [...frames];\n      updatedFrames[selectedFrameIndex].description = description;\n      updatedFrames[selectedFrameIndex].end = parseInt(endTime.$m) * 60 + parseInt(endTime.$s);\n      setFrames(updatedFrames);\n      setEditDialogOpen(false);\n      setDescription(\"\");\n      setEndTime(dayjs(\"00:00\", \"mm:ss\"));\n    }\n  };\n  const handlePublishDescriptions = async () => {\n    try {\n      for (let frame of frames) {\n        // Assuming you have an API endpoint for posting descriptions, adjust the URL accordingly\n        const apiUrl = \"http://127.0.0.1:8000/descriptions/\";\n        const token = Cookies.get(\"jwtToken\");\n        const response = await axios.post(apiUrl, {\n          video_id: video_id,\n          jwt: token,\n          time_stamp_start: frame.start,\n          descriptions: frame.description,\n          time_stamp_end: frame.end,\n          ai_or_human: \"human\"\n        });\n\n        // Handle the response from the backend API if needed\n        console.log(\"Description published:\", response.data);\n      }\n\n      // Optional: Show a success message to the user after all descriptions are published\n      console.log(\"All descriptions published successfully!\");\n    } catch (error) {\n      // Handle errors if the API request fails\n      console.error(\"Error publishing descriptions:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      sx: {\n        flexDirection: {\n          sx: \"column\",\n          md: \"row\"\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          height: {\n            sx: \"auto\",\n            md: \"100vh\"\n          },\n          paddingRight: {\n            sx: 0,\n            md: 2\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(Sidebar, {\n          selectedCategory: selectedCategory,\n          setSelectedCategory: setSelectedCategory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        p: 2,\n        sx: {\n          overflowY: \"auto\",\n          height: \"90vh\",\n          flex: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 7,\n          children: [/*#__PURE__*/_jsxDEV(Player, {\n            path: video_path,\n            parentCallback: handleCallback,\n            seekToTimestamp: handleReplayFrame,\n            playerRef: playerRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            p: 2,\n            sx: {\n              backgroundColor: \"primary.main\",\n              borderRadius: \"5px\",\n              paddingBottom: \"20px\"\n            },\n            mt: 1,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                color: \"primary.dark\"\n              },\n              children: [\"Add description at \", formatTime(played)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n              dateAdapter: AdapterDayjs,\n              children: /*#__PURE__*/_jsxDEV(TimeField, {\n                label: \"End timestamp\",\n                value: endTime,\n                onChange: newValue => setEndTime(newValue),\n                format: \"mm:ss\",\n                sx: {\n                  marginBottom: \"10px\",\n                  backgroundColor: \"white\",\n                  borderRadius: \"5px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              value: description,\n              onChange: e => setDescription(e.target.value),\n              variant: \"outlined\",\n              fullWidth: true,\n              placeholder: \"Enter description\",\n              sx: {\n                marginBottom: \"10px\",\n                backgroundColor: \"white\",\n                borderRadius: \"5px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              sx: {\n                backgroundColor: \"secondary.main\",\n                color: \"white\"\n              },\n              className: \"category-btn\",\n              onClick: handleAddFrame,\n              children: \"Add Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4.9,\n          marginLeft: 1,\n          sx: {\n            backgroundColor: \"primary.main\",\n            borderRadius: \"5px\",\n            height: \"85vh\",\n            // Set the height to 75vh\n            overflowY: \"auto\" // Set overflow to auto for vertical scrolling\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              height: \"75vh\",\n              overflowY: \"auto\"\n            },\n            children: frames.slice() // Create a shallow copy of the frames array\n            .sort((a, b) => a.start - b.start) // Sort the frames based on starting timestamp\n            .map((frame, index) => /*#__PURE__*/_jsxDEV(Box, {\n              p: 2,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                columnSpacing: {\n                  xs: 1,\n                  sm: 2,\n                  md: 3\n                },\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 3,\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"h6\",\n                    sx: {\n                      color: \"primary.dark\"\n                    },\n                    children: [\"Scene \", index + 1]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 234,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 3,\n                  children: /*#__PURE__*/_jsxDEV(Chip, {\n                    label: formatTime(frame.start) + \" - \" + formatTime(frame.end),\n                    sx: {\n                      backgroundColor: \"secondary.light\",\n                      color: \"white\",\n                      marginBottom: \"20px\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 240,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 6,\n                  children: /*#__PURE__*/_jsxDEV(Box, {\n                    display: \"flex\",\n                    justifyContent: \"flex-end\",\n                    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                      edge: \"end\",\n                      \"aria-label\": \"replay the scene from the start timestamp\",\n                      onClick: () => handleReplayFrame(frame.start),\n                      children: /*#__PURE__*/_jsxDEV(ReplayIcon, {\n                        sx: {\n                          color: \"#EF6262\"\n                        },\n                        \"aria-label\": \"replay the scene from the start timestamp\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 260,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 255,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                      edge: \"end\",\n                      \"aria-label\": \"delete\",\n                      onClick: () => handleRemoveFrame(index),\n                      sx: {\n                        marginLeft: \"20px\"\n                      },\n                      children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                        sx: {\n                          color: \"#EF6262\"\n                        },\n                        \"aria-label\": \"delete scene\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 273,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 267,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                      edge: \"end\",\n                      \"aria-label\": \"edit\",\n                      onClick: () => handleEditFrame(index),\n                      sx: {\n                        marginLeft: \"20px\"\n                      },\n                      children: /*#__PURE__*/_jsxDEV(EditIcon, {\n                        sx: {\n                          color: \"#EF6262\"\n                        },\n                        \"aria-label\": \"edit scene\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 286,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 280,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 3,\n                  md: 3,\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"subtitle1\",\n                    sx: {\n                      color: \"primary.dark\"\n                    },\n                    children: \"Description\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 297,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 9,\n                  md: 9,\n                  children: /*#__PURE__*/_jsxDEV(Box, {\n                    p: 1.5,\n                    borderRadius: \"5px\",\n                    sx: {\n                      backgroundColor: \"white\"\n                    },\n                    children: /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body1\",\n                      sx: {\n                        color: \"#1D5B79\"\n                      },\n                      children: frame.description\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 310,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 305,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 304,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 21\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n            open: editDialogOpen,\n            onClose: () => setEditDialogOpen(false),\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n              children: [\"Edit Description at timestamp \", played]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n              children: [/*#__PURE__*/_jsxDEV(LocalizationProvider, {\n                dateAdapter: AdapterDayjs,\n                children: /*#__PURE__*/_jsxDEV(TimeField, {\n                  label: \"End timestamp\",\n                  value: endTime,\n                  onChange: newValue => setEndTime(newValue),\n                  format: \"mm:ss\",\n                  sx: {\n                    marginBottom: \"10px\",\n                    backgroundColor: \"white\",\n                    borderRadius: \"5px\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 328,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                value: description,\n                onChange: e => setDescription(e.target.value),\n                variant: \"outlined\",\n                fullWidth: true,\n                placeholder: \"Enter description\",\n                style: {\n                  marginBottom: \"10px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => setEditDialogOpen(false),\n                sx: {\n                  backgroundColor: \"secondary.main\",\n                  color: \"white\"\n                },\n                className: \"category-btn\",\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: handleSaveEdit,\n                sx: {\n                  backgroundColor: \"secondary.main\",\n                  color: \"white\"\n                },\n                className: \"category-btn\",\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            sx: {\n              backgroundColor: \"secondary.main\",\n              color: \"white\",\n              margin: \"20px\"\n            },\n            className: \"category-btn\",\n            onClick: handlePublishDescriptions,\n            disabled: frames.length <= 0,\n            children: \"Publish Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(AddDescriptions, \"fJAgqPivqIf33ZAc7xcCYMBF0H0=\", false, function () {\n  return [useLocation];\n});\n_c = AddDescriptions;\nexport default AddDescriptions;\n\n// import React, { useState, useEffect } from \"react\";\n// import DeleteIcon from \"@mui/icons-material/Delete\";\n// import EditIcon from \"@mui/icons-material/Edit\";\n// import dayjs from 'dayjs'\n// import {\n//   Box,\n//   Stack,\n//   Typography,\n//   Grid,\n//   TextField,\n//   Button,\n//   IconButton,\n//   Dialog,\n//   DialogTitle,\n//   DialogContent,\n//   DialogActions,\n//   Chip,\n// } from \"@mui/material\";\n// import { TimeField } from \"@mui/x-date-pickers/TimeField\";\n// import { Sidebar, Player, Navbar, Notes } from \"./\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import formatTime from \"../utils/functions\";\n// import { useLocation, Link } from \"react-router-dom\";\n// import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\n// import { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\n\n// const AddDescriptions = () => {\n//   const [selectedCategory, setSelectedCategory] = useState();\n//   const [endTime, setEndTime] = useState(dayjs(\"00:00\",\"mm:ss\"));\n//   const [played, setPlayed] = useState(0);\n//   const [frames, setFrames] = useState([]);\n//   const [description, setDescription] = useState(\"\");\n//   const [selectedFrameIndex, setSelectedFrameIndex] = useState(null);\n//   const [editDialogOpen, setEditDialogOpen] = useState(false);\n//   // const [value, setValue] = React.useState(dayjs(\"00:00\",\"mm:ss\"));\n\n//   const location = useLocation();\n//   const { video_id, video_path } = location.state;\n\n//   // Load frames from localStorage on component mount\n//   useEffect(() => {\n//     const storedFrames = localStorage.getItem(`frames_${video_id}`);\n//     if (storedFrames) {\n//       setFrames(JSON.parse(storedFrames));\n//     }\n//   }, [video_id]);\n\n//   // Update frames in localStorage whenever frames state changes\n//   useEffect(() => {\n//     localStorage.setItem(`frames_${video_id}`, JSON.stringify(frames));\n//   }, [frames, video_id]);\n\n//   const handleCallback = (progressData) => {\n//     setPlayed(progressData);\n//   };\n\n//   const handleAddFrame = () => {\n//     if (description) {\n//       const newFrame = {\n//         start: played,\n//         end: parseInt(endTime.$m)*60 + parseInt(endTime.$s),\n//         description: description,\n//       };\n//       setFrames([...frames, newFrame]);\n//       setDescription(\"\");\n//       setEndTime(dayjs(\"00:00\",\"mm:ss\"));\n//       //console.log(parseInt(endTime.$m)*60 + parseInt(endTime.$s))\n//     } else {\n//       // Handle invalid input (show error message, prevent adding frame, etc.)\n//       console.log(\"Invalid input. Please enter a valid end time.\");\n//     }\n//   };\n\n//   const handleRemoveFrame = (index) => {\n//     const updatedFrames = [...frames];\n//     updatedFrames.splice(index, 1);\n//     setFrames(updatedFrames);\n//   };\n\n//   const handleEditFrame = (index) => {\n//     setSelectedFrameIndex(index);\n//     setDescription(frames[index].description);\n//     setEndTime(dayjs(formatTime(frames[index].end),\"mm:ss\"))\n//     // setPlayed(frames[index].time);\n//     setEditDialogOpen(true);\n//   };\n\n//   const handleSaveEdit = () => {\n//     if (description) {\n//       const updatedFrames = [...frames];\n//       updatedFrames[selectedFrameIndex].description = description;\n//       updatedFrames[selectedFrameIndex].end = parseInt(endTime.$m)*60 + parseInt(endTime.$s)\n//       setFrames(updatedFrames);\n//       setEditDialogOpen(false);\n//       setDescription(\"\");\n//       setEndTime(dayjs(\"00:00\",\"mm:ss\"));\n//     }\n//   };\n\n//   const handlePublishDescriptions = async () => {\n//     try {\n//       for (let frame of frames) {\n//         // Assuming you have an API endpoint for posting descriptions, adjust the URL accordingly\n//         const apiUrl = \"http://127.0.0.1:8000/descriptions/\";\n//         const token = Cookies.get(\"jwtToken\");\n//         const response = await axios.post(apiUrl, {\n//           video_id: video_id,\n//           jwt: token,\n//           time_stamp_start: frame.start,\n//           descriptions: frame.description,\n//           time_stamp_end: frame.end,\n//           ai_or_human: \"human\",\n//         });\n\n//         // Handle the response from the backend API if needed\n//         console.log(\"Description published:\", response.data);\n//       }\n\n//       // Optional: Show a success message to the user after all descriptions are published\n//       console.log(\"All descriptions published successfully!\");\n//     } catch (error) {\n//       // Handle errors if the API request fails\n//       console.error(\"Error publishing descriptions:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <Stack sx={{ flexDirection: { sx: \"column\", md: \"row\" } }}>\n//         <Box\n//           sx={{\n//             height: { sx: \"auto\", md: \"100vh\" },\n//             paddingRight: { sx: 0, md: 2 },\n//           }}\n//         >\n//           <Sidebar\n//             selectedCategory={selectedCategory}\n//             setSelectedCategory={setSelectedCategory}\n//           />\n//         </Box>\n\n//         <Grid\n//           container\n//           spacing={2}\n//           p={3}\n//           sx={{ overflowY: \"auto\", height: \"90vh\", flex: 2 }}\n//         >\n//           <Grid item xs={12} md={8}>\n//             <Player path={video_path} parentCallback={handleCallback} />\n//           </Grid>\n\n//           <Notes videoId={video_id} />\n\n//           <Grid item xs={12} md={8}>\n//             <Box\n//               p={2}\n//               sx={{\n//                 backgroundColor: \"primary.main\",\n//                 borderRadius: \"5px\",\n//                 paddingBottom: \"20px\",\n//               }}\n//             >\n//               <Typography variant=\"h6\" sx={{ color: \"primary.dark\" }}>\n//                 Add description at {formatTime(played)}\n//               </Typography>\n//               <hr />\n//               <LocalizationProvider dateAdapter={AdapterDayjs}>\n//                 <TimeField\n//                   label=\"End timestamp\"\n//                   value={endTime}\n//                   onChange={(newValue) => setEndTime(newValue)}\n//                   format=\"mm:ss\"\n//                   sx={{\n//                   marginBottom: \"10px\",\n//                   backgroundColor: \"white\",\n//                   borderRadius: \"5px\",\n//                 }}\n//                 />\n//                 {/* {console.log(\"this is value\", endTime.$m, endTime.$s)} */}\n//               </LocalizationProvider>\n//               {/* <TextField\n//                 value={endTime}\n//                 onChange={(e) => setEndTime(e.target.value)}\n//                 variant=\"outlined\"\n//                 type=\"number\"\n//                 placeholder=\"Enter end time (in seconds)\"\n//                 sx={{\n//                   marginBottom: \"10px\",\n//                   backgroundColor: \"white\",\n//                   borderRadius: \"5px\",\n//                   width: \"50%\",\n//                 }}\n//               /> */}\n\n//               <TextField\n//                 value={description}\n//                 onChange={(e) => setDescription(e.target.value)}\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 placeholder=\"Enter description\"\n//                 sx={{\n//                   marginBottom: \"10px\",\n//                   backgroundColor: \"white\",\n//                   borderRadius: \"5px\",\n//                 }}\n//               />\n//               <Button\n//                 sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n//                 className=\"category-btn\"\n//                 onClick={handleAddFrame}\n//               >\n//                 Add Description\n//               </Button>\n//             </Box>\n\n//             {frames\n//               .slice() // Create a shallow copy of the frames array\n//               .sort((a, b) => a.start - b.start) // Sort the frames based on starting timestamp\n//               .map((frame, index) => (\n//                 <Box\n//                   key={index}\n//                   p={2}\n//                   sx={{\n//                     backgroundColor: \"primary.main\",\n//                     borderRadius: \"5px\",\n//                     margin: \"20px 0\",\n//                   }}\n//                 >\n//                   <Grid\n//                     container\n//                     rowSpacing={2}\n//                     columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n//                   >\n//                     {/* Displays Scene number */}\n//                     <Grid item xs={2}>\n//                       <Typography variant=\"h6\" sx={{ color: \"primary.dark\" }}>\n//                         Scene {index}\n//                       </Typography>\n//                     </Grid>\n//                     {/* Displays time stamp */}\n//                     <Grid item xs={2}>\n//                       <Chip\n//                         label={\n//                           formatTime(frame.start) +\n//                           \" - \" +\n//                           formatTime(frame.end)\n//                         }\n//                         sx={{\n//                           backgroundColor: \"secondary.light\",\n//                           color: \"white\",\n//                           marginBottom: \"20px\",\n//                         }}\n//                       />\n//                     </Grid>\n//                     <Grid item xs={8}>\n//                       <Box display=\"flex\" justifyContent=\"flex-end\">\n//                         <IconButton\n//                           edge=\"end\"\n//                           aria-label=\"delete\"\n//                           onClick={() => handleRemoveFrame(index)}\n//                         >\n//                           <DeleteIcon\n//                             sx={{\n//                               color: \"#EF6262\",\n//                             }}\n//                             aria-label=\"delete scene\"\n//                           />\n//                         </IconButton>\n//                         <IconButton\n//                           edge=\"end\"\n//                           aria-label=\"edit\"\n//                           onClick={() => handleEditFrame(index)}\n//                           sx={{ marginLeft: \"20px\" }}\n//                         >\n//                           <EditIcon\n//                             sx={{\n//                               color: \"#EF6262\",\n//                             }}\n//                             aria-label=\"edit scene\"\n//                           />\n//                         </IconButton>\n//                       </Box>\n//                     </Grid>\n\n//                     <Grid item xs={3} md={2}>\n//                       <Typography\n//                         variant=\"subtitle1\"\n//                         sx={{ color: \"primary.dark\" }}\n//                       >\n//                         On screen text\n//                       </Typography>\n//                     </Grid>\n//                     <Grid item xs={9} md={10}>\n//                       <Box\n//                         p={1.5}\n//                         borderRadius=\"5px\"\n//                         sx={{ backgroundColor: \"white\" }}\n//                       >\n//                         <Typography\n//                           variant=\"body1\"\n//                           sx={{ color: \"primary.dark\" }}\n//                         >\n//                           Currently, no screen text\n//                         </Typography>\n//                       </Box>\n//                     </Grid>\n\n//                     <Grid item xs={3} md={2}>\n//                       <Typography\n//                         variant=\"subtitle1\"\n//                         sx={{ color: \"primary.dark\" }}\n//                       >\n//                         Description\n//                       </Typography>\n//                     </Grid>\n//                     <Grid item xs={9} md={10}>\n//                       <Box\n//                         p={1.5}\n//                         borderRadius=\"5px\"\n//                         sx={{ backgroundColor: \"white\" }}\n//                       >\n//                         <Typography variant=\"body1\" sx={{ color: \"#1D5B79\" }}>\n//                           {frame.description}\n//                         </Typography>\n//                       </Box>\n//                     </Grid>\n//                   </Grid>\n//                 </Box>\n//               ))}\n\n//             <Dialog\n//               open={editDialogOpen}\n//               onClose={() => setEditDialogOpen(false)}\n//               fullWidth\n//             >\n//               <DialogTitle>Edit Description at timestamp {played}</DialogTitle>\n//               <DialogContent>\n//               <LocalizationProvider dateAdapter={AdapterDayjs}>\n//                 <TimeField\n//                   label=\"End timestamp\"\n//                   value={endTime}\n//                   onChange={(newValue) => setEndTime(newValue)}\n//                   format=\"mm:ss\"\n//                   sx={{\n//                   marginBottom: \"10px\",\n//                   backgroundColor: \"white\",\n//                   borderRadius: \"5px\",\n//                 }}\n//                 />\n//                 {/* {console.log(\"this is value\", endTime.$m, endTime.$s)} */}\n//               </LocalizationProvider>\n//                 <TextField\n//                   value={description}\n//                   onChange={(e) => setDescription(e.target.value)}\n//                   variant=\"outlined\"\n//                   fullWidth\n//                   placeholder=\"Enter description\"\n//                   style={{ marginBottom: \"10px\" }}\n//                 />\n//               </DialogContent>\n//               <DialogActions>\n//                 <Button\n//                   onClick={() => setEditDialogOpen(false)}\n//                   sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n//                   className=\"category-btn\"\n//                 >\n//                   Cancel\n//                 </Button>\n//                 <Button\n//                   onClick={handleSaveEdit}\n//                   sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n//                   className=\"category-btn\"\n//                 >\n//                   Save\n//                 </Button>\n//               </DialogActions>\n//             </Dialog>\n//           </Grid>\n//           {frames.length > 0 && (\n//             <Grid item xs={6} md={4}>\n//               <Box\n//                 p={2}\n//                 sx={{\n//                   backgroundColor: \"primary.main\",\n//                   borderRadius: \"5px\",\n//                 }}\n//               >\n//                 <Button\n//                   sx={{\n//                     backgroundColor: \"secondary.main\",\n//                     color: \"white\",\n//                     width: \"100%\",\n//                     marginTop: \"10px\",\n//                   }}\n//                   className=\"category-btn\"\n//                   onClick={handlePublishDescriptions}\n//                 >\n//                   Publish Description\n//                 </Button>\n//               </Box>\n//             </Grid>\n//           )}\n//         </Grid>\n//       </Stack>\n//     </div>\n//   );\n// };\n\n// export default AddDescriptions;\nvar _c;\n$RefreshReg$(_c, \"AddDescriptions\");","map":{"version":3,"names":["React","useState","useEffect","useRef","DeleteIcon","EditIcon","ReplayIcon","dayjs","Box","Stack","Typography","Grid","TextField","Button","IconButton","Dialog","DialogTitle","DialogContent","DialogActions","Chip","Divider","TimeField","Sidebar","Player","Navbar","Notes","axios","Cookies","formatTime","useLocation","Link","AdapterDayjs","LocalizationProvider","jsxDEV","_jsxDEV","AddDescriptions","_s","selectedCategory","setSelectedCategory","endTime","setEndTime","played","setPlayed","frames","setFrames","description","setDescription","selectedFrameIndex","setSelectedFrameIndex","editDialogOpen","setEditDialogOpen","playerRef","location","video_id","video_path","state","storedFrames","localStorage","getItem","JSON","parse","setItem","stringify","handleCallback","progressData","handleAddFrame","newFrame","start","end","parseInt","$m","$s","console","log","handleReplayFrame","startTimestamp","current","seekTo","handleRemoveFrame","index","updatedFrames","splice","handleEditFrame","handleSaveEdit","handlePublishDescriptions","frame","apiUrl","token","get","response","post","jwt","time_stamp_start","descriptions","time_stamp_end","ai_or_human","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","flexDirection","md","height","paddingRight","container","p","overflowY","flex","item","xs","path","parentCallback","seekToTimestamp","backgroundColor","borderRadius","paddingBottom","mt","variant","color","dateAdapter","label","value","onChange","newValue","format","marginBottom","e","target","fullWidth","placeholder","className","onClick","marginLeft","slice","sort","a","b","map","columnSpacing","sm","display","justifyContent","edge","open","onClose","style","margin","disabled","length","_c","$RefreshReg$"],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/AddDescriptions.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport dayjs from \"dayjs\";\nimport {\n  Box,\n  Stack,\n  Typography,\n  Grid,\n  TextField,\n  Button,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Chip,\n  Divider,\n} from \"@mui/material\";\nimport { TimeField } from \"@mui/x-date-pickers/TimeField\";\nimport { Sidebar, Player, Navbar, Notes } from \"./\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport formatTime from \"../utils/functions\";\nimport { useLocation, Link } from \"react-router-dom\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\n\nconst AddDescriptions = () => {\n  const [selectedCategory, setSelectedCategory] = useState();\n  const [endTime, setEndTime] = useState(dayjs(\"00:00\", \"mm:ss\"));\n  const [played, setPlayed] = useState(0);\n  const [frames, setFrames] = useState([]);\n  const [description, setDescription] = useState(\"\");\n  const [selectedFrameIndex, setSelectedFrameIndex] = useState(null);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const playerRef = useRef(null);\n  // const [value, setValue] = React.useState(dayjs(\"00:00\",\"mm:ss\"));\n\n  const location = useLocation();\n  const { video_id, video_path } = location.state;\n\n  // Load frames from localStorage on component mount\n  useEffect(() => {\n    const storedFrames = localStorage.getItem(`frames_${video_id}`);\n    if (storedFrames) {\n      setFrames(JSON.parse(storedFrames));\n    }\n  }, [video_id]);\n\n  // Update frames in localStorage whenever frames state changes\n  useEffect(() => {\n    localStorage.setItem(`frames_${video_id}`, JSON.stringify(frames));\n  }, [frames, video_id]);\n\n  const handleCallback = (progressData) => {\n    setPlayed(progressData);\n  };\n\n  const handleAddFrame = () => {\n    if (description) {\n      const newFrame = {\n        start: played,\n        end: parseInt(endTime.$m) * 60 + parseInt(endTime.$s),\n        description: description,\n      };\n      setFrames([...frames, newFrame]);\n      setDescription(\"\");\n      setEndTime(dayjs(\"00:00\", \"mm:ss\"));\n      //console.log(parseInt(endTime.$m)*60 + parseInt(endTime.$s))\n    } else {\n      // Handle invalid input (show error message, prevent adding frame, etc.)\n      console.log(\"Invalid input. Please enter a valid end time.\");\n    }\n  };\n\n  const handleReplayFrame = (startTimestamp) => {\n    // Call the seekToTimestamp function in the Player component\n    if (playerRef.current) {\n      playerRef.current.seekTo(startTimestamp, 'seconds');\n      setPlayed(startTimestamp); // Update the played state to reflect the new timestamp\n    }\n  };\n\n  const handleRemoveFrame = (index) => {\n    const updatedFrames = [...frames];\n    updatedFrames.splice(index, 1);\n    setFrames(updatedFrames);\n  };\n\n  const handleEditFrame = (index) => {\n    setSelectedFrameIndex(index);\n    setDescription(frames[index].description);\n    setEndTime(dayjs(formatTime(frames[index].end), \"mm:ss\"));\n    // setPlayed(frames[index].time);\n    setEditDialogOpen(true);\n  };\n\n  const handleSaveEdit = () => {\n    if (description) {\n      const updatedFrames = [...frames];\n      updatedFrames[selectedFrameIndex].description = description;\n      updatedFrames[selectedFrameIndex].end =\n        parseInt(endTime.$m) * 60 + parseInt(endTime.$s);\n      setFrames(updatedFrames);\n      setEditDialogOpen(false);\n      setDescription(\"\");\n      setEndTime(dayjs(\"00:00\", \"mm:ss\"));\n    }\n  };\n\n  const handlePublishDescriptions = async () => {\n    try {\n      for (let frame of frames) {\n        // Assuming you have an API endpoint for posting descriptions, adjust the URL accordingly\n        const apiUrl = \"http://127.0.0.1:8000/descriptions/\";\n        const token = Cookies.get(\"jwtToken\");\n        const response = await axios.post(apiUrl, {\n          video_id: video_id,\n          jwt: token,\n          time_stamp_start: frame.start,\n          descriptions: frame.description,\n          time_stamp_end: frame.end,\n          ai_or_human: \"human\",\n        });\n\n        // Handle the response from the backend API if needed\n        console.log(\"Description published:\", response.data);\n      }\n\n      // Optional: Show a success message to the user after all descriptions are published\n      console.log(\"All descriptions published successfully!\");\n    } catch (error) {\n      // Handle errors if the API request fails\n      console.error(\"Error publishing descriptions:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <Navbar />\n      <Stack sx={{ flexDirection: { sx: \"column\", md: \"row\" } }}>\n        <Box\n          sx={{\n            height: { sx: \"auto\", md: \"100vh\" },\n            paddingRight: { sx: 0, md: 2 },\n          }}\n        >\n          <Sidebar\n            selectedCategory={selectedCategory}\n            setSelectedCategory={setSelectedCategory}\n          />\n        </Box>\n\n        <Grid\n          container\n          p={2}\n          sx={{ overflowY: \"auto\", height: \"90vh\", flex: 2 }}\n        >\n          <Grid item xs={12} md={7}>\n            <Player path={video_path} parentCallback={handleCallback} seekToTimestamp={handleReplayFrame} playerRef={playerRef} />\n            <Box\n              p={2}\n              sx={{\n                backgroundColor: \"primary.main\",\n                borderRadius: \"5px\",\n                paddingBottom: \"20px\",\n              }}\n              mt={1}\n            >\n              <Typography variant=\"h6\" sx={{ color: \"primary.dark\" }}>\n                Add description at {formatTime(played)}\n              </Typography>\n              <hr />\n              <LocalizationProvider dateAdapter={AdapterDayjs}>\n                <TimeField\n                  label=\"End timestamp\"\n                  value={endTime}\n                  onChange={(newValue) => setEndTime(newValue)}\n                  format=\"mm:ss\"\n                  sx={{\n                    marginBottom: \"10px\",\n                    backgroundColor: \"white\",\n                    borderRadius: \"5px\",\n                  }}\n                />\n                {/* {console.log(\"this is value\", endTime.$m, endTime.$s)} */}\n              </LocalizationProvider>\n\n              <TextField\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                variant=\"outlined\"\n                fullWidth\n                placeholder=\"Enter description\"\n                sx={{\n                  marginBottom: \"10px\",\n                  backgroundColor: \"white\",\n                  borderRadius: \"5px\",\n                }}\n              />\n              <Button\n                sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n                className=\"category-btn\"\n                onClick={handleAddFrame}\n              >\n                Add Description\n              </Button>\n            </Box>\n          </Grid>\n\n          <Grid\n            item\n            xs={12}\n            md={4.9}\n            marginLeft={1}\n            sx={{\n              backgroundColor: \"primary.main\",\n              borderRadius: \"5px\",\n              height: \"85vh\", // Set the height to 75vh\n              overflowY: \"auto\", // Set overflow to auto for vertical scrolling\n            }}\n          >\n            <Box sx={{ height: \"75vh\", overflowY: \"auto\"}}>\n              {frames\n                .slice() // Create a shallow copy of the frames array\n                .sort((a, b) => a.start - b.start) // Sort the frames based on starting timestamp\n                .map((frame, index) => (\n                  <Box key={index} p={2}>\n                    <Grid container columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\n                      {/* Displays Scene number */}\n                      <Grid item xs={3}>\n                        <Typography variant=\"h6\" sx={{ color: \"primary.dark\" }}>\n                          Scene {index+1}\n                        </Typography>\n                      </Grid>\n                      {/* Displays time stamp */}\n                      <Grid item xs={3}>\n                        <Chip\n                          label={\n                            formatTime(frame.start) +\n                            \" - \" +\n                            formatTime(frame.end)\n                          }\n                          sx={{\n                            backgroundColor: \"secondary.light\",\n                            color: \"white\",\n                            marginBottom: \"20px\",\n                          }}\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <Box display=\"flex\" justifyContent=\"flex-end\">\n                        <IconButton\n                            edge=\"end\"\n                            aria-label=\"replay the scene from the start timestamp\"\n                            onClick={() => handleReplayFrame(frame.start)}\n                          >\n                            <ReplayIcon\n                              sx={{\n                                color: \"#EF6262\",\n                              }}\n                              aria-label=\"replay the scene from the start timestamp\"\n                            />\n                          </IconButton>\n                          <IconButton\n                            edge=\"end\"\n                            aria-label=\"delete\"\n                            onClick={() => handleRemoveFrame(index)}\n                            sx={{ marginLeft: \"20px\" }}\n                          >\n                            <DeleteIcon\n                              sx={{\n                                color: \"#EF6262\",\n                              }}\n                              aria-label=\"delete scene\"\n                            />\n                          </IconButton>\n                          <IconButton\n                            edge=\"end\"\n                            aria-label=\"edit\"\n                            onClick={() => handleEditFrame(index)}\n                            sx={{ marginLeft: \"20px\" }}\n                          >\n                            <EditIcon\n                              sx={{\n                                color: \"#EF6262\",\n                              }}\n                              aria-label=\"edit scene\"\n                            />\n                          </IconButton>\n                        </Box>\n                      </Grid>\n\n                      <Grid item xs={3} md={3}>\n                        <Typography\n                          variant=\"subtitle1\"\n                          sx={{ color: \"primary.dark\" }}\n                        >\n                          Description\n                        </Typography>\n                      </Grid>\n                      <Grid item xs={9} md={9}>\n                        <Box\n                          p={1.5}\n                          borderRadius=\"5px\"\n                          sx={{ backgroundColor: \"white\" }}\n                        >\n                          <Typography variant=\"body1\" sx={{ color: \"#1D5B79\" }}>\n                            {frame.description}\n                          </Typography>\n                        </Box>\n                      </Grid>\n                    </Grid>\n                  </Box>\n                ))}\n            </Box>\n\n            <Dialog\n              open={editDialogOpen}\n              onClose={() => setEditDialogOpen(false)}\n              fullWidth\n            >\n              <DialogTitle>Edit Description at timestamp {played}</DialogTitle>\n              <DialogContent>\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\n                  <TimeField\n                    label=\"End timestamp\"\n                    value={endTime}\n                    onChange={(newValue) => setEndTime(newValue)}\n                    format=\"mm:ss\"\n                    sx={{\n                      marginBottom: \"10px\",\n                      backgroundColor: \"white\",\n                      borderRadius: \"5px\",\n                    }}\n                  />\n                  {/* {console.log(\"this is value\", endTime.$m, endTime.$s)} */}\n                </LocalizationProvider>\n                <TextField\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  variant=\"outlined\"\n                  fullWidth\n                  placeholder=\"Enter description\"\n                  style={{ marginBottom: \"10px\" }}\n                />\n              </DialogContent>\n              <DialogActions>\n                <Button\n                  onClick={() => setEditDialogOpen(false)}\n                  sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n                  className=\"category-btn\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleSaveEdit}\n                  sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n                  className=\"category-btn\"\n                >\n                  Save\n                </Button>\n              </DialogActions>\n            </Dialog>\n            <Divider />\n                <Button\n                  sx={{\n                    backgroundColor: \"secondary.main\",\n                    color: \"white\",\n                    margin:\"20px\"\n                  }}\n                  \n                  className=\"category-btn\"\n                  onClick={handlePublishDescriptions}\n                  disabled={frames.length <= 0}\n                >\n                  Publish Description\n                </Button>\n          </Grid>\n        </Grid>\n      </Stack>\n    </div>\n  );\n};\n\nexport default AddDescriptions;\n\n// import React, { useState, useEffect } from \"react\";\n// import DeleteIcon from \"@mui/icons-material/Delete\";\n// import EditIcon from \"@mui/icons-material/Edit\";\n// import dayjs from 'dayjs'\n// import {\n//   Box,\n//   Stack,\n//   Typography,\n//   Grid,\n//   TextField,\n//   Button,\n//   IconButton,\n//   Dialog,\n//   DialogTitle,\n//   DialogContent,\n//   DialogActions,\n//   Chip,\n// } from \"@mui/material\";\n// import { TimeField } from \"@mui/x-date-pickers/TimeField\";\n// import { Sidebar, Player, Navbar, Notes } from \"./\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import formatTime from \"../utils/functions\";\n// import { useLocation, Link } from \"react-router-dom\";\n// import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\n// import { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\n\n// const AddDescriptions = () => {\n//   const [selectedCategory, setSelectedCategory] = useState();\n//   const [endTime, setEndTime] = useState(dayjs(\"00:00\",\"mm:ss\"));\n//   const [played, setPlayed] = useState(0);\n//   const [frames, setFrames] = useState([]);\n//   const [description, setDescription] = useState(\"\");\n//   const [selectedFrameIndex, setSelectedFrameIndex] = useState(null);\n//   const [editDialogOpen, setEditDialogOpen] = useState(false);\n//   // const [value, setValue] = React.useState(dayjs(\"00:00\",\"mm:ss\"));\n\n//   const location = useLocation();\n//   const { video_id, video_path } = location.state;\n\n//   // Load frames from localStorage on component mount\n//   useEffect(() => {\n//     const storedFrames = localStorage.getItem(`frames_${video_id}`);\n//     if (storedFrames) {\n//       setFrames(JSON.parse(storedFrames));\n//     }\n//   }, [video_id]);\n\n//   // Update frames in localStorage whenever frames state changes\n//   useEffect(() => {\n//     localStorage.setItem(`frames_${video_id}`, JSON.stringify(frames));\n//   }, [frames, video_id]);\n\n//   const handleCallback = (progressData) => {\n//     setPlayed(progressData);\n//   };\n\n//   const handleAddFrame = () => {\n//     if (description) {\n//       const newFrame = {\n//         start: played,\n//         end: parseInt(endTime.$m)*60 + parseInt(endTime.$s),\n//         description: description,\n//       };\n//       setFrames([...frames, newFrame]);\n//       setDescription(\"\");\n//       setEndTime(dayjs(\"00:00\",\"mm:ss\"));\n//       //console.log(parseInt(endTime.$m)*60 + parseInt(endTime.$s))\n//     } else {\n//       // Handle invalid input (show error message, prevent adding frame, etc.)\n//       console.log(\"Invalid input. Please enter a valid end time.\");\n//     }\n//   };\n\n//   const handleRemoveFrame = (index) => {\n//     const updatedFrames = [...frames];\n//     updatedFrames.splice(index, 1);\n//     setFrames(updatedFrames);\n//   };\n\n//   const handleEditFrame = (index) => {\n//     setSelectedFrameIndex(index);\n//     setDescription(frames[index].description);\n//     setEndTime(dayjs(formatTime(frames[index].end),\"mm:ss\"))\n//     // setPlayed(frames[index].time);\n//     setEditDialogOpen(true);\n//   };\n\n//   const handleSaveEdit = () => {\n//     if (description) {\n//       const updatedFrames = [...frames];\n//       updatedFrames[selectedFrameIndex].description = description;\n//       updatedFrames[selectedFrameIndex].end = parseInt(endTime.$m)*60 + parseInt(endTime.$s)\n//       setFrames(updatedFrames);\n//       setEditDialogOpen(false);\n//       setDescription(\"\");\n//       setEndTime(dayjs(\"00:00\",\"mm:ss\"));\n//     }\n//   };\n\n//   const handlePublishDescriptions = async () => {\n//     try {\n//       for (let frame of frames) {\n//         // Assuming you have an API endpoint for posting descriptions, adjust the URL accordingly\n//         const apiUrl = \"http://127.0.0.1:8000/descriptions/\";\n//         const token = Cookies.get(\"jwtToken\");\n//         const response = await axios.post(apiUrl, {\n//           video_id: video_id,\n//           jwt: token,\n//           time_stamp_start: frame.start,\n//           descriptions: frame.description,\n//           time_stamp_end: frame.end,\n//           ai_or_human: \"human\",\n//         });\n\n//         // Handle the response from the backend API if needed\n//         console.log(\"Description published:\", response.data);\n//       }\n\n//       // Optional: Show a success message to the user after all descriptions are published\n//       console.log(\"All descriptions published successfully!\");\n//     } catch (error) {\n//       // Handle errors if the API request fails\n//       console.error(\"Error publishing descriptions:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <Stack sx={{ flexDirection: { sx: \"column\", md: \"row\" } }}>\n//         <Box\n//           sx={{\n//             height: { sx: \"auto\", md: \"100vh\" },\n//             paddingRight: { sx: 0, md: 2 },\n//           }}\n//         >\n//           <Sidebar\n//             selectedCategory={selectedCategory}\n//             setSelectedCategory={setSelectedCategory}\n//           />\n//         </Box>\n\n//         <Grid\n//           container\n//           spacing={2}\n//           p={3}\n//           sx={{ overflowY: \"auto\", height: \"90vh\", flex: 2 }}\n//         >\n//           <Grid item xs={12} md={8}>\n//             <Player path={video_path} parentCallback={handleCallback} />\n//           </Grid>\n\n//           <Notes videoId={video_id} />\n\n//           <Grid item xs={12} md={8}>\n//             <Box\n//               p={2}\n//               sx={{\n//                 backgroundColor: \"primary.main\",\n//                 borderRadius: \"5px\",\n//                 paddingBottom: \"20px\",\n//               }}\n//             >\n//               <Typography variant=\"h6\" sx={{ color: \"primary.dark\" }}>\n//                 Add description at {formatTime(played)}\n//               </Typography>\n//               <hr />\n//               <LocalizationProvider dateAdapter={AdapterDayjs}>\n//                 <TimeField\n//                   label=\"End timestamp\"\n//                   value={endTime}\n//                   onChange={(newValue) => setEndTime(newValue)}\n//                   format=\"mm:ss\"\n//                   sx={{\n//                   marginBottom: \"10px\",\n//                   backgroundColor: \"white\",\n//                   borderRadius: \"5px\",\n//                 }}\n//                 />\n//                 {/* {console.log(\"this is value\", endTime.$m, endTime.$s)} */}\n//               </LocalizationProvider>\n//               {/* <TextField\n//                 value={endTime}\n//                 onChange={(e) => setEndTime(e.target.value)}\n//                 variant=\"outlined\"\n//                 type=\"number\"\n//                 placeholder=\"Enter end time (in seconds)\"\n//                 sx={{\n//                   marginBottom: \"10px\",\n//                   backgroundColor: \"white\",\n//                   borderRadius: \"5px\",\n//                   width: \"50%\",\n//                 }}\n//               /> */}\n\n//               <TextField\n//                 value={description}\n//                 onChange={(e) => setDescription(e.target.value)}\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 placeholder=\"Enter description\"\n//                 sx={{\n//                   marginBottom: \"10px\",\n//                   backgroundColor: \"white\",\n//                   borderRadius: \"5px\",\n//                 }}\n//               />\n//               <Button\n//                 sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n//                 className=\"category-btn\"\n//                 onClick={handleAddFrame}\n//               >\n//                 Add Description\n//               </Button>\n//             </Box>\n\n//             {frames\n//               .slice() // Create a shallow copy of the frames array\n//               .sort((a, b) => a.start - b.start) // Sort the frames based on starting timestamp\n//               .map((frame, index) => (\n//                 <Box\n//                   key={index}\n//                   p={2}\n//                   sx={{\n//                     backgroundColor: \"primary.main\",\n//                     borderRadius: \"5px\",\n//                     margin: \"20px 0\",\n//                   }}\n//                 >\n//                   <Grid\n//                     container\n//                     rowSpacing={2}\n//                     columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n//                   >\n//                     {/* Displays Scene number */}\n//                     <Grid item xs={2}>\n//                       <Typography variant=\"h6\" sx={{ color: \"primary.dark\" }}>\n//                         Scene {index}\n//                       </Typography>\n//                     </Grid>\n//                     {/* Displays time stamp */}\n//                     <Grid item xs={2}>\n//                       <Chip\n//                         label={\n//                           formatTime(frame.start) +\n//                           \" - \" +\n//                           formatTime(frame.end)\n//                         }\n//                         sx={{\n//                           backgroundColor: \"secondary.light\",\n//                           color: \"white\",\n//                           marginBottom: \"20px\",\n//                         }}\n//                       />\n//                     </Grid>\n//                     <Grid item xs={8}>\n//                       <Box display=\"flex\" justifyContent=\"flex-end\">\n//                         <IconButton\n//                           edge=\"end\"\n//                           aria-label=\"delete\"\n//                           onClick={() => handleRemoveFrame(index)}\n//                         >\n//                           <DeleteIcon\n//                             sx={{\n//                               color: \"#EF6262\",\n//                             }}\n//                             aria-label=\"delete scene\"\n//                           />\n//                         </IconButton>\n//                         <IconButton\n//                           edge=\"end\"\n//                           aria-label=\"edit\"\n//                           onClick={() => handleEditFrame(index)}\n//                           sx={{ marginLeft: \"20px\" }}\n//                         >\n//                           <EditIcon\n//                             sx={{\n//                               color: \"#EF6262\",\n//                             }}\n//                             aria-label=\"edit scene\"\n//                           />\n//                         </IconButton>\n//                       </Box>\n//                     </Grid>\n\n//                     <Grid item xs={3} md={2}>\n//                       <Typography\n//                         variant=\"subtitle1\"\n//                         sx={{ color: \"primary.dark\" }}\n//                       >\n//                         On screen text\n//                       </Typography>\n//                     </Grid>\n//                     <Grid item xs={9} md={10}>\n//                       <Box\n//                         p={1.5}\n//                         borderRadius=\"5px\"\n//                         sx={{ backgroundColor: \"white\" }}\n//                       >\n//                         <Typography\n//                           variant=\"body1\"\n//                           sx={{ color: \"primary.dark\" }}\n//                         >\n//                           Currently, no screen text\n//                         </Typography>\n//                       </Box>\n//                     </Grid>\n\n//                     <Grid item xs={3} md={2}>\n//                       <Typography\n//                         variant=\"subtitle1\"\n//                         sx={{ color: \"primary.dark\" }}\n//                       >\n//                         Description\n//                       </Typography>\n//                     </Grid>\n//                     <Grid item xs={9} md={10}>\n//                       <Box\n//                         p={1.5}\n//                         borderRadius=\"5px\"\n//                         sx={{ backgroundColor: \"white\" }}\n//                       >\n//                         <Typography variant=\"body1\" sx={{ color: \"#1D5B79\" }}>\n//                           {frame.description}\n//                         </Typography>\n//                       </Box>\n//                     </Grid>\n//                   </Grid>\n//                 </Box>\n//               ))}\n\n//             <Dialog\n//               open={editDialogOpen}\n//               onClose={() => setEditDialogOpen(false)}\n//               fullWidth\n//             >\n//               <DialogTitle>Edit Description at timestamp {played}</DialogTitle>\n//               <DialogContent>\n//               <LocalizationProvider dateAdapter={AdapterDayjs}>\n//                 <TimeField\n//                   label=\"End timestamp\"\n//                   value={endTime}\n//                   onChange={(newValue) => setEndTime(newValue)}\n//                   format=\"mm:ss\"\n//                   sx={{\n//                   marginBottom: \"10px\",\n//                   backgroundColor: \"white\",\n//                   borderRadius: \"5px\",\n//                 }}\n//                 />\n//                 {/* {console.log(\"this is value\", endTime.$m, endTime.$s)} */}\n//               </LocalizationProvider>\n//                 <TextField\n//                   value={description}\n//                   onChange={(e) => setDescription(e.target.value)}\n//                   variant=\"outlined\"\n//                   fullWidth\n//                   placeholder=\"Enter description\"\n//                   style={{ marginBottom: \"10px\" }}\n//                 />\n//               </DialogContent>\n//               <DialogActions>\n//                 <Button\n//                   onClick={() => setEditDialogOpen(false)}\n//                   sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n//                   className=\"category-btn\"\n//                 >\n//                   Cancel\n//                 </Button>\n//                 <Button\n//                   onClick={handleSaveEdit}\n//                   sx={{ backgroundColor: \"secondary.main\", color: \"white\" }}\n//                   className=\"category-btn\"\n//                 >\n//                   Save\n//                 </Button>\n//               </DialogActions>\n//             </Dialog>\n//           </Grid>\n//           {frames.length > 0 && (\n//             <Grid item xs={6} md={4}>\n//               <Box\n//                 p={2}\n//                 sx={{\n//                   backgroundColor: \"primary.main\",\n//                   borderRadius: \"5px\",\n//                 }}\n//               >\n//                 <Button\n//                   sx={{\n//                     backgroundColor: \"secondary.main\",\n//                     color: \"white\",\n//                     width: \"100%\",\n//                     marginTop: \"10px\",\n//                   }}\n//                   className=\"category-btn\"\n//                   onClick={handlePublishDescriptions}\n//                 >\n//                   Publish Description\n//                 </Button>\n//               </Box>\n//             </Grid>\n//           )}\n//         </Grid>\n//       </Stack>\n//     </div>\n//   );\n// };\n\n// export default AddDescriptions;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}