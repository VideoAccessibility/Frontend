{"ast":null,"code":"var _jsxFileName = \"/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/AskAI.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { AlertBar } from \"./\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Dialog from \"@mui/material/Dialog\";\nimport { ButtonGroup, DialogTitle, DialogContent, DialogActions, DialogContentText, CircularProgress } from \"@mui/material\";\nimport KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\nimport formatTime from \"../utils/functions\";\nimport tokenUsable from \"../utils/loggedIn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AskAI = props => {\n  _s();\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [response, setResponse] = useState(\"\");\n  const [startOrStop, setStartOrStop] = useState(\"Stop\");\n  const [showAlert, setShowAlert] = useState(false); // State to control alert visibility\n\n  useEffect(() => {\n    const handleKeyPress = event => {\n      if (event.key === \"q\" && !open) {\n        handleClickOpen();\n      }\n    };\n    document.addEventListener(\"keydown\", handleKeyPress);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [open]);\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  const handleClickOpen = () => {\n    const token = Cookies.get(\"jwtToken\");\n    if (!token || !tokenUsable(token)) {\n      setShowAlert(true); // Set showAlert to true to show the alert\n      return;\n    }\n    SpeechRecognition.startListening({\n      continuous: true\n    });\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n    SpeechRecognition.stopListening();\n    setResponse(\"\");\n    resetTranscript();\n    setStartOrStop(\"Stop\");\n  };\n  const handleAnotherQuestion = () => {\n    setResponse(\"\");\n    resetTranscript();\n  };\n  const handleReset = () => {\n    resetTranscript();\n    SpeechRecognition.startListening({\n      continuous: true\n    });\n    setStartOrStop(\"Stop\");\n  };\n  const handleStartStop = () => {\n    if (startOrStop === \"Stop\") {\n      SpeechRecognition.stopListening();\n      setStartOrStop(\"Start\");\n    } else {\n      SpeechRecognition.startListening({\n        continuous: true\n      });\n      setStartOrStop(\"Stop\");\n    }\n  };\n  const handleQuestion = () => {\n    setLoading(true);\n    const token = Cookies.get(\"jwtToken\");\n    const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n    const postData = {\n      id: props.videoID,\n      question: transcript,\n      currentTime: props.timeStamp,\n      jwt: token\n    };\n    axios.post(apiUrl, postData).then(response => {\n      const synth = window.speechSynthesis;\n      const newUtterance = new SpeechSynthesisUtterance(\"Response: \" + response.data.answer);\n      synth.speak(newUtterance);\n      setResponse(response.data.answer);\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  };\n  return (\n    /*#__PURE__*/\n    // <React.Fragment>\n    //   <Button\n    //     sx={{\n    //       backgroundColor: \"secondary.main\",\n    //       color: \"white\",\n    //       width: \"100%\",\n    //       marginTop: \"10px\",\n    //     }}\n    //     className=\"category-btn\"\n    //     onClick={handleClickOpen}\n    //   >\n    //     Ask question at {formatTime(props.timeStamp)}\n    //   </Button>\n    //   {(loading || response) && (\n    //     <Dialog\n    //       open={open}\n    //       onClose={handleClose}\n    //       fullWidth\n    //       sx={{ textAlign: \"center\" }}\n    //     >\n    //       {/* Dialog content */}\n    //     </Dialog>\n    //   )}\n    //   {!loading && !response && (\n    //     <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n    //       {/* Dialog content */}\n    //     </Dialog>\n    //   )}\n    // </React.Fragment>\n    _jsxDEV(_Fragment, {\n      children: [showAlert && /*#__PURE__*/_jsxDEV(AlertBar, {\n        render: showAlert\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 19\n      }, this), \" \", /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          sx: {\n            backgroundColor: \"secondary.main\",\n            color: \"white\",\n            width: \"100%\",\n            marginTop: \"10px\"\n          },\n          className: \"category-btn\",\n          onClick: handleClickOpen,\n          children: [\"Ask question at \", formatTime(props.timeStamp)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 7\n        }, this), (loading || response) && /*#__PURE__*/_jsxDEV(Dialog, {\n          open: open,\n          onClose: handleClose,\n          fullWidth: true,\n          sx: {\n            textAlign: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(KeyboardVoiceIcon, {\n            sx: {\n              fontSize: \"70px\",\n              backgroundColor: \"#1D5B79\",\n              color: listening ? \"#EF6262\" : \"white\",\n              ml: \"5px\",\n              borderRadius: \"100%\",\n              padding: \"20px\",\n              margin: \"20px auto\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(DialogTitle, {\n            children: !response ? \"Retrieving Response\" : \"Response\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: [loading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 25\n            }, this), response && /*#__PURE__*/_jsxDEV(DialogContentText, {\n              children: [\"Response: \", response]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 26\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              sx: {\n                backgroundColor: \"secondary.main\",\n                color: \"white\"\n              },\n              className: \"category-btn\",\n              onClick: handleAnotherQuestion,\n              children: \"Ask another question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              sx: {\n                backgroundColor: \"secondary.main\",\n                color: \"white\"\n              },\n              className: \"category-btn\",\n              onClick: handleClose,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }, this), !loading && !response && /*#__PURE__*/_jsxDEV(Dialog, {\n          open: open,\n          onClose: handleClose,\n          sx: {\n            textAlign: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(KeyboardVoiceIcon, {\n            sx: {\n              fontSize: \"70px\",\n              backgroundColor: \"#1D5B79\",\n              color: listening ? \"#EF6262\" : \"white\",\n              ml: \"5px\",\n              borderRadius: \"100%\",\n              padding: \"20px\",\n              margin: \"20px auto\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(DialogTitle, {\n            children: \"Ask Your Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: \"outlined-textarea\",\n              label: \"Your Question\",\n              placeholder: \"Your question will be visible here\",\n              multiline: true,\n              value: transcript,\n              fullWidth: true,\n              disabled: true,\n              sx: {\n                margin: \"20px 0\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n              \"aria-label\": \"Buttons to control speech recognition\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                sx: {\n                  backgroundColor: \"secondary.main\",\n                  color: \"white\"\n                },\n                \"aria-label\": \"This is a button for start or stopping the speech to text\",\n                className: \"category-btn\",\n                onClick: handleStartStop,\n                children: startOrStop\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                sx: {\n                  backgroundColor: \"secondary.main\",\n                  color: \"white\"\n                },\n                className: \"category-btn\",\n                onClick: textToSpeech,\n                children: \"Text To Speech\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                sx: {\n                  backgroundColor: \"secondary.main\",\n                  color: \"white\"\n                },\n                className: \"category-btn\",\n                onClick: handleReset,\n                children: \"Reset Question\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              sx: {\n                backgroundColor: \"secondary.main\",\n                color: \"white\"\n              },\n              className: \"category-btn\",\n              onClick: handleClose,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              sx: {\n                backgroundColor: \"secondary.main\",\n                color: \"white\"\n              },\n              onClick: handleQuestion,\n              children: \"Submit Question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true)\n  );\n};\n_s(AskAI, \"xJzzWjQYNPTS9V+E520vhYMl97s=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = AskAI;\nexport default AskAI;\n\n// import React, { useCallback, useState, useEffect } from \"react\";\n// import {AlertBar} from './';\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import Dialog from \"@mui/material/Dialog\";\n// import DialogActions from \"@mui/material/DialogActions\";\n// import DialogContent from \"@mui/material/DialogContent\";\n// import {\n//   ButtonGroup,\n//   DialogTitle,\n//   DialogContentText,\n//   CircularProgress,\n// } from \"@mui/material\";\n// import KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\n// import formatTime from \"../utils/functions\";\n// import tokenUsable from \"../utils/loggedIn\";\n\n// const AskAI = (props) => {\n//   const [open, setOpen] = React.useState(false);\n//   const [loading, setLoading] = React.useState(false);\n//   const [response, setResponse] = React.useState(\"\");\n//   const [startOrStop, setStartOrStop] = React.useState(\"Stop\");\n\n//   const playBeep = () => {\n//     const audioStart = new Audio(require('../data/beepStart.mp3')) \n//     audioStart.play()\n//   };\n\n//   const textToSpeech = () => {\n//     const synth = window.speechSynthesis;\n//     const newUtterance = new SpeechSynthesisUtterance(transcript);\n//     synth.speak(newUtterance);\n//   }\n\n//   useEffect(() => {\n//     const handleKeyPress = (event) => {\n//       // Check if the pressed key is \"Q\" and if the dialog is not already open\n//       if (event.key === \"q\" && !open) {\n//         handleClickOpen();\n//       }\n//     };\n\n//     // Add event listener when the component mounts\n//     document.addEventListener(\"keydown\", handleKeyPress);\n\n//     // Remove event listener when the component unmounts\n//     return () => {\n//       document.removeEventListener(\"keydown\", handleKeyPress);\n//     };\n//   }, [open]); \n\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n\n//   const handleClickOpen = () => {\n//     const token = Cookies.get(\"jwtToken\");\n//     if (!token || tokenUsable){\n//       console.log(\"hehehhehe\")\n//       return(\n//         <AlertBar render={true}/>\n//       )\n//     }\n\n//     SpeechRecognition.startListening({continuous:true});\n//     playBeep();\n//     setOpen(true);\n//   };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//     SpeechRecognition.stopListening()\n//     setResponse(\"\")\n//     resetTranscript();\n//     setStartOrStop(\"Stop\")\n//   };\n\n//   const handleAnotherQuestion = () => {\n//     setResponse(\"\")\n//     resetTranscript();\n//   }\n\n//   const handleReset = () => {\n//     resetTranscript();\n//     SpeechRecognition.startListening({continuous:true});\n//     setStartOrStop(\"Stop\");\n//     playBeep();\n//   }\n\n//   const handleStartStop = () => {\n//     if (startOrStop === \"Stop\"){\n//       SpeechRecognition.stopListening()\n//       setStartOrStop(\"Start\")\n//     }\n//     else{\n//       SpeechRecognition.startListening({continuous:true})\n//       setStartOrStop(\"Stop\")\n//     }\n\n//   }\n\n//   const handleQuestion = () => {\n//     setLoading(true);\n//     const token = Cookies.get(\"jwtToken\");\n//     // Define the API endpoint where you want to send the POST request\n//     const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n//     console.log(\"This is my props id\", props.videoID);\n//     const postData = {\n//       id: props.videoID,\n//       question: transcript,\n//       currentTime: props.timeStamp,\n//       jwt: token,\n//     };\n\n//     axios\n//       .post(apiUrl, postData)\n//       .then((response) => {\n//         // Handle the successful response\n//         console.log(\"Response:\", response.data);\n//         const synth = window.speechSynthesis;\n//         const newUtterance = new SpeechSynthesisUtterance(\"Response: \"+ response.data.answer);\n//         synth.speak(newUtterance);\n//         setResponse(response.data.answer);\n//         setLoading(false);\n//       })\n//       .catch((error) => {\n//         // Handle errors, if any\n//         console.error(\"Error:\", error);\n//       });\n//   };\n\n//   return (\n// <React.Fragment>\n//   <Button\n//     sx={{\n//       backgroundColor: \"secondary.main\",\n//       color: \"white\",\n//       width: \"100%\",\n//       marginTop: \"10px\",\n//     }}\n//     className=\"category-btn\"\n//     onClick={handleClickOpen}\n//   >\n//     Ask question at {formatTime(props.timeStamp)}\n//   </Button>\n//   {(loading || response) && (\n//     <Dialog\n//       open={open}\n//       onClose={handleClose}\n//       fullWidth\n//       sx={{ textAlign: \"center\" }}\n//     >\n//       <KeyboardVoiceIcon\n//         sx={{\n//           fontSize: \"70px\",\n//           backgroundColor: \"#1D5B79\",\n//           color: listening ? \"#EF6262\" : \"white\",\n//           ml: \"5px\",\n//           borderRadius: \"100%\",\n//           padding: \"20px\",\n//           margin: \"20px auto\",\n//         }}\n//       />\n//       <DialogTitle>\n//         {!response ? \"Retrieving Response\" : \"Response\"}\n//       </DialogTitle>\n//       <DialogContent>\n//         {loading && <CircularProgress />}\n//         {response && <DialogContentText>Response: {response}</DialogContentText>}\n//       </DialogContent>\n//       <DialogActions>\n//         <Button\n//           sx={{\n//             backgroundColor: \"secondary.main\",\n//             color: \"white\",\n//           }}\n//           className=\"category-btn\"\n//           onClick={handleAnotherQuestion}\n//         >\n//           Ask another question\n//         </Button>\n//         <Button\n//           sx={{\n//             backgroundColor: \"secondary.main\",\n//             color: \"white\",\n//           }}\n//           className=\"category-btn\"\n//           onClick={handleClose}\n//         >\n//           Cancel\n//         </Button>\n//       </DialogActions>\n//     </Dialog>\n//   )}\n\n//   {!loading && !response && (\n//     <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n//       <KeyboardVoiceIcon\n//         sx={{\n//           fontSize: \"70px\",\n//           backgroundColor: \"#1D5B79\",\n//           color: listening ? \"#EF6262\" : \"white\",\n//           ml: \"5px\",\n//           borderRadius: \"100%\",\n//           padding: \"20px\",\n//           margin: \"20px auto\",\n//         }}\n//       />\n//       <DialogTitle>Ask Your Question</DialogTitle>\n//       <DialogContent>\n//         <TextField\n//           id=\"outlined-textarea\"\n//           label=\"Your Question\"\n//           placeholder=\"Your question will be visible here\"\n//           multiline\n//           value={transcript}\n//           fullWidth\n//           disabled\n//           sx={{ margin: \"20px 0\" }}\n//         />\n//         <ButtonGroup aria-label=\"Buttons to control speech recognition\">\n//           <Button\n//             sx={{\n//               backgroundColor: \"secondary.main\",\n//               color: \"white\",\n//             }}\n//             aria-label = \"This is a button for start or stopping the speech to text\"\n//             className=\"category-btn\"\n//             onClick={handleStartStop}\n//           >\n//             {startOrStop}\n//           </Button>\n//           <Button\n//             sx={{\n//               backgroundColor: \"secondary.main\",\n//               color: \"white\",\n//             }}\n//             className=\"category-btn\"\n//             onClick={textToSpeech}\n//           >\n//             Text To Speech\n//           </Button>\n//           <Button\n//             sx={{\n//               backgroundColor: \"secondary.main\",\n//               color: \"white\",\n//             }}\n//             className=\"category-btn\"\n//             onClick={handleReset}\n//           >\n//             Reset Question\n//           </Button>\n//         </ButtonGroup>\n//       </DialogContent>\n//       <DialogActions>\n//         <Button\n//           sx={{\n//             backgroundColor: \"secondary.main\",\n//             color: \"white\",\n//           }}\n//           className=\"category-btn\"\n//           onClick={handleClose}\n//         >\n//           Cancel\n//         </Button>\n//         <Button\n//           sx={{\n//             backgroundColor: \"secondary.main\",\n//             color: \"white\",\n//           }}\n//           onClick={handleQuestion}\n//         >\n//           Submit Question\n//         </Button>\n//       </DialogActions>\n//     </Dialog>\n//   )}\n// </React.Fragment>\n//   );\n// };\n\n// export default AskAI;\nvar _c;\n$RefreshReg$(_c, \"AskAI\");","map":{"version":3,"names":["React","useState","useEffect","AlertBar","SpeechRecognition","useSpeechRecognition","axios","Cookies","Button","TextField","Dialog","ButtonGroup","DialogTitle","DialogContent","DialogActions","DialogContentText","CircularProgress","KeyboardVoiceIcon","formatTime","tokenUsable","jsxDEV","_jsxDEV","Fragment","_Fragment","AskAI","props","_s","open","setOpen","loading","setLoading","response","setResponse","startOrStop","setStartOrStop","showAlert","setShowAlert","handleKeyPress","event","key","handleClickOpen","document","addEventListener","removeEventListener","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","token","get","startListening","continuous","handleClose","stopListening","handleAnotherQuestion","handleReset","handleStartStop","handleQuestion","apiUrl","postData","id","videoID","question","currentTime","timeStamp","jwt","post","then","synth","window","speechSynthesis","newUtterance","SpeechSynthesisUtterance","data","answer","speak","catch","error","console","children","render","fileName","_jsxFileName","lineNumber","columnNumber","sx","backgroundColor","color","width","marginTop","className","onClick","onClose","fullWidth","textAlign","fontSize","ml","borderRadius","padding","margin","label","placeholder","multiline","value","disabled","textToSpeech","_c","$RefreshReg$"],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/AskAI.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { AlertBar } from \"./\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Dialog from \"@mui/material/Dialog\";\nimport {\n  ButtonGroup,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  DialogContentText,\n  CircularProgress,\n} from \"@mui/material\";\nimport KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\nimport formatTime from \"../utils/functions\";\nimport tokenUsable from \"../utils/loggedIn\";\n\nconst AskAI = (props) => {\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [response, setResponse] = useState(\"\");\n  const [startOrStop, setStartOrStop] = useState(\"Stop\");\n  const [showAlert, setShowAlert] = useState(false); // State to control alert visibility\n\n  useEffect(() => {\n    const handleKeyPress = (event) => {\n      if (event.key === \"q\" && !open) {\n        handleClickOpen();\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyPress);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [open]);\n\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n  } = useSpeechRecognition();\n\n  const handleClickOpen = () => {\n    const token = Cookies.get(\"jwtToken\");\n    if (!token || !tokenUsable(token)) {\n      setShowAlert(true); // Set showAlert to true to show the alert\n      return;\n    }\n\n    SpeechRecognition.startListening({ continuous: true });\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    SpeechRecognition.stopListening();\n    setResponse(\"\");\n    resetTranscript();\n    setStartOrStop(\"Stop\");\n  };\n\n  const handleAnotherQuestion = () => {\n    setResponse(\"\");\n    resetTranscript();\n  };\n\n  const handleReset = () => {\n    resetTranscript();\n    SpeechRecognition.startListening({ continuous: true });\n    setStartOrStop(\"Stop\");\n  };\n\n  const handleStartStop = () => {\n    if (startOrStop === \"Stop\") {\n      SpeechRecognition.stopListening();\n      setStartOrStop(\"Start\");\n    } else {\n      SpeechRecognition.startListening({ continuous: true });\n      setStartOrStop(\"Stop\");\n    }\n  };\n\n  const handleQuestion = () => {\n    setLoading(true);\n    const token = Cookies.get(\"jwtToken\");\n    const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n    const postData = {\n      id: props.videoID,\n      question: transcript,\n      currentTime: props.timeStamp,\n      jwt: token,\n    };\n\n    axios\n      .post(apiUrl, postData)\n      .then((response) => {\n        const synth = window.speechSynthesis;\n        const newUtterance = new SpeechSynthesisUtterance(\"Response: \" + response.data.answer);\n        synth.speak(newUtterance);\n        setResponse(response.data.answer);\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n  };\n\n  return (\n    // <React.Fragment>\n\n    //   <Button\n    //     sx={{\n    //       backgroundColor: \"secondary.main\",\n    //       color: \"white\",\n    //       width: \"100%\",\n    //       marginTop: \"10px\",\n    //     }}\n    //     className=\"category-btn\"\n    //     onClick={handleClickOpen}\n    //   >\n    //     Ask question at {formatTime(props.timeStamp)}\n    //   </Button>\n    //   {(loading || response) && (\n    //     <Dialog\n    //       open={open}\n    //       onClose={handleClose}\n    //       fullWidth\n    //       sx={{ textAlign: \"center\" }}\n    //     >\n    //       {/* Dialog content */}\n    //     </Dialog>\n    //   )}\n    //   {!loading && !response && (\n    //     <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n    //       {/* Dialog content */}\n    //     </Dialog>\n    //   )}\n    // </React.Fragment>\n    <>\n    {showAlert && <AlertBar render ={showAlert} />} {/* Conditionally render the AlertBar */}\n    <React.Fragment>\n      <Button\n        sx={{\n          backgroundColor: \"secondary.main\",\n          color: \"white\",\n          width: \"100%\",\n          marginTop: \"10px\",\n        }}\n        className=\"category-btn\"\n        onClick={handleClickOpen}\n      >\n        Ask question at {formatTime(props.timeStamp)}\n      </Button>\n      {(loading || response) && (\n        <Dialog\n          open={open}\n          onClose={handleClose}\n          fullWidth\n          sx={{ textAlign: \"center\" }}\n        >\n          <KeyboardVoiceIcon\n            sx={{\n              fontSize: \"70px\",\n              backgroundColor: \"#1D5B79\",\n              color: listening ? \"#EF6262\" : \"white\",\n              ml: \"5px\",\n              borderRadius: \"100%\",\n              padding: \"20px\",\n              margin: \"20px auto\",\n            }}\n          />\n          <DialogTitle>\n            {!response ? \"Retrieving Response\" : \"Response\"}\n          </DialogTitle>\n          <DialogContent>\n            {loading && <CircularProgress />}\n            {response && <DialogContentText>Response: {response}</DialogContentText>}\n          </DialogContent>\n          <DialogActions>\n            <Button\n              sx={{\n                backgroundColor: \"secondary.main\",\n                color: \"white\",\n              }}\n              className=\"category-btn\"\n              onClick={handleAnotherQuestion}\n            >\n              Ask another question\n            </Button>\n            <Button\n              sx={{\n                backgroundColor: \"secondary.main\",\n                color: \"white\",\n              }}\n              className=\"category-btn\"\n              onClick={handleClose}\n            >\n              Cancel\n            </Button>\n          </DialogActions>\n        </Dialog>\n      )}\n\n      {!loading && !response && (\n        <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n          <KeyboardVoiceIcon\n            sx={{\n              fontSize: \"70px\",\n              backgroundColor: \"#1D5B79\",\n              color: listening ? \"#EF6262\" : \"white\",\n              ml: \"5px\",\n              borderRadius: \"100%\",\n              padding: \"20px\",\n              margin: \"20px auto\",\n            }}\n          />\n          <DialogTitle>Ask Your Question</DialogTitle>\n          <DialogContent>\n            <TextField\n              id=\"outlined-textarea\"\n              label=\"Your Question\"\n              placeholder=\"Your question will be visible here\"\n              multiline\n              value={transcript}\n              fullWidth\n              disabled\n              sx={{ margin: \"20px 0\" }}\n            />\n            <ButtonGroup aria-label=\"Buttons to control speech recognition\">\n              <Button\n                sx={{\n                  backgroundColor: \"secondary.main\",\n                  color: \"white\",\n                }}\n                aria-label = \"This is a button for start or stopping the speech to text\"\n                className=\"category-btn\"\n                onClick={handleStartStop}\n              >\n                {startOrStop}\n              </Button>\n              <Button\n                sx={{\n                  backgroundColor: \"secondary.main\",\n                  color: \"white\",\n                }}\n                className=\"category-btn\"\n                onClick={textToSpeech}\n              >\n                Text To Speech\n              </Button>\n              <Button\n                sx={{\n                  backgroundColor: \"secondary.main\",\n                  color: \"white\",\n                }}\n                className=\"category-btn\"\n                onClick={handleReset}\n              >\n                Reset Question\n              </Button>\n            </ButtonGroup>\n          </DialogContent>\n          <DialogActions>\n            <Button\n              sx={{\n                backgroundColor: \"secondary.main\",\n                color: \"white\",\n              }}\n              className=\"category-btn\"\n              onClick={handleClose}\n            >\n              Cancel\n            </Button>\n            <Button\n              sx={{\n                backgroundColor: \"secondary.main\",\n                color: \"white\",\n              }}\n              onClick={handleQuestion}\n            >\n              Submit Question\n            </Button>\n          </DialogActions>\n        </Dialog>\n      )}\n    </React.Fragment>\n    </>\n  );\n};\n\nexport default AskAI;\n\n\n// import React, { useCallback, useState, useEffect } from \"react\";\n// import {AlertBar} from './';\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import Dialog from \"@mui/material/Dialog\";\n// import DialogActions from \"@mui/material/DialogActions\";\n// import DialogContent from \"@mui/material/DialogContent\";\n// import {\n//   ButtonGroup,\n//   DialogTitle,\n//   DialogContentText,\n//   CircularProgress,\n// } from \"@mui/material\";\n// import KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\n// import formatTime from \"../utils/functions\";\n// import tokenUsable from \"../utils/loggedIn\";\n\n// const AskAI = (props) => {\n//   const [open, setOpen] = React.useState(false);\n//   const [loading, setLoading] = React.useState(false);\n//   const [response, setResponse] = React.useState(\"\");\n//   const [startOrStop, setStartOrStop] = React.useState(\"Stop\");\n\n//   const playBeep = () => {\n//     const audioStart = new Audio(require('../data/beepStart.mp3')) \n//     audioStart.play()\n//   };\n\n//   const textToSpeech = () => {\n//     const synth = window.speechSynthesis;\n//     const newUtterance = new SpeechSynthesisUtterance(transcript);\n//     synth.speak(newUtterance);\n//   }\n\n//   useEffect(() => {\n//     const handleKeyPress = (event) => {\n//       // Check if the pressed key is \"Q\" and if the dialog is not already open\n//       if (event.key === \"q\" && !open) {\n//         handleClickOpen();\n//       }\n//     };\n\n//     // Add event listener when the component mounts\n//     document.addEventListener(\"keydown\", handleKeyPress);\n\n//     // Remove event listener when the component unmounts\n//     return () => {\n//       document.removeEventListener(\"keydown\", handleKeyPress);\n//     };\n//   }, [open]); \n\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n\n//   const handleClickOpen = () => {\n//     const token = Cookies.get(\"jwtToken\");\n//     if (!token || tokenUsable){\n//       console.log(\"hehehhehe\")\n//       return(\n//         <AlertBar render={true}/>\n//       )\n//     }\n\n//     SpeechRecognition.startListening({continuous:true});\n//     playBeep();\n//     setOpen(true);\n//   };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//     SpeechRecognition.stopListening()\n//     setResponse(\"\")\n//     resetTranscript();\n//     setStartOrStop(\"Stop\")\n//   };\n\n//   const handleAnotherQuestion = () => {\n//     setResponse(\"\")\n//     resetTranscript();\n//   }\n\n//   const handleReset = () => {\n//     resetTranscript();\n//     SpeechRecognition.startListening({continuous:true});\n//     setStartOrStop(\"Stop\");\n//     playBeep();\n//   }\n\n//   const handleStartStop = () => {\n//     if (startOrStop === \"Stop\"){\n//       SpeechRecognition.stopListening()\n//       setStartOrStop(\"Start\")\n//     }\n//     else{\n//       SpeechRecognition.startListening({continuous:true})\n//       setStartOrStop(\"Stop\")\n//     }\n\n//   }\n\n//   const handleQuestion = () => {\n//     setLoading(true);\n//     const token = Cookies.get(\"jwtToken\");\n//     // Define the API endpoint where you want to send the POST request\n//     const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n//     console.log(\"This is my props id\", props.videoID);\n//     const postData = {\n//       id: props.videoID,\n//       question: transcript,\n//       currentTime: props.timeStamp,\n//       jwt: token,\n//     };\n\n//     axios\n//       .post(apiUrl, postData)\n//       .then((response) => {\n//         // Handle the successful response\n//         console.log(\"Response:\", response.data);\n//         const synth = window.speechSynthesis;\n//         const newUtterance = new SpeechSynthesisUtterance(\"Response: \"+ response.data.answer);\n//         synth.speak(newUtterance);\n//         setResponse(response.data.answer);\n//         setLoading(false);\n//       })\n//       .catch((error) => {\n//         // Handle errors, if any\n//         console.error(\"Error:\", error);\n//       });\n//   };\n\n//   return (\n    // <React.Fragment>\n    //   <Button\n    //     sx={{\n    //       backgroundColor: \"secondary.main\",\n    //       color: \"white\",\n    //       width: \"100%\",\n    //       marginTop: \"10px\",\n    //     }}\n    //     className=\"category-btn\"\n    //     onClick={handleClickOpen}\n    //   >\n    //     Ask question at {formatTime(props.timeStamp)}\n    //   </Button>\n    //   {(loading || response) && (\n    //     <Dialog\n    //       open={open}\n    //       onClose={handleClose}\n    //       fullWidth\n    //       sx={{ textAlign: \"center\" }}\n    //     >\n    //       <KeyboardVoiceIcon\n    //         sx={{\n    //           fontSize: \"70px\",\n    //           backgroundColor: \"#1D5B79\",\n    //           color: listening ? \"#EF6262\" : \"white\",\n    //           ml: \"5px\",\n    //           borderRadius: \"100%\",\n    //           padding: \"20px\",\n    //           margin: \"20px auto\",\n    //         }}\n    //       />\n    //       <DialogTitle>\n    //         {!response ? \"Retrieving Response\" : \"Response\"}\n    //       </DialogTitle>\n    //       <DialogContent>\n    //         {loading && <CircularProgress />}\n    //         {response && <DialogContentText>Response: {response}</DialogContentText>}\n    //       </DialogContent>\n    //       <DialogActions>\n    //         <Button\n    //           sx={{\n    //             backgroundColor: \"secondary.main\",\n    //             color: \"white\",\n    //           }}\n    //           className=\"category-btn\"\n    //           onClick={handleAnotherQuestion}\n    //         >\n    //           Ask another question\n    //         </Button>\n    //         <Button\n    //           sx={{\n    //             backgroundColor: \"secondary.main\",\n    //             color: \"white\",\n    //           }}\n    //           className=\"category-btn\"\n    //           onClick={handleClose}\n    //         >\n    //           Cancel\n    //         </Button>\n    //       </DialogActions>\n    //     </Dialog>\n    //   )}\n\n    //   {!loading && !response && (\n    //     <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n    //       <KeyboardVoiceIcon\n    //         sx={{\n    //           fontSize: \"70px\",\n    //           backgroundColor: \"#1D5B79\",\n    //           color: listening ? \"#EF6262\" : \"white\",\n    //           ml: \"5px\",\n    //           borderRadius: \"100%\",\n    //           padding: \"20px\",\n    //           margin: \"20px auto\",\n    //         }}\n    //       />\n    //       <DialogTitle>Ask Your Question</DialogTitle>\n    //       <DialogContent>\n    //         <TextField\n    //           id=\"outlined-textarea\"\n    //           label=\"Your Question\"\n    //           placeholder=\"Your question will be visible here\"\n    //           multiline\n    //           value={transcript}\n    //           fullWidth\n    //           disabled\n    //           sx={{ margin: \"20px 0\" }}\n    //         />\n    //         <ButtonGroup aria-label=\"Buttons to control speech recognition\">\n    //           <Button\n    //             sx={{\n    //               backgroundColor: \"secondary.main\",\n    //               color: \"white\",\n    //             }}\n    //             aria-label = \"This is a button for start or stopping the speech to text\"\n    //             className=\"category-btn\"\n    //             onClick={handleStartStop}\n    //           >\n    //             {startOrStop}\n    //           </Button>\n    //           <Button\n    //             sx={{\n    //               backgroundColor: \"secondary.main\",\n    //               color: \"white\",\n    //             }}\n    //             className=\"category-btn\"\n    //             onClick={textToSpeech}\n    //           >\n    //             Text To Speech\n    //           </Button>\n    //           <Button\n    //             sx={{\n    //               backgroundColor: \"secondary.main\",\n    //               color: \"white\",\n    //             }}\n    //             className=\"category-btn\"\n    //             onClick={handleReset}\n    //           >\n    //             Reset Question\n    //           </Button>\n    //         </ButtonGroup>\n    //       </DialogContent>\n    //       <DialogActions>\n    //         <Button\n    //           sx={{\n    //             backgroundColor: \"secondary.main\",\n    //             color: \"white\",\n    //           }}\n    //           className=\"category-btn\"\n    //           onClick={handleClose}\n    //         >\n    //           Cancel\n    //         </Button>\n    //         <Button\n    //           sx={{\n    //             backgroundColor: \"secondary.main\",\n    //             color: \"white\",\n    //           }}\n    //           onClick={handleQuestion}\n    //         >\n    //           Submit Question\n    //         </Button>\n    //       </DialogActions>\n    //     </Dialog>\n    //   )}\n    // </React.Fragment>\n//   );\n// };\n\n// export default AskAI;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}