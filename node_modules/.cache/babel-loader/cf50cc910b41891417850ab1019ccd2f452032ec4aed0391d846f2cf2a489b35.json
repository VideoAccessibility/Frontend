{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { AlertBar } from \"./\";\n// import SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import Dialog from \"@mui/material/Dialog\";\n// import {\n//   ButtonGroup,\n//   DialogTitle,\n//   DialogContent,\n//   DialogActions,\n//   DialogContentText,\n//   CircularProgress,\n// } from \"@mui/material\";\n// // import SpeechRecognition, {\n// //   useSpeechRecognition,\n// // } from \"react-speech-recognition\";\n// import KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\n// import formatTime from \"../utils/functions\";\n// import tokenUsable from \"../utils/loggedIn\";\n\n// const AskAI = (props) => {\n//   const [open, setOpen] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const [response, setResponse] = useState(\"\");\n//   const [startOrStop, setStartOrStop] = useState(\"Stop\");\n//   const [showAlert, setShowAlert] = useState(false); // State to control alert visibility\n\n//   useEffect(() => {\n//     const handleKeyPress = (event) => {\n//       if (event.key === \"q\" && !open) {\n//         handleClickOpen();\n//       }\n//     };\n\n//     document.addEventListener(\"keydown\", handleKeyPress);\n\n//     return () => {\n//       document.removeEventListener(\"keydown\", handleKeyPress);\n//     };\n//   }, [open]);\n\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n\n// const handleClickOpen = () => {\n//   const token = Cookies.get(\"jwtToken\");\n//   if (!token || !tokenUsable(token)) {\n//     setShowAlert(true); // Set showAlert to true to show the alert\n//     return;\n//   }\n\n//   SpeechRecognition.startListening({ continuous: true });\n//   setOpen(true);\n// };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//     SpeechRecognition.stopListening();\n//     setResponse(\"\");\n//     resetTranscript();\n//     setStartOrStop(\"Stop\");\n//   };\n\n//   const handleAnotherQuestion = () => {\n//     setResponse(\"\");\n//     resetTranscript();\n//   };\n\n//   const handleReset = () => {\n//     resetTranscript();\n//     SpeechRecognition.startListening({ continuous: true });\n//     setStartOrStop(\"Stop\");\n//   };\n\n//   const handleStartStop = () => {\n//     if (startOrStop === \"Stop\") {\n//       SpeechRecognition.stopListening();\n//       setStartOrStop(\"Start\");\n//     } else {\n//       SpeechRecognition.startListening({ continuous: true });\n//       setStartOrStop(\"Stop\");\n//     }\n//   };\n\n//   const handleQuestion = () => {\n//     setLoading(true);\n//     const token = Cookies.get(\"jwtToken\");\n//     const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n//     const postData = {\n//       id: props.videoID,\n//       question: transcript,\n//       currentTime: props.timeStamp,\n//       jwt: token,\n//     };\n\n//     axios\n//       .post(apiUrl, postData)\n//       .then((response) => {\n//         const synth = window.speechSynthesis;\n//         const newUtterance = new SpeechSynthesisUtterance(\"Response: \" + response.data.answer);\n//         synth.speak(newUtterance);\n//         setResponse(response.data.answer);\n//         setLoading(false);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error:\", error);\n//       });\n//   };\n\n//   return (\n//     // <React.Fragment>\n\n//     //   <Button\n//     //     sx={{\n//     //       backgroundColor: \"secondary.main\",\n//     //       color: \"white\",\n//     //       width: \"100%\",\n//     //       marginTop: \"10px\",\n//     //     }}\n//     //     className=\"category-btn\"\n//     //     onClick={handleClickOpen}\n//     //   >\n//     //     Ask question at {formatTime(props.timeStamp)}\n//     //   </Button>\n//     //   {(loading || response) && (\n//     //     <Dialog\n//     //       open={open}\n//     //       onClose={handleClose}\n//     //       fullWidth\n//     //       sx={{ textAlign: \"center\" }}\n//     //     >\n//     //       {/* Dialog content */}\n//     //     </Dialog>\n//     //   )}\n//     //   {!loading && !response && (\n//     //     <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n//     //       {/* Dialog content */}\n//     //     </Dialog>\n//     //   )}\n//     // </React.Fragment>\n//     <>\n//     {showAlert && <AlertBar render ={showAlert} />} {/* Conditionally render the AlertBar */}\n//     <React.Fragment>\n//       <Button\n//         sx={{\n//           backgroundColor: \"secondary.main\",\n//           color: \"white\",\n//           width: \"100%\",\n//           marginTop: \"10px\",\n//         }}\n//         className=\"category-btn\"\n//         onClick={handleClickOpen}\n//       >\n//         Ask question at {formatTime(props.timeStamp)}\n//       </Button>\n//       {(loading || response) && (\n//         <Dialog\n//           open={open}\n//           onClose={handleClose}\n//           fullWidth\n//           sx={{ textAlign: \"center\" }}\n//         >\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>\n//             {!response ? \"Retrieving Response\" : \"Response\"}\n//           </DialogTitle>\n//           <DialogContent>\n//             {loading && <CircularProgress />}\n//             {response && <DialogContentText>Response: {response}</DialogContentText>}\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleAnotherQuestion}\n//             >\n//               Ask another question\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n\n//       {!loading && !response && (\n//         <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>Ask Your Question</DialogTitle>\n//           <DialogContent>\n//             <TextField\n//               id=\"outlined-textarea\"\n//               label=\"Your Question\"\n//               placeholder=\"Your question will be visible here\"\n//               multiline\n//               value={transcript}\n//               fullWidth\n//               disabled\n//               sx={{ margin: \"20px 0\" }}\n//             />\n//             <ButtonGroup aria-label=\"Buttons to control speech recognition\">\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 aria-label = \"This is a button for start or stopping the speech to text\"\n//                 className=\"category-btn\"\n//                 onClick={handleStartStop}\n//               >\n//                 {startOrStop}\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={textToSpeech}\n//               >\n//                 Text To Speech\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={handleReset}\n//               >\n//                 Reset Question\n//               </Button>\n//             </ButtonGroup>\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               onClick={handleQuestion}\n//             >\n//               Submit Question\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n//     </React.Fragment>\n//     </>\n//   );\n// };\n\n// export default AskAI;\n\n// import React, { useCallback, useState, useEffect } from \"react\";\n// import {AlertBar} from './';\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import Dialog from \"@mui/material/Dialog\";\n// import DialogActions from \"@mui/material/DialogActions\";\n// import DialogContent from \"@mui/material/DialogContent\";\n// import {\n//   ButtonGroup,\n//   DialogTitle,\n//   DialogContentText,\n//   CircularProgress,\n// } from \"@mui/material\";\n// import KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\n// import formatTime from \"../utils/functions\";\n// import tokenUsable from \"../utils/loggedIn\";\n\n// const AskAI = (props) => {\n//   const [open, setOpen] = React.useState(false);\n//   const [loading, setLoading] = React.useState(false);\n//   const [response, setResponse] = React.useState(\"\");\n//   const [startOrStop, setStartOrStop] = React.useState(\"Stop\");\n//   const [showAlert, setShowAlert] = useState(false); // State to control alert visibilityqq\n\n//   const playBeep = () => {\n//     const audioStart = new Audio(require('../data/beepStart.mp3')) \n//     audioStart.play()\n//   };\n\n//   const textToSpeech = () => {\n//     const synth = window.speechSynthesis;\n//     const newUtterance = new SpeechSynthesisUtterance(transcript);\n//     synth.speak(newUtterance);\n//   }\n\n//   useEffect(() => {\n//     const handleKeyPress = (event) => {\n//       // Check if the pressed key is \"Q\" and if the dialog is not already open\n//       if (event.key === \"q\" && !open) {\n//         handleClickOpen();\n//       }\n//     };\n\n//     // Add event listener when the component mounts\n//     document.addEventListener(\"keydown\", handleKeyPress);\n\n//     // Remove event listener when the component unmounts\n//     return () => {\n//       document.removeEventListener(\"keydown\", handleKeyPress);\n//     };\n//   }, [open]); \n\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n\n//   const handleClickOpen = () => {\n//     const token = Cookies.get(\"jwtToken\");\n//     if (!token || !tokenUsable(token)) {\n//       setShowAlert(true); // Set showAlert to true to show the alert\n//       return;\n//     }\n\n//     SpeechRecognition.startListening({continuous:true});\n//     playBeep();\n//     setOpen(true);\n//   };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//     SpeechRecognition.stopListening()\n//     setResponse(\"\")\n//     resetTranscript();\n//     setStartOrStop(\"Stop\")\n//   };\n\n//   const handleAnotherQuestion = () => {\n//     setResponse(\"\")\n//     resetTranscript();\n//   }\n\n//   const handleReset = () => {\n//     resetTranscript();\n//     SpeechRecognition.startListening({continuous:true});\n//     setStartOrStop(\"Stop\");\n//     playBeep();\n//   }\n\n//   const handleStartStop = () => {\n//     if (startOrStop === \"Stop\"){\n//       SpeechRecognition.stopListening()\n//       setStartOrStop(\"Start\")\n//     }\n//     else{\n//       SpeechRecognition.startListening({continuous:true})\n//       setStartOrStop(\"Stop\")\n//     }\n\n//   }\n\n//   const handleQuestion = () => {\n//     setLoading(true);\n//     const token = Cookies.get(\"jwtToken\");\n//     // Define the API endpoint where you want to send the POST request\n//     const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n//     console.log(\"This is my props id\", props.videoID);\n//     const postData = {\n//       id: props.videoID,\n//       question: transcript,\n//       currentTime: props.timeStamp,\n//       jwt: token,\n//     };\n\n//     axios\n//       .post(apiUrl, postData)\n//       .then((response) => {\n//         // Handle the successful response\n//         console.log(\"Response:\", response.data);\n//         const synth = window.speechSynthesis;\n//         const newUtterance = new SpeechSynthesisUtterance(\"Response: \"+ response.data.answer);\n//         synth.speak(newUtterance);\n//         setResponse(response.data.answer);\n//         setLoading(false);\n//       })\n//       .catch((error) => {\n//         // Handle errors, if any\n//         console.error(\"Error:\", error);\n//       });\n//   };\n\n//   return (\n//     <React.Fragment>\n//       <Button\n//         sx={{\n//           backgroundColor: \"secondary.main\",\n//           color: \"white\",\n//           width: \"100%\",\n//           marginTop: \"10px\",\n//         }}\n//         className=\"category-btn\"\n//         onClick={handleClickOpen}\n//       >\n//         Ask question at {formatTime(props.timeStamp)}\n//       </Button>\n//       {(loading || response) && (\n//         <Dialog\n//           open={open}\n//           onClose={handleClose}\n//           fullWidth\n//           sx={{ textAlign: \"center\" }}\n//         >\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>\n//             {!response ? \"Retrieving Response\" : \"Response\"}\n//           </DialogTitle>\n//           <DialogContent>\n//             {loading && <CircularProgress />}\n//             {response && <DialogContentText>Response: {response}</DialogContentText>}\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleAnotherQuestion}\n//             >\n//               Ask another question\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n\n//       {!loading && !response && (\n//         <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>Ask Your Question</DialogTitle>\n//           <DialogContent>\n//             <TextField\n//               id=\"outlined-textarea\"\n//               label=\"Your Question\"\n//               placeholder=\"Your question will be visible here\"\n//               multiline\n//               value={transcript}\n//               fullWidth\n//               disabled\n//               sx={{ margin: \"20px 0\" }}\n//             />\n//             <ButtonGroup aria-label=\"Buttons to control speech recognition\">\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 aria-label = \"This is a button for start or stopping the speech to text\"\n//                 className=\"category-btn\"\n//                 onClick={handleStartStop}\n//               >\n//                 {startOrStop}\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={textToSpeech}\n//               >\n//                 Text To Speech\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={handleReset}\n//               >\n//                 Reset Question\n//               </Button>\n//             </ButtonGroup>\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               onClick={handleQuestion}\n//             >\n//               Submit Question\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n//     </React.Fragment>\n//   );\n// };\n\n// export default AskAI;","map":{"version":3,"names":[],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/AskAI.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { AlertBar } from \"./\";\n// import SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import Dialog from \"@mui/material/Dialog\";\n// import {\n//   ButtonGroup,\n//   DialogTitle,\n//   DialogContent,\n//   DialogActions,\n//   DialogContentText,\n//   CircularProgress,\n// } from \"@mui/material\";\n// // import SpeechRecognition, {\n// //   useSpeechRecognition,\n// // } from \"react-speech-recognition\";\n// import KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\n// import formatTime from \"../utils/functions\";\n// import tokenUsable from \"../utils/loggedIn\";\n\n// const AskAI = (props) => {\n//   const [open, setOpen] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const [response, setResponse] = useState(\"\");\n//   const [startOrStop, setStartOrStop] = useState(\"Stop\");\n//   const [showAlert, setShowAlert] = useState(false); // State to control alert visibility\n\n//   useEffect(() => {\n//     const handleKeyPress = (event) => {\n//       if (event.key === \"q\" && !open) {\n//         handleClickOpen();\n//       }\n//     };\n\n//     document.addEventListener(\"keydown\", handleKeyPress);\n\n//     return () => {\n//       document.removeEventListener(\"keydown\", handleKeyPress);\n//     };\n//   }, [open]);\n\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n\n  // const handleClickOpen = () => {\n  //   const token = Cookies.get(\"jwtToken\");\n  //   if (!token || !tokenUsable(token)) {\n  //     setShowAlert(true); // Set showAlert to true to show the alert\n  //     return;\n  //   }\n\n  //   SpeechRecognition.startListening({ continuous: true });\n  //   setOpen(true);\n  // };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//     SpeechRecognition.stopListening();\n//     setResponse(\"\");\n//     resetTranscript();\n//     setStartOrStop(\"Stop\");\n//   };\n\n//   const handleAnotherQuestion = () => {\n//     setResponse(\"\");\n//     resetTranscript();\n//   };\n\n//   const handleReset = () => {\n//     resetTranscript();\n//     SpeechRecognition.startListening({ continuous: true });\n//     setStartOrStop(\"Stop\");\n//   };\n\n//   const handleStartStop = () => {\n//     if (startOrStop === \"Stop\") {\n//       SpeechRecognition.stopListening();\n//       setStartOrStop(\"Start\");\n//     } else {\n//       SpeechRecognition.startListening({ continuous: true });\n//       setStartOrStop(\"Stop\");\n//     }\n//   };\n\n//   const handleQuestion = () => {\n//     setLoading(true);\n//     const token = Cookies.get(\"jwtToken\");\n//     const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n//     const postData = {\n//       id: props.videoID,\n//       question: transcript,\n//       currentTime: props.timeStamp,\n//       jwt: token,\n//     };\n\n//     axios\n//       .post(apiUrl, postData)\n//       .then((response) => {\n//         const synth = window.speechSynthesis;\n//         const newUtterance = new SpeechSynthesisUtterance(\"Response: \" + response.data.answer);\n//         synth.speak(newUtterance);\n//         setResponse(response.data.answer);\n//         setLoading(false);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error:\", error);\n//       });\n//   };\n\n//   return (\n//     // <React.Fragment>\n\n//     //   <Button\n//     //     sx={{\n//     //       backgroundColor: \"secondary.main\",\n//     //       color: \"white\",\n//     //       width: \"100%\",\n//     //       marginTop: \"10px\",\n//     //     }}\n//     //     className=\"category-btn\"\n//     //     onClick={handleClickOpen}\n//     //   >\n//     //     Ask question at {formatTime(props.timeStamp)}\n//     //   </Button>\n//     //   {(loading || response) && (\n//     //     <Dialog\n//     //       open={open}\n//     //       onClose={handleClose}\n//     //       fullWidth\n//     //       sx={{ textAlign: \"center\" }}\n//     //     >\n//     //       {/* Dialog content */}\n//     //     </Dialog>\n//     //   )}\n//     //   {!loading && !response && (\n//     //     <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n//     //       {/* Dialog content */}\n//     //     </Dialog>\n//     //   )}\n//     // </React.Fragment>\n//     <>\n//     {showAlert && <AlertBar render ={showAlert} />} {/* Conditionally render the AlertBar */}\n//     <React.Fragment>\n//       <Button\n//         sx={{\n//           backgroundColor: \"secondary.main\",\n//           color: \"white\",\n//           width: \"100%\",\n//           marginTop: \"10px\",\n//         }}\n//         className=\"category-btn\"\n//         onClick={handleClickOpen}\n//       >\n//         Ask question at {formatTime(props.timeStamp)}\n//       </Button>\n//       {(loading || response) && (\n//         <Dialog\n//           open={open}\n//           onClose={handleClose}\n//           fullWidth\n//           sx={{ textAlign: \"center\" }}\n//         >\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>\n//             {!response ? \"Retrieving Response\" : \"Response\"}\n//           </DialogTitle>\n//           <DialogContent>\n//             {loading && <CircularProgress />}\n//             {response && <DialogContentText>Response: {response}</DialogContentText>}\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleAnotherQuestion}\n//             >\n//               Ask another question\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n\n//       {!loading && !response && (\n//         <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>Ask Your Question</DialogTitle>\n//           <DialogContent>\n//             <TextField\n//               id=\"outlined-textarea\"\n//               label=\"Your Question\"\n//               placeholder=\"Your question will be visible here\"\n//               multiline\n//               value={transcript}\n//               fullWidth\n//               disabled\n//               sx={{ margin: \"20px 0\" }}\n//             />\n//             <ButtonGroup aria-label=\"Buttons to control speech recognition\">\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 aria-label = \"This is a button for start or stopping the speech to text\"\n//                 className=\"category-btn\"\n//                 onClick={handleStartStop}\n//               >\n//                 {startOrStop}\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={textToSpeech}\n//               >\n//                 Text To Speech\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={handleReset}\n//               >\n//                 Reset Question\n//               </Button>\n//             </ButtonGroup>\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               onClick={handleQuestion}\n//             >\n//               Submit Question\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n//     </React.Fragment>\n//     </>\n//   );\n// };\n\n// export default AskAI;\n\n\n// import React, { useCallback, useState, useEffect } from \"react\";\n// import {AlertBar} from './';\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import Dialog from \"@mui/material/Dialog\";\n// import DialogActions from \"@mui/material/DialogActions\";\n// import DialogContent from \"@mui/material/DialogContent\";\n// import {\n//   ButtonGroup,\n//   DialogTitle,\n//   DialogContentText,\n//   CircularProgress,\n// } from \"@mui/material\";\n// import KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\n// import formatTime from \"../utils/functions\";\n// import tokenUsable from \"../utils/loggedIn\";\n\n// const AskAI = (props) => {\n//   const [open, setOpen] = React.useState(false);\n//   const [loading, setLoading] = React.useState(false);\n//   const [response, setResponse] = React.useState(\"\");\n//   const [startOrStop, setStartOrStop] = React.useState(\"Stop\");\n//   const [showAlert, setShowAlert] = useState(false); // State to control alert visibilityqq\n\n//   const playBeep = () => {\n//     const audioStart = new Audio(require('../data/beepStart.mp3')) \n//     audioStart.play()\n//   };\n\n//   const textToSpeech = () => {\n//     const synth = window.speechSynthesis;\n//     const newUtterance = new SpeechSynthesisUtterance(transcript);\n//     synth.speak(newUtterance);\n//   }\n\n//   useEffect(() => {\n//     const handleKeyPress = (event) => {\n//       // Check if the pressed key is \"Q\" and if the dialog is not already open\n//       if (event.key === \"q\" && !open) {\n//         handleClickOpen();\n//       }\n//     };\n\n//     // Add event listener when the component mounts\n//     document.addEventListener(\"keydown\", handleKeyPress);\n\n//     // Remove event listener when the component unmounts\n//     return () => {\n//       document.removeEventListener(\"keydown\", handleKeyPress);\n//     };\n//   }, [open]); \n\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n\n//   const handleClickOpen = () => {\n//     const token = Cookies.get(\"jwtToken\");\n//     if (!token || !tokenUsable(token)) {\n//       setShowAlert(true); // Set showAlert to true to show the alert\n//       return;\n//     }\n\n//     SpeechRecognition.startListening({continuous:true});\n//     playBeep();\n//     setOpen(true);\n//   };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//     SpeechRecognition.stopListening()\n//     setResponse(\"\")\n//     resetTranscript();\n//     setStartOrStop(\"Stop\")\n//   };\n\n//   const handleAnotherQuestion = () => {\n//     setResponse(\"\")\n//     resetTranscript();\n//   }\n\n//   const handleReset = () => {\n//     resetTranscript();\n//     SpeechRecognition.startListening({continuous:true});\n//     setStartOrStop(\"Stop\");\n//     playBeep();\n//   }\n\n//   const handleStartStop = () => {\n//     if (startOrStop === \"Stop\"){\n//       SpeechRecognition.stopListening()\n//       setStartOrStop(\"Start\")\n//     }\n//     else{\n//       SpeechRecognition.startListening({continuous:true})\n//       setStartOrStop(\"Stop\")\n//     }\n\n//   }\n\n//   const handleQuestion = () => {\n//     setLoading(true);\n//     const token = Cookies.get(\"jwtToken\");\n//     // Define the API endpoint where you want to send the POST request\n//     const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n//     console.log(\"This is my props id\", props.videoID);\n//     const postData = {\n//       id: props.videoID,\n//       question: transcript,\n//       currentTime: props.timeStamp,\n//       jwt: token,\n//     };\n\n//     axios\n//       .post(apiUrl, postData)\n//       .then((response) => {\n//         // Handle the successful response\n//         console.log(\"Response:\", response.data);\n//         const synth = window.speechSynthesis;\n//         const newUtterance = new SpeechSynthesisUtterance(\"Response: \"+ response.data.answer);\n//         synth.speak(newUtterance);\n//         setResponse(response.data.answer);\n//         setLoading(false);\n//       })\n//       .catch((error) => {\n//         // Handle errors, if any\n//         console.error(\"Error:\", error);\n//       });\n//   };\n\n//   return (\n//     <React.Fragment>\n//       <Button\n//         sx={{\n//           backgroundColor: \"secondary.main\",\n//           color: \"white\",\n//           width: \"100%\",\n//           marginTop: \"10px\",\n//         }}\n//         className=\"category-btn\"\n//         onClick={handleClickOpen}\n//       >\n//         Ask question at {formatTime(props.timeStamp)}\n//       </Button>\n//       {(loading || response) && (\n//         <Dialog\n//           open={open}\n//           onClose={handleClose}\n//           fullWidth\n//           sx={{ textAlign: \"center\" }}\n//         >\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>\n//             {!response ? \"Retrieving Response\" : \"Response\"}\n//           </DialogTitle>\n//           <DialogContent>\n//             {loading && <CircularProgress />}\n//             {response && <DialogContentText>Response: {response}</DialogContentText>}\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleAnotherQuestion}\n//             >\n//               Ask another question\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n\n//       {!loading && !response && (\n//         <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>Ask Your Question</DialogTitle>\n//           <DialogContent>\n//             <TextField\n//               id=\"outlined-textarea\"\n//               label=\"Your Question\"\n//               placeholder=\"Your question will be visible here\"\n//               multiline\n//               value={transcript}\n//               fullWidth\n//               disabled\n//               sx={{ margin: \"20px 0\" }}\n//             />\n//             <ButtonGroup aria-label=\"Buttons to control speech recognition\">\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 aria-label = \"This is a button for start or stopping the speech to text\"\n//                 className=\"category-btn\"\n//                 onClick={handleStartStop}\n//               >\n//                 {startOrStop}\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={textToSpeech}\n//               >\n//                 Text To Speech\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={handleReset}\n//               >\n//                 Reset Question\n//               </Button>\n//             </ButtonGroup>\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               onClick={handleQuestion}\n//             >\n//               Submit Question\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n//     </React.Fragment>\n//   );\n// };\n\n// export default AskAI;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}