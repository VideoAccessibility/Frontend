{"ast":null,"code":"var _jsxFileName = \"/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/AskAI.jsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AskAI = () => {\n  _s();\n  const [open, setOpen] = React.useState(false);\n  const [userInput, setUserInput] = React.useState('');\n  const [listening, setListening] = React.useState(false);\n  const {\n    resetTranscript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleInputChange = e => {\n    setUserInput(e.target.value);\n  };\n  const handleStartListening = () => {\n    SpeechRecognition.startListening();\n    setListening(true);\n  };\n  const handleStopListening = () => {\n    SpeechRecognition.stopListening();\n    setListening(false);\n  };\n  const handleResetTranscript = () => {\n    resetTranscript();\n    setUserInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: handleClickOpen,\n      children: \"Ask InfoBot at (add the frame)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Ask Infobot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"To use the speech function, click on the start speaking button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          label: \"Your Question\",\n          variant: \"outlined\",\n          value: userInput || '',\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Microphone: \", listening ? 'on' : 'off']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStartListening,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStopListening,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleResetTranscript,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => handleClose(userInput),\n          children: \"Subscribe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(AskAI, \"fUx2ueEHYi+5JBIgZ9Hjpau6RP0=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = AskAI;\nexport default AskAI;\n\n// import * as React from 'react';\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n// import Button from '@mui/material/Button';\n// import TextField from '@mui/material/TextField';\n// import Dialog from '@mui/material/Dialog';\n// import DialogActions from '@mui/material/DialogActions';\n// import DialogContent from '@mui/material/DialogContent';\n// import DialogContentText from '@mui/material/DialogContentText';\n// import DialogTitle from '@mui/material/DialogTitle';\n\n// const AskAI = () => {\n//   const [open, setOpen] = React.useState(false);\n\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition\n//   } = useSpeechRecognition();\n\n//   const handleClickOpen = () => {\n//     setOpen(true);\n//   };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//   };\n\n//   return (\n//     <React.Fragment>\n//       <Button variant=\"outlined\" onClick={handleClickOpen}>\n//         Ask InfoBot at (add the frame)\n//       </Button>\n//       <Dialog open={open} onClose={handleClose}>\n//         <DialogTitle>Ask Infobot</DialogTitle>\n//         <DialogContent>\n//           <DialogContentText>\n//             To use the speech function, click on the start speaking button\n//           </DialogContentText>\n//           <TextField\n//           fullWidth\n//           multiline\n//           label=\"Your Question\"\n//           variant=\"outlined\"\n//           value={transcript}\n//           />\n//           <p>Microphone: {listening ? 'on' : 'off'}</p>\n//           <button onClick={SpeechRecognition.startListening}>Start</button>\n//           <button onClick={SpeechRecognition.stopListening}>Stop</button>\n//           <button onClick={resetTranscript}>Reset</button>\n//         </DialogContent>\n//         <DialogActions>\n//           <Button onClick={handleClose}>Cancel</Button>\n//           <Button onClick={handleClose}>Subscribe</Button>\n//         </DialogActions>\n//       </Dialog>\n//     </React.Fragment>\n//   );\n// }\n\n// export default AskAI\n\n// // This is the the alert box that opens when a user wants to ask a questions regarding a scene of a video\n// import React from 'react';\n// import Swal from 'sweetalert2';\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import {Button,  DialogContent, DialogContentText, DialogActions} from \"@mui/material\";\n// import KeyboardVoiceIcon from '@mui/icons-material/KeyboardVoice';\n\n// const AskAI = (props) => {\n//   (async () => {\n\n//     const { value: text } = await Swal.fire({\n//       input: 'textarea',\n//       inputLabel: 'Type in your question regarding the frame',\n//       inputPlaceholder: 'Type your question here...',\n//       icon: 'question',\n//       inputAttributes: {\n//         'aria-label': 'Type the question you want to ask about the frame here'\n//       },\n//       showCancelButton: false,\n//       confirmButtonText: 'Submit Question',\n//       cancelButtonText: 'Cancel',\n//     })\n\n//     if (text) {\n//       // Swal.fire(text)\n//       const token = Cookies.get(\"jwtToken\");\n//       // Define the API endpoint where you want to send the POST request\n//       const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n//       console.log(\"This is my props id\", props.videoID)\n//       const postData = {\n//         \"id\": props.videoID,\n//         \"question\":text,\n//         \"currentTime\": props.timeStamp,\n//         \"jwt\":token\n//       };\n\n//       axios\n//         .post(apiUrl, postData)\n//         .then((response) => {\n//           // Handle the successful response\n//           console.log(\"Response:\", response.data);\n\n//         })\n//         .catch((error) => {\n//           // Handle errors, if any\n//           console.error(\"Error:\", error);\n//         });\n//     }\n\n//     })()\n//   return (\n//     <div>\n//      { props.parentCallback()}\n//         {/* <DialogContent>\n//         <KeyboardVoiceIcon\n//             sx={{ fontSize: \"70px\", backgroundColor:\"#1D5B79\", color: \"#EF6262\", ml: \"5px\", borderRadius:\"100%\" , padding:\"20px\", margin: \"20px\"}}\n//         />\n//           <DialogContentText id=\"alert-dialog-description\" justifyContent={\"center\"}>\n//             Ask your questions regarding the frame here\n//           </DialogContentText>\n//         </DialogContent>\n//         <DialogActions>\n//         </DialogActions> */}\n//     </div>\n//   );\n// }\n\n// export default AskAI\nvar _c;\n$RefreshReg$(_c, \"AskAI\");","map":{"version":3,"names":["React","SpeechRecognition","useSpeechRecognition","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","jsxDEV","_jsxDEV","AskAI","_s","open","setOpen","useState","userInput","setUserInput","listening","setListening","resetTranscript","browserSupportsSpeechRecognition","handleClickOpen","handleClose","handleInputChange","e","target","value","handleStartListening","startListening","handleStopListening","stopListening","handleResetTranscript","Fragment","children","variant","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onClose","fullWidth","multiline","label","onChange","_c","$RefreshReg$"],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/AskAI.jsx"],"sourcesContent":["import * as React from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nconst AskAI = () => {\n  const [open, setOpen] = React.useState(false);\n  const [userInput, setUserInput] = React.useState('');\n  const [listening, setListening] = React.useState(false);\n\n  const {\n    resetTranscript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleInputChange = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const handleStartListening = () => {\n    SpeechRecognition.startListening();\n    setListening(true);\n  };\n\n  const handleStopListening = () => {\n    SpeechRecognition.stopListening();\n    setListening(false);\n  };\n\n  const handleResetTranscript = () => {\n    resetTranscript();\n    setUserInput('');\n  };\n\n  return (\n    <React.Fragment>\n      <Button variant=\"outlined\" onClick={handleClickOpen}>\n        Ask InfoBot at (add the frame)\n      </Button>\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle>Ask Infobot</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            To use the speech function, click on the start speaking button\n          </DialogContentText>\n          <TextField\n            fullWidth\n            multiline\n            label=\"Your Question\"\n            variant=\"outlined\"\n            value={userInput || ''}\n            onChange={handleInputChange}\n          />\n          <p>Microphone: {listening ? 'on' : 'off'}</p>\n          <button onClick={handleStartListening}>Start</button>\n          <button onClick={handleStopListening}>Stop</button>\n          <button onClick={handleResetTranscript}>Reset</button>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={() => handleClose(userInput)}>Subscribe</Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  );\n};\n\nexport default AskAI;\n\n\n\n\n// import * as React from 'react';\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n// import Button from '@mui/material/Button';\n// import TextField from '@mui/material/TextField';\n// import Dialog from '@mui/material/Dialog';\n// import DialogActions from '@mui/material/DialogActions';\n// import DialogContent from '@mui/material/DialogContent';\n// import DialogContentText from '@mui/material/DialogContentText';\n// import DialogTitle from '@mui/material/DialogTitle';\n\n\n// const AskAI = () => {\n//   const [open, setOpen] = React.useState(false);\n\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition\n//   } = useSpeechRecognition();\n  \n\n//   const handleClickOpen = () => {\n//     setOpen(true);\n//   };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//   };\n\n//   return (\n//     <React.Fragment>\n//       <Button variant=\"outlined\" onClick={handleClickOpen}>\n//         Ask InfoBot at (add the frame)\n//       </Button>\n//       <Dialog open={open} onClose={handleClose}>\n//         <DialogTitle>Ask Infobot</DialogTitle>\n//         <DialogContent>\n//           <DialogContentText>\n//             To use the speech function, click on the start speaking button\n//           </DialogContentText>\n//           <TextField\n//           fullWidth\n//           multiline\n//           label=\"Your Question\"\n//           variant=\"outlined\"\n//           value={transcript}\n//           />\n//           <p>Microphone: {listening ? 'on' : 'off'}</p>\n//           <button onClick={SpeechRecognition.startListening}>Start</button>\n//           <button onClick={SpeechRecognition.stopListening}>Stop</button>\n//           <button onClick={resetTranscript}>Reset</button>\n//         </DialogContent>\n//         <DialogActions>\n//           <Button onClick={handleClose}>Cancel</Button>\n//           <Button onClick={handleClose}>Subscribe</Button>\n//         </DialogActions>\n//       </Dialog>\n//     </React.Fragment>\n//   );\n// }\n\n// export default AskAI\n\n// // This is the the alert box that opens when a user wants to ask a questions regarding a scene of a video\n// import React from 'react';\n// import Swal from 'sweetalert2';\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import {Button,  DialogContent, DialogContentText, DialogActions} from \"@mui/material\";\n// import KeyboardVoiceIcon from '@mui/icons-material/KeyboardVoice';\n\n// const AskAI = (props) => {\n//   (async () => {\n\n//     const { value: text } = await Swal.fire({\n//       input: 'textarea',\n//       inputLabel: 'Type in your question regarding the frame',\n//       inputPlaceholder: 'Type your question here...',\n//       icon: 'question',\n//       inputAttributes: {\n//         'aria-label': 'Type the question you want to ask about the frame here'\n//       },\n//       showCancelButton: false,\n//       confirmButtonText: 'Submit Question',\n//       cancelButtonText: 'Cancel',\n//     })\n    \n//     if (text) {\n//       // Swal.fire(text)\n//       const token = Cookies.get(\"jwtToken\");\n//       // Define the API endpoint where you want to send the POST request\n//       const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n//       console.log(\"This is my props id\", props.videoID)\n//       const postData = {\n//         \"id\": props.videoID,\n//         \"question\":text,\n//         \"currentTime\": props.timeStamp,\n//         \"jwt\":token\n//       };\n  \n//       axios\n//         .post(apiUrl, postData)\n//         .then((response) => {\n//           // Handle the successful response\n//           console.log(\"Response:\", response.data);\n\n//         })\n//         .catch((error) => {\n//           // Handle errors, if any\n//           console.error(\"Error:\", error);\n//         });\n//     }\n    \n//     })()\n//   return (\n//     <div>\n//      { props.parentCallback()}\n//         {/* <DialogContent>\n//         <KeyboardVoiceIcon\n//             sx={{ fontSize: \"70px\", backgroundColor:\"#1D5B79\", color: \"#EF6262\", ml: \"5px\", borderRadius:\"100%\" , padding:\"20px\", margin: \"20px\"}}\n//         />\n//           <DialogContentText id=\"alert-dialog-description\" justifyContent={\"center\"}>\n//             Ask your questions regarding the frame here\n//           </DialogContentText>\n//         </DialogContent>\n//         <DialogActions>\n//         </DialogActions> */}\n//     </div>\n//   );\n// }\n\n// export default AskAI"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}