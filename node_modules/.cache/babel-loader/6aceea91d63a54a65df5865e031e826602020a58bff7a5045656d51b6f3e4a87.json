{"ast":null,"code":"var _jsxFileName = \"/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/Player.jsx\";\nimport React, { useState, useRef } from 'react';\nimport ReactPlayer from 'react-player';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Player = () => {\n  return /*#__PURE__*/_jsxDEV(ReactPlayer, {\n    url: \"./videos/18.mp4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n  // const [isPlaying, setIsPlaying] = useState(false);\n  // const [progress, setProgress] = useState(0);\n  // const videoRef = useRef(null);\n\n  // const togglePlay = () => {\n  //     if (isPlaying) {\n  //         videoRef.current.pause();\n  //     } else {\n  //         videoRef.current.play();\n  //     }\n  //     setIsPlaying(!isPlaying);\n  // };\n\n  // const handleProgress = () => {\n  //     const duration = videoRef.current.duration;\n  //     const currentTime = videoRef.current.currentTime;\n  //     const progress = (currentTime / duration) * 100;\n  //     setProgress(progress);\n  // };\n\n  // return (\n  //     <div>\n  //         <video\n  //             onTimeUpdate={handleProgress}\n  //             ref={videoRef}\n  //             width=\"100%\"\n  //             height=\"100%\"\n  //             controls\n  //         >\n  //             <source src=\"videos/19.mp4\" type=\"video/mp4\" />\n  //         </video>\n\n  //         <div>\n  //             <button onClick={togglePlay}>\n  //                 {isPlaying ? \"Pause\" : \"Play\"}\n  //             </button>\n  //             <progress value={progress} max=\"100\" />\n  //         </div>\n  //     </div>\n  // )\n};\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useRef","ReactPlayer","jsxDEV","_jsxDEV","Player","url","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/Player.jsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport ReactPlayer from 'react-player'\n\nconst Player = () => {\n    return(\n    <ReactPlayer url='./videos/18.mp4' />\n    )\n    // const [isPlaying, setIsPlaying] = useState(false);\n    // const [progress, setProgress] = useState(0);\n    // const videoRef = useRef(null);\n\n    // const togglePlay = () => {\n    //     if (isPlaying) {\n    //         videoRef.current.pause();\n    //     } else {\n    //         videoRef.current.play();\n    //     }\n    //     setIsPlaying(!isPlaying);\n    // };\n\n    // const handleProgress = () => {\n    //     const duration = videoRef.current.duration;\n    //     const currentTime = videoRef.current.currentTime;\n    //     const progress = (currentTime / duration) * 100;\n    //     setProgress(progress);\n    // };\n\n    // return (\n    //     <div>\n    //         <video\n    //             onTimeUpdate={handleProgress}\n    //             ref={videoRef}\n    //             width=\"100%\"\n    //             height=\"100%\"\n    //             controls\n    //         >\n    //             <source src=\"videos/19.mp4\" type=\"video/mp4\" />\n    //         </video>\n\n    //         <div>\n    //             <button onClick={togglePlay}>\n    //                 {isPlaying ? \"Pause\" : \"Play\"}\n    //             </button>\n    //             <progress value={progress} max=\"100\" />\n    //         </div>\n    //     </div>\n    // )\n}\n\nexport default Player;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAOC,WAAW,MAAM,cAAc;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACjB,oBACAD,OAAA,CAACF,WAAW;IAACI,GAAG,EAAC;EAAiB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAErC;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ,CAAC;AAAAC,EAAA,GA5CKN,MAAM;AA8CZ,eAAeA,MAAM;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}