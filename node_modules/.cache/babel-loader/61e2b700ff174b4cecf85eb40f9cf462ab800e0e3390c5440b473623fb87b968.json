{"ast":null,"code":"import axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport { jwtDecode } from 'jwt-decode';\nfunction formatTime(seconds) {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor(seconds % 3600 / 60);\n  const remainingSeconds = seconds % 60;\n  const formattedHours = hours.toString().padStart(2, '0');\n  const formattedMinutes = minutes.toString().padStart(2, '0');\n  const formattedSeconds = remainingSeconds.toString().padStart(2, '0');\n  if (hours === 0) {\n    return `${formattedMinutes}:${formattedSeconds}`;\n  }\n  return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n}\n\n// export default {formatTime};\n\nfunction tokenUsable(token) {\n  // User is not logged in, display Material-UI Alert\n  const decodedToken = jwtDecode(token);\n  const currentTime = Date.now() / 1000; // Convert milliseconds to seconds\n\n  // Check if the token is not expired\n  return decodedToken.exp > currentTime;\n}\nexport function ensureVideoUrlFormat(url) {\n  // Check if url is null or undefined\n  if (url == null) {\n    console.error(\"Error: URL is null or undefined\");\n    return null; // Return null in case of error\n  }\n\n  // Check if the URL already starts with \"videos/\"\n  if (!url.startsWith(\"videos/\")) {\n    // If not, prepend \"videos/\" to the URL\n    url = \"videos/\" + url;\n  }\n  return url;\n}\nexport function transformPath(path) {\n  if (path) {\n    // If the path does not contain \"/video\", add it to the path\n    if (!path.includes(\"videos\")) {\n      path = \"videos/\" + path;\n    }\n    // Replace the file extension with \".png\"\n    return \"http://127.0.0.1:8000/\" + path.replace(/\\.mp4$/, '.png');\n  } else {\n    // Handle the case where path is null or undefined\n    return \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/49/A_black_image.jpg/640px-A_black_image.jpg\";\n  }\n}\n\n// export default {tokenUsable, formatTime, ensureVideoUrlFormat};","map":{"version":3,"names":["axios","Cookies","jwtDecode","formatTime","seconds","hours","Math","floor","minutes","remainingSeconds","formattedHours","toString","padStart","formattedMinutes","formattedSeconds","tokenUsable","token","decodedToken","currentTime","Date","now","exp","ensureVideoUrlFormat","url","console","error","startsWith","transformPath","path","includes","replace"],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/utils/functions.js"],"sourcesContent":["import axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport {jwtDecode} from 'jwt-decode';\n\nfunction formatTime(seconds) {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const remainingSeconds = seconds % 60;\n\n  const formattedHours = hours.toString().padStart(2, '0');\n  const formattedMinutes = minutes.toString().padStart(2, '0');\n  const formattedSeconds = remainingSeconds.toString().padStart(2, '0');\n\n  if (hours === 0)\n  {\n    return `${formattedMinutes}:${formattedSeconds}`;\n  }\n\n  return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n}\n\n// export default {formatTime};\n\n\nfunction tokenUsable(token){\n        // User is not logged in, display Material-UI Alert\n        const decodedToken = jwtDecode(token);\n        const currentTime = Date.now() / 1000; // Convert milliseconds to seconds\n    \n        // Check if the token is not expired\n        return decodedToken.exp > currentTime;\n\n}\n\nexport function ensureVideoUrlFormat(url) {\n  // Check if url is null or undefined\n  if (url == null) {\n      console.error(\"Error: URL is null or undefined\");\n      return null; // Return null in case of error\n  }\n\n  // Check if the URL already starts with \"videos/\"\n  if (!url.startsWith(\"videos/\")) {\n      // If not, prepend \"videos/\" to the URL\n      url = \"videos/\" + url;\n  }\n  return url;\n}\n\nexport function transformPath(path) {\n  if (path) {\n    // If the path does not contain \"/video\", add it to the path\n    if (!path.includes(\"videos\")) {\n      path = \"videos/\" + path;\n    }\n    // Replace the file extension with \".png\"\n    return \"http://127.0.0.1:8000/\" + path.replace(/\\.mp4$/, '.png');\n  } else {\n    // Handle the case where path is null or undefined\n    return \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/49/A_black_image.jpg/640px-A_black_image.jpg\";\n  }\n}\n\n// export default {tokenUsable, formatTime, ensureVideoUrlFormat};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAAQC,SAAS,QAAO,YAAY;AAEpC,SAASC,UAAUA,CAACC,OAAO,EAAE;EAC3B,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,IAAI,CAAC;EACxC,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEH,OAAO,GAAG,IAAI,GAAI,EAAE,CAAC;EACjD,MAAMK,gBAAgB,GAAGL,OAAO,GAAG,EAAE;EAErC,MAAMM,cAAc,GAAGL,KAAK,CAACM,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACxD,MAAMC,gBAAgB,GAAGL,OAAO,CAACG,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC5D,MAAME,gBAAgB,GAAGL,gBAAgB,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAErE,IAAIP,KAAK,KAAK,CAAC,EACf;IACE,OAAQ,GAAEQ,gBAAiB,IAAGC,gBAAiB,EAAC;EAClD;EAEA,OAAQ,GAAEJ,cAAe,IAAGG,gBAAiB,IAAGC,gBAAiB,EAAC;AACpE;;AAEA;;AAGA,SAASC,WAAWA,CAACC,KAAK,EAAC;EACnB;EACA,MAAMC,YAAY,GAAGf,SAAS,CAACc,KAAK,CAAC;EACrC,MAAME,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;;EAEvC;EACA,OAAOH,YAAY,CAACI,GAAG,GAAGH,WAAW;AAE7C;AAEA,OAAO,SAASI,oBAAoBA,CAACC,GAAG,EAAE;EACxC;EACA,IAAIA,GAAG,IAAI,IAAI,EAAE;IACbC,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAC;IAChD,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA;EACA,IAAI,CAACF,GAAG,CAACG,UAAU,CAAC,SAAS,CAAC,EAAE;IAC5B;IACAH,GAAG,GAAG,SAAS,GAAGA,GAAG;EACzB;EACA,OAAOA,GAAG;AACZ;AAEA,OAAO,SAASI,aAAaA,CAACC,IAAI,EAAE;EAClC,IAAIA,IAAI,EAAE;IACR;IACA,IAAI,CAACA,IAAI,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;MAC5BD,IAAI,GAAG,SAAS,GAAGA,IAAI;IACzB;IACA;IACA,OAAO,wBAAwB,GAAGA,IAAI,CAACE,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC;EAClE,CAAC,MAAM;IACL;IACA,OAAO,qGAAqG;EAC9G;AACF;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}