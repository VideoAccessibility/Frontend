{"ast":null,"code":"var _jsxFileName = \"/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/Scene.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Card, CardContent, Typography, Button, TextField, Dialog, DialogActions, DialogContent, InputLabel, FormControl, MenuItem, Select } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fakeDescriptions = [{\n  id: 1,\n  timestamp: '00:05',\n  userId: 1,\n  description: 'Description 1 by User 1'\n}, {\n  id: 2,\n  timestamp: '01:30',\n  userId: 2,\n  description: 'Description 2 by User 2'\n}\n// Add more fake descriptions as needed\n];\n\nconst fakeUsers = [{\n  id: 1,\n  name: 'User 1'\n}, {\n  id: 2,\n  name: 'User 2'\n}\n// Add more users as needed\n];\n\nconst DescriptionCard = ({\n  descriptionData,\n  currentUser,\n  onDescriptionUpdate\n}) => {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedDescription, setEditedDescription] = useState(descriptionData.description);\n  const handleEditClick = () => {\n    setIsEditing(true);\n  };\n  const handleSaveClick = () => {\n    console.log('Description updated:', editedDescription);\n    setIsEditing(false);\n    onDescriptionUpdate(descriptionData.id, editedDescription);\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    variant: \"outlined\",\n    style: {\n      marginBottom: '10px'\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [\"Timestamp: \", descriptionData.timestamp]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Created by: \", currentUser.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), isEditing ? /*#__PURE__*/_jsxDEV(TextField, {\n        multiline: true,\n        fullWidth: true,\n        variant: \"outlined\",\n        label: \"Edit Description\",\n        value: editedDescription,\n        onChange: e => setEditedDescription(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: descriptionData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px'\n        },\n        children: isEditing ? /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleSaveClick,\n            color: \"primary\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleEditClick,\n          color: \"primary\",\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(DescriptionCard, \"RKzOAkbLQY+G/7Hufvz3O5BTdfk=\");\n_c = DescriptionCard;\nconst Scene = () => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(fakeUsers[0]);\n  const handleUserChange = event => {\n    const userId = event.target.value;\n    const selectedUser = fakeUsers.find(user => user.id === userId);\n    setCurrentUser(selectedUser);\n  };\n  const handleDescriptionUpdate = (descriptionId, updatedDescription) => {\n    console.log(`Description ${descriptionId} updated:`, updatedDescription);\n    // Handle update logic here, e.g., API call to update the description\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        children: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        value: currentUser.id,\n        onChange: handleUserChange,\n        children: fakeUsers.map(user => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: user.id,\n          children: user.name\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), fakeDescriptions.filter(description => description.userId === currentUser.id).map(description => /*#__PURE__*/_jsxDEV(DescriptionCard, {\n      descriptionData: description,\n      currentUser: currentUser,\n      onDescriptionUpdate: handleDescriptionUpdate\n    }, description.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s2(Scene, \"wTdqULHGuASDIMA59ybRONLN164=\");\n_c2 = Scene;\nexport default Scene;\n\n// import {Grid } from \"@mui/material\";\n// import {SceneCards} from \"./\";\n// import sceneinfo from \"../data/sceneinfo\";\n\n// const Scene = (props) => {\n//   return (\n//     <Grid item xs={12} md={12}>\n//         {props.descriptions.map((item, idx) => (\n//             <SceneCards\n//             key = {idx}\n//             sceneNum = {idx+1}\n//             timeFrame = {item.time_stamp}\n//             screenText = \"Currently there is no on screen text, \"\n//             description = {item.descriptions}\n\n//             />\n//         ))}\n//     </Grid>\n//   )\n// }\n\n// export default Scene;\nvar _c, _c2;\n$RefreshReg$(_c, \"DescriptionCard\");\n$RefreshReg$(_c2, \"Scene\");","map":{"version":3,"names":["React","useState","Card","CardContent","Typography","Button","TextField","Dialog","DialogActions","DialogContent","InputLabel","FormControl","MenuItem","Select","jsxDEV","_jsxDEV","fakeDescriptions","id","timestamp","userId","description","fakeUsers","name","DescriptionCard","descriptionData","currentUser","onDescriptionUpdate","_s","isEditing","setIsEditing","editedDescription","setEditedDescription","handleEditClick","handleSaveClick","console","log","variant","style","marginBottom","children","fileName","_jsxFileName","lineNumber","columnNumber","multiline","fullWidth","label","value","onChange","e","target","marginTop","onClick","color","_c","Scene","_s2","setCurrentUser","handleUserChange","event","selectedUser","find","user","handleDescriptionUpdate","descriptionId","updatedDescription","map","filter","_c2","$RefreshReg$"],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/Scene.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  TextField,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  InputLabel,\n  FormControl,\n  MenuItem,\n  Select,\n} from '@mui/material';\n\nconst fakeDescriptions = [\n  { id: 1, timestamp: '00:05', userId: 1, description: 'Description 1 by User 1' },\n  { id: 2, timestamp: '01:30', userId: 2, description: 'Description 2 by User 2' },\n  // Add more fake descriptions as needed\n];\n\nconst fakeUsers = [\n  { id: 1, name: 'User 1' },\n  { id: 2, name: 'User 2' },\n  // Add more users as needed\n];\n\nconst DescriptionCard = ({ descriptionData, currentUser, onDescriptionUpdate }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedDescription, setEditedDescription] = useState(descriptionData.description);\n\n  const handleEditClick = () => {\n    setIsEditing(true);\n  };\n\n  const handleSaveClick = () => {\n    console.log('Description updated:', editedDescription);\n    setIsEditing(false);\n    onDescriptionUpdate(descriptionData.id, editedDescription);\n  };\n\n  return (\n    <Card variant=\"outlined\" style={{ marginBottom: '10px' }}>\n      <CardContent>\n        <Typography variant=\"h6\">Timestamp: {descriptionData.timestamp}</Typography>\n        <Typography variant=\"body2\">Created by: {currentUser.name}</Typography>\n        {isEditing ? (\n          <TextField\n            multiline\n            fullWidth\n            variant=\"outlined\"\n            label=\"Edit Description\"\n            value={editedDescription}\n            onChange={(e) => setEditedDescription(e.target.value)}\n          />\n        ) : (\n          <Typography variant=\"body1\">{descriptionData.description}</Typography>\n        )}\n        <div style={{ marginTop: '10px' }}>\n          {isEditing ? (\n            <DialogActions>\n              <Button onClick={handleSaveClick} color=\"primary\">\n                Save\n              </Button>\n            </DialogActions>\n          ) : (\n            <Button onClick={handleEditClick} color=\"primary\">\n              Edit\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst Scene = () => {\n  const [currentUser, setCurrentUser] = useState(fakeUsers[0]);\n\n  const handleUserChange = (event) => {\n    const userId = event.target.value;\n    const selectedUser = fakeUsers.find((user) => user.id === userId);\n    setCurrentUser(selectedUser);\n  };\n\n  const handleDescriptionUpdate = (descriptionId, updatedDescription) => {\n    console.log(`Description ${descriptionId} updated:`, updatedDescription);\n    // Handle update logic here, e.g., API call to update the description\n  };\n\n  return (\n    <div>\n      <FormControl fullWidth style={{ marginBottom: '20px' }}>\n        <InputLabel>User</InputLabel>\n        <Select value={currentUser.id} onChange={handleUserChange}>\n          {fakeUsers.map((user) => (\n            <MenuItem key={user.id} value={user.id}>\n              {user.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      {fakeDescriptions\n        .filter((description) => description.userId === currentUser.id)\n        .map((description) => (\n          <DescriptionCard\n            key={description.id}\n            descriptionData={description}\n            currentUser={currentUser}\n            onDescriptionUpdate={handleDescriptionUpdate}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default Scene;\n\n\n\n// import {Grid } from \"@mui/material\";\n// import {SceneCards} from \"./\";\n// import sceneinfo from \"../data/sceneinfo\";\n\n\n// const Scene = (props) => {\n//   return (\n//     <Grid item xs={12} md={12}>\n//         {props.descriptions.map((item, idx) => (\n//             <SceneCards\n//             key = {idx}\n//             sceneNum = {idx+1}\n//             timeFrame = {item.time_stamp}\n//             screenText = \"Currently there is no on screen text, \"\n//             description = {item.descriptions}\n\n//             />\n//         ))}\n//     </Grid>\n//   )\n// }\n\n// export default Scene;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}