{"ast":null,"code":"var _jsxFileName = \"/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/AskAI.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { AlertBar } from \"./\";\n// import SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import Dialog from \"@mui/material/Dialog\";\n// import {\n//   ButtonGroup,\n//   DialogTitle,\n//   DialogContent,\n//   DialogActions,\n//   DialogContentText,\n//   CircularProgress,\n// } from \"@mui/material\";\n// // import SpeechRecognition, {\n// //   useSpeechRecognition,\n// // } from \"react-speech-recognition\";\n// import KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\n// import formatTime from \"../utils/functions\";\n// import tokenUsable from \"../utils/loggedIn\";\n\n// const AskAI = (props) => {\n//   const [open, setOpen] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const [response, setResponse] = useState(\"\");\n//   const [startOrStop, setStartOrStop] = useState(\"Stop\");\n//   const [showAlert, setShowAlert] = useState(false); // State to control alert visibility\n\n//   useEffect(() => {\n//     const handleKeyPress = (event) => {\n//       if (event.key === \"q\" && !open) {\n//         handleClickOpen();\n//       }\n//     };\n\n//     document.addEventListener(\"keydown\", handleKeyPress);\n\n//     return () => {\n//       document.removeEventListener(\"keydown\", handleKeyPress);\n//     };\n//   }, [open]);\n\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n\n// const handleClickOpen = () => {\n//   const token = Cookies.get(\"jwtToken\");\n//   if (!token || !tokenUsable(token)) {\n//     setShowAlert(true); // Set showAlert to true to show the alert\n//     return;\n//   }\n\n//   SpeechRecognition.startListening({ continuous: true });\n//   setOpen(true);\n// };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//     SpeechRecognition.stopListening();\n//     setResponse(\"\");\n//     resetTranscript();\n//     setStartOrStop(\"Stop\");\n//   };\n\n//   const handleAnotherQuestion = () => {\n//     setResponse(\"\");\n//     resetTranscript();\n//   };\n\n//   const handleReset = () => {\n//     resetTranscript();\n//     SpeechRecognition.startListening({ continuous: true });\n//     setStartOrStop(\"Stop\");\n//   };\n\n//   const handleStartStop = () => {\n//     if (startOrStop === \"Stop\") {\n//       SpeechRecognition.stopListening();\n//       setStartOrStop(\"Start\");\n//     } else {\n//       SpeechRecognition.startListening({ continuous: true });\n//       setStartOrStop(\"Stop\");\n//     }\n//   };\n\n//   const handleQuestion = () => {\n//     setLoading(true);\n//     const token = Cookies.get(\"jwtToken\");\n//     const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n//     const postData = {\n//       id: props.videoID,\n//       question: transcript,\n//       currentTime: props.timeStamp,\n//       jwt: token,\n//     };\n\n//     axios\n//       .post(apiUrl, postData)\n//       .then((response) => {\n//         const synth = window.speechSynthesis;\n//         const newUtterance = new SpeechSynthesisUtterance(\"Response: \" + response.data.answer);\n//         synth.speak(newUtterance);\n//         setResponse(response.data.answer);\n//         setLoading(false);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error:\", error);\n//       });\n//   };\n\n//   return (\n//     // <React.Fragment>\n\n//     //   <Button\n//     //     sx={{\n//     //       backgroundColor: \"secondary.main\",\n//     //       color: \"white\",\n//     //       width: \"100%\",\n//     //       marginTop: \"10px\",\n//     //     }}\n//     //     className=\"category-btn\"\n//     //     onClick={handleClickOpen}\n//     //   >\n//     //     Ask question at {formatTime(props.timeStamp)}\n//     //   </Button>\n//     //   {(loading || response) && (\n//     //     <Dialog\n//     //       open={open}\n//     //       onClose={handleClose}\n//     //       fullWidth\n//     //       sx={{ textAlign: \"center\" }}\n//     //     >\n//     //       {/* Dialog content */}\n//     //     </Dialog>\n//     //   )}\n//     //   {!loading && !response && (\n//     //     <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n//     //       {/* Dialog content */}\n//     //     </Dialog>\n//     //   )}\n//     // </React.Fragment>\n//     <>\n//     {showAlert && <AlertBar render ={showAlert} />} {/* Conditionally render the AlertBar */}\n//     <React.Fragment>\n//       <Button\n//         sx={{\n//           backgroundColor: \"secondary.main\",\n//           color: \"white\",\n//           width: \"100%\",\n//           marginTop: \"10px\",\n//         }}\n//         className=\"category-btn\"\n//         onClick={handleClickOpen}\n//       >\n//         Ask question at {formatTime(props.timeStamp)}\n//       </Button>\n//       {(loading || response) && (\n//         <Dialog\n//           open={open}\n//           onClose={handleClose}\n//           fullWidth\n//           sx={{ textAlign: \"center\" }}\n//         >\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>\n//             {!response ? \"Retrieving Response\" : \"Response\"}\n//           </DialogTitle>\n//           <DialogContent>\n//             {loading && <CircularProgress />}\n//             {response && <DialogContentText>Response: {response}</DialogContentText>}\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleAnotherQuestion}\n//             >\n//               Ask another question\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n\n//       {!loading && !response && (\n//         <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>Ask Your Question</DialogTitle>\n//           <DialogContent>\n//             <TextField\n//               id=\"outlined-textarea\"\n//               label=\"Your Question\"\n//               placeholder=\"Your question will be visible here\"\n//               multiline\n//               value={transcript}\n//               fullWidth\n//               disabled\n//               sx={{ margin: \"20px 0\" }}\n//             />\n//             <ButtonGroup aria-label=\"Buttons to control speech recognition\">\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 aria-label = \"This is a button for start or stopping the speech to text\"\n//                 className=\"category-btn\"\n//                 onClick={handleStartStop}\n//               >\n//                 {startOrStop}\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={textToSpeech}\n//               >\n//                 Text To Speech\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={handleReset}\n//               >\n//                 Reset Question\n//               </Button>\n//             </ButtonGroup>\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               onClick={handleQuestion}\n//             >\n//               Submit Question\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n//     </React.Fragment>\n//     </>\n//   );\n// };\n\n// export default AskAI;\n\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport { AlertBar } from './';\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport { ButtonGroup, DialogTitle, DialogContentText, CircularProgress } from \"@mui/material\";\nimport KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\nimport formatTime from \"../utils/functions\";\nimport tokenUsable from \"../utils/loggedIn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AskAI = props => {\n  _s();\n  const [open, setOpen] = React.useState(false);\n  const [loading, setLoading] = React.useState(false);\n  const [response, setResponse] = React.useState(\"\");\n  const [startOrStop, setStartOrStop] = React.useState(\"Stop\");\n  const [showAlert, setShowAlert] = useState(false); // State to control alert visibilityqq\n\n  const playBeep = () => {\n    const audioStart = new Audio(require('../data/beepStart.mp3'));\n    audioStart.play();\n  };\n  const textToSpeech = () => {\n    const synth = window.speechSynthesis;\n    const newUtterance = new SpeechSynthesisUtterance(transcript);\n    synth.speak(newUtterance);\n  };\n  useEffect(() => {\n    const handleKeyPress = event => {\n      // Check if the pressed key is \"Q\" and if the dialog is not already open\n      if (event.key === \"q\" && !open) {\n        handleClickOpen();\n      }\n    };\n\n    // Add event listener when the component mounts\n    document.addEventListener(\"keydown\", handleKeyPress);\n\n    // Remove event listener when the component unmounts\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [open]);\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  const handleClickOpen = () => {\n    const token = Cookies.get(\"jwtToken\");\n    if (!token || !tokenUsable(token)) {\n      setShowAlert(true); // Set showAlert to true to show the alert\n      return;\n    }\n    SpeechRecognition.startListening({\n      continuous: true\n    });\n    playBeep();\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n    SpeechRecognition.stopListening();\n    setResponse(\"\");\n    resetTranscript();\n    setStartOrStop(\"Stop\");\n  };\n  const handleAnotherQuestion = () => {\n    setResponse(\"\");\n    resetTranscript();\n  };\n  const handleReset = () => {\n    resetTranscript();\n    SpeechRecognition.startListening({\n      continuous: true\n    });\n    setStartOrStop(\"Stop\");\n    playBeep();\n  };\n  const handleStartStop = () => {\n    if (startOrStop === \"Stop\") {\n      SpeechRecognition.stopListening();\n      setStartOrStop(\"Start\");\n    } else {\n      SpeechRecognition.startListening({\n        continuous: true\n      });\n      setStartOrStop(\"Stop\");\n    }\n  };\n  const handleQuestion = () => {\n    setLoading(true);\n    const token = Cookies.get(\"jwtToken\");\n    // Define the API endpoint where you want to send the POST request\n    const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n    console.log(\"This is my props id\", props.videoID);\n    const postData = {\n      id: props.videoID,\n      question: transcript,\n      currentTime: props.timeStamp,\n      jwt: token\n    };\n    axios.post(apiUrl, postData).then(response => {\n      // Handle the successful response\n      console.log(\"Response:\", response.data);\n      const synth = window.speechSynthesis;\n      const newUtterance = new SpeechSynthesisUtterance(\"Response: \" + response.data.answer);\n      synth.speak(newUtterance);\n      setResponse(response.data.answer);\n      setLoading(false);\n    }).catch(error => {\n      // Handle errors, if any\n      console.error(\"Error:\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        backgroundColor: \"secondary.main\",\n        color: \"white\",\n        width: \"100%\",\n        marginTop: \"10px\"\n      },\n      className: \"category-btn\",\n      onClick: handleClickOpen,\n      children: [\"Ask question at \", formatTime(props.timeStamp)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this), (loading || response) && /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      fullWidth: true,\n      sx: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(KeyboardVoiceIcon, {\n        sx: {\n          fontSize: \"70px\",\n          backgroundColor: \"#1D5B79\",\n          color: listening ? \"#EF6262\" : \"white\",\n          ml: \"5px\",\n          borderRadius: \"100%\",\n          padding: \"20px\",\n          margin: \"20px auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: !response ? \"Retrieving Response\" : \"Response\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [loading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 25\n        }, this), response && /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: [\"Response: \", response]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          sx: {\n            backgroundColor: \"secondary.main\",\n            color: \"white\"\n          },\n          className: \"category-btn\",\n          onClick: handleAnotherQuestion,\n          children: \"Ask another question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          sx: {\n            backgroundColor: \"secondary.main\",\n            color: \"white\"\n          },\n          className: \"category-btn\",\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 9\n    }, this), !loading && !response && /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      sx: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(KeyboardVoiceIcon, {\n        sx: {\n          fontSize: \"70px\",\n          backgroundColor: \"#1D5B79\",\n          color: listening ? \"#EF6262\" : \"white\",\n          ml: \"5px\",\n          borderRadius: \"100%\",\n          padding: \"20px\",\n          margin: \"20px auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Ask Your Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          id: \"outlined-textarea\",\n          label: \"Your Question\",\n          placeholder: \"Your question will be visible here\",\n          multiline: true,\n          value: transcript,\n          fullWidth: true,\n          disabled: true,\n          sx: {\n            margin: \"20px 0\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n          \"aria-label\": \"Buttons to control speech recognition\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            sx: {\n              backgroundColor: \"secondary.main\",\n              color: \"white\"\n            },\n            \"aria-label\": \"This is a button for start or stopping the speech to text\",\n            className: \"category-btn\",\n            onClick: handleStartStop,\n            children: startOrStop\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            sx: {\n              backgroundColor: \"secondary.main\",\n              color: \"white\"\n            },\n            className: \"category-btn\",\n            onClick: textToSpeech,\n            children: \"Text To Speech\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            sx: {\n              backgroundColor: \"secondary.main\",\n              color: \"white\"\n            },\n            className: \"category-btn\",\n            onClick: handleReset,\n            children: \"Reset Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          sx: {\n            backgroundColor: \"secondary.main\",\n            color: \"white\"\n          },\n          className: \"category-btn\",\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          sx: {\n            backgroundColor: \"secondary.main\",\n            color: \"white\"\n          },\n          onClick: handleQuestion,\n          children: \"Submit Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 442,\n    columnNumber: 5\n  }, this);\n};\n_s(AskAI, \"xJzzWjQYNPTS9V+E520vhYMl97s=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = AskAI;\nexport default AskAI;\nvar _c;\n$RefreshReg$(_c, \"AskAI\");","map":{"version":3,"names":["React","useCallback","useState","useEffect","AlertBar","SpeechRecognition","useSpeechRecognition","axios","Cookies","Button","TextField","Dialog","DialogActions","DialogContent","ButtonGroup","DialogTitle","DialogContentText","CircularProgress","KeyboardVoiceIcon","formatTime","tokenUsable","jsxDEV","_jsxDEV","AskAI","props","_s","open","setOpen","loading","setLoading","response","setResponse","startOrStop","setStartOrStop","showAlert","setShowAlert","playBeep","audioStart","Audio","require","play","textToSpeech","synth","window","speechSynthesis","newUtterance","SpeechSynthesisUtterance","transcript","speak","handleKeyPress","event","key","handleClickOpen","document","addEventListener","removeEventListener","listening","resetTranscript","browserSupportsSpeechRecognition","token","get","startListening","continuous","handleClose","stopListening","handleAnotherQuestion","handleReset","handleStartStop","handleQuestion","apiUrl","console","log","videoID","postData","id","question","currentTime","timeStamp","jwt","post","then","data","answer","catch","error","Fragment","children","sx","backgroundColor","color","width","marginTop","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onClose","fullWidth","textAlign","fontSize","ml","borderRadius","padding","margin","label","placeholder","multiline","value","disabled","_c","$RefreshReg$"],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/AskAI.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { AlertBar } from \"./\";\n// import SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import Dialog from \"@mui/material/Dialog\";\n// import {\n//   ButtonGroup,\n//   DialogTitle,\n//   DialogContent,\n//   DialogActions,\n//   DialogContentText,\n//   CircularProgress,\n// } from \"@mui/material\";\n// // import SpeechRecognition, {\n// //   useSpeechRecognition,\n// // } from \"react-speech-recognition\";\n// import KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\n// import formatTime from \"../utils/functions\";\n// import tokenUsable from \"../utils/loggedIn\";\n\n// const AskAI = (props) => {\n//   const [open, setOpen] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const [response, setResponse] = useState(\"\");\n//   const [startOrStop, setStartOrStop] = useState(\"Stop\");\n//   const [showAlert, setShowAlert] = useState(false); // State to control alert visibility\n\n//   useEffect(() => {\n//     const handleKeyPress = (event) => {\n//       if (event.key === \"q\" && !open) {\n//         handleClickOpen();\n//       }\n//     };\n\n//     document.addEventListener(\"keydown\", handleKeyPress);\n\n//     return () => {\n//       document.removeEventListener(\"keydown\", handleKeyPress);\n//     };\n//   }, [open]);\n\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n\n  // const handleClickOpen = () => {\n  //   const token = Cookies.get(\"jwtToken\");\n  //   if (!token || !tokenUsable(token)) {\n  //     setShowAlert(true); // Set showAlert to true to show the alert\n  //     return;\n  //   }\n\n  //   SpeechRecognition.startListening({ continuous: true });\n  //   setOpen(true);\n  // };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//     SpeechRecognition.stopListening();\n//     setResponse(\"\");\n//     resetTranscript();\n//     setStartOrStop(\"Stop\");\n//   };\n\n//   const handleAnotherQuestion = () => {\n//     setResponse(\"\");\n//     resetTranscript();\n//   };\n\n//   const handleReset = () => {\n//     resetTranscript();\n//     SpeechRecognition.startListening({ continuous: true });\n//     setStartOrStop(\"Stop\");\n//   };\n\n//   const handleStartStop = () => {\n//     if (startOrStop === \"Stop\") {\n//       SpeechRecognition.stopListening();\n//       setStartOrStop(\"Start\");\n//     } else {\n//       SpeechRecognition.startListening({ continuous: true });\n//       setStartOrStop(\"Stop\");\n//     }\n//   };\n\n//   const handleQuestion = () => {\n//     setLoading(true);\n//     const token = Cookies.get(\"jwtToken\");\n//     const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n//     const postData = {\n//       id: props.videoID,\n//       question: transcript,\n//       currentTime: props.timeStamp,\n//       jwt: token,\n//     };\n\n//     axios\n//       .post(apiUrl, postData)\n//       .then((response) => {\n//         const synth = window.speechSynthesis;\n//         const newUtterance = new SpeechSynthesisUtterance(\"Response: \" + response.data.answer);\n//         synth.speak(newUtterance);\n//         setResponse(response.data.answer);\n//         setLoading(false);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error:\", error);\n//       });\n//   };\n\n//   return (\n//     // <React.Fragment>\n\n//     //   <Button\n//     //     sx={{\n//     //       backgroundColor: \"secondary.main\",\n//     //       color: \"white\",\n//     //       width: \"100%\",\n//     //       marginTop: \"10px\",\n//     //     }}\n//     //     className=\"category-btn\"\n//     //     onClick={handleClickOpen}\n//     //   >\n//     //     Ask question at {formatTime(props.timeStamp)}\n//     //   </Button>\n//     //   {(loading || response) && (\n//     //     <Dialog\n//     //       open={open}\n//     //       onClose={handleClose}\n//     //       fullWidth\n//     //       sx={{ textAlign: \"center\" }}\n//     //     >\n//     //       {/* Dialog content */}\n//     //     </Dialog>\n//     //   )}\n//     //   {!loading && !response && (\n//     //     <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n//     //       {/* Dialog content */}\n//     //     </Dialog>\n//     //   )}\n//     // </React.Fragment>\n//     <>\n//     {showAlert && <AlertBar render ={showAlert} />} {/* Conditionally render the AlertBar */}\n//     <React.Fragment>\n//       <Button\n//         sx={{\n//           backgroundColor: \"secondary.main\",\n//           color: \"white\",\n//           width: \"100%\",\n//           marginTop: \"10px\",\n//         }}\n//         className=\"category-btn\"\n//         onClick={handleClickOpen}\n//       >\n//         Ask question at {formatTime(props.timeStamp)}\n//       </Button>\n//       {(loading || response) && (\n//         <Dialog\n//           open={open}\n//           onClose={handleClose}\n//           fullWidth\n//           sx={{ textAlign: \"center\" }}\n//         >\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>\n//             {!response ? \"Retrieving Response\" : \"Response\"}\n//           </DialogTitle>\n//           <DialogContent>\n//             {loading && <CircularProgress />}\n//             {response && <DialogContentText>Response: {response}</DialogContentText>}\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleAnotherQuestion}\n//             >\n//               Ask another question\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n\n//       {!loading && !response && (\n//         <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>Ask Your Question</DialogTitle>\n//           <DialogContent>\n//             <TextField\n//               id=\"outlined-textarea\"\n//               label=\"Your Question\"\n//               placeholder=\"Your question will be visible here\"\n//               multiline\n//               value={transcript}\n//               fullWidth\n//               disabled\n//               sx={{ margin: \"20px 0\" }}\n//             />\n//             <ButtonGroup aria-label=\"Buttons to control speech recognition\">\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 aria-label = \"This is a button for start or stopping the speech to text\"\n//                 className=\"category-btn\"\n//                 onClick={handleStartStop}\n//               >\n//                 {startOrStop}\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={textToSpeech}\n//               >\n//                 Text To Speech\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={handleReset}\n//               >\n//                 Reset Question\n//               </Button>\n//             </ButtonGroup>\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               onClick={handleQuestion}\n//             >\n//               Submit Question\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n//     </React.Fragment>\n//     </>\n//   );\n// };\n\n// export default AskAI;\n\n\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport {AlertBar} from './';\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport {\n  ButtonGroup,\n  DialogTitle,\n  DialogContentText,\n  CircularProgress,\n} from \"@mui/material\";\nimport KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\nimport formatTime from \"../utils/functions\";\nimport tokenUsable from \"../utils/loggedIn\";\n\nconst AskAI = (props) => {\n  const [open, setOpen] = React.useState(false);\n  const [loading, setLoading] = React.useState(false);\n  const [response, setResponse] = React.useState(\"\");\n  const [startOrStop, setStartOrStop] = React.useState(\"Stop\");\n  const [showAlert, setShowAlert] = useState(false); // State to control alert visibilityqq\n\n  const playBeep = () => {\n    const audioStart = new Audio(require('../data/beepStart.mp3')) \n    audioStart.play()\n  };\n\n  const textToSpeech = () => {\n    const synth = window.speechSynthesis;\n    const newUtterance = new SpeechSynthesisUtterance(transcript);\n    synth.speak(newUtterance);\n  }\n\n  useEffect(() => {\n    const handleKeyPress = (event) => {\n      // Check if the pressed key is \"Q\" and if the dialog is not already open\n      if (event.key === \"q\" && !open) {\n        handleClickOpen();\n      }\n    };\n\n    // Add event listener when the component mounts\n    document.addEventListener(\"keydown\", handleKeyPress);\n\n    // Remove event listener when the component unmounts\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [open]); \n\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n  } = useSpeechRecognition();\n\n  const handleClickOpen = () => {\n    const token = Cookies.get(\"jwtToken\");\n    if (!token || !tokenUsable(token)) {\n      setShowAlert(true); // Set showAlert to true to show the alert\n      return;\n    }\n\n    SpeechRecognition.startListening({continuous:true});\n    playBeep();\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    SpeechRecognition.stopListening()\n    setResponse(\"\")\n    resetTranscript();\n    setStartOrStop(\"Stop\")\n  };\n\n  const handleAnotherQuestion = () => {\n    setResponse(\"\")\n    resetTranscript();\n  }\n\n  const handleReset = () => {\n    resetTranscript();\n    SpeechRecognition.startListening({continuous:true});\n    setStartOrStop(\"Stop\");\n    playBeep();\n  }\n\n  const handleStartStop = () => {\n    if (startOrStop === \"Stop\"){\n      SpeechRecognition.stopListening()\n      setStartOrStop(\"Start\")\n    }\n    else{\n      SpeechRecognition.startListening({continuous:true})\n      setStartOrStop(\"Stop\")\n    }\n\n  }\n\n  const handleQuestion = () => {\n    setLoading(true);\n    const token = Cookies.get(\"jwtToken\");\n    // Define the API endpoint where you want to send the POST request\n    const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n    console.log(\"This is my props id\", props.videoID);\n    const postData = {\n      id: props.videoID,\n      question: transcript,\n      currentTime: props.timeStamp,\n      jwt: token,\n    };\n\n    axios\n      .post(apiUrl, postData)\n      .then((response) => {\n        // Handle the successful response\n        console.log(\"Response:\", response.data);\n        const synth = window.speechSynthesis;\n        const newUtterance = new SpeechSynthesisUtterance(\"Response: \"+ response.data.answer);\n        synth.speak(newUtterance);\n        setResponse(response.data.answer);\n        setLoading(false);\n      })\n      .catch((error) => {\n        // Handle errors, if any\n        console.error(\"Error:\", error);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <Button\n        sx={{\n          backgroundColor: \"secondary.main\",\n          color: \"white\",\n          width: \"100%\",\n          marginTop: \"10px\",\n        }}\n        className=\"category-btn\"\n        onClick={handleClickOpen}\n      >\n        Ask question at {formatTime(props.timeStamp)}\n      </Button>\n      {(loading || response) && (\n        <Dialog\n          open={open}\n          onClose={handleClose}\n          fullWidth\n          sx={{ textAlign: \"center\" }}\n        >\n          <KeyboardVoiceIcon\n            sx={{\n              fontSize: \"70px\",\n              backgroundColor: \"#1D5B79\",\n              color: listening ? \"#EF6262\" : \"white\",\n              ml: \"5px\",\n              borderRadius: \"100%\",\n              padding: \"20px\",\n              margin: \"20px auto\",\n            }}\n          />\n          <DialogTitle>\n            {!response ? \"Retrieving Response\" : \"Response\"}\n          </DialogTitle>\n          <DialogContent>\n            {loading && <CircularProgress />}\n            {response && <DialogContentText>Response: {response}</DialogContentText>}\n          </DialogContent>\n          <DialogActions>\n            <Button\n              sx={{\n                backgroundColor: \"secondary.main\",\n                color: \"white\",\n              }}\n              className=\"category-btn\"\n              onClick={handleAnotherQuestion}\n            >\n              Ask another question\n            </Button>\n            <Button\n              sx={{\n                backgroundColor: \"secondary.main\",\n                color: \"white\",\n              }}\n              className=\"category-btn\"\n              onClick={handleClose}\n            >\n              Cancel\n            </Button>\n          </DialogActions>\n        </Dialog>\n      )}\n\n      {!loading && !response && (\n        <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n          <KeyboardVoiceIcon\n            sx={{\n              fontSize: \"70px\",\n              backgroundColor: \"#1D5B79\",\n              color: listening ? \"#EF6262\" : \"white\",\n              ml: \"5px\",\n              borderRadius: \"100%\",\n              padding: \"20px\",\n              margin: \"20px auto\",\n            }}\n          />\n          <DialogTitle>Ask Your Question</DialogTitle>\n          <DialogContent>\n            <TextField\n              id=\"outlined-textarea\"\n              label=\"Your Question\"\n              placeholder=\"Your question will be visible here\"\n              multiline\n              value={transcript}\n              fullWidth\n              disabled\n              sx={{ margin: \"20px 0\" }}\n            />\n            <ButtonGroup aria-label=\"Buttons to control speech recognition\">\n              <Button\n                sx={{\n                  backgroundColor: \"secondary.main\",\n                  color: \"white\",\n                }}\n                aria-label = \"This is a button for start or stopping the speech to text\"\n                className=\"category-btn\"\n                onClick={handleStartStop}\n              >\n                {startOrStop}\n              </Button>\n              <Button\n                sx={{\n                  backgroundColor: \"secondary.main\",\n                  color: \"white\",\n                }}\n                className=\"category-btn\"\n                onClick={textToSpeech}\n              >\n                Text To Speech\n              </Button>\n              <Button\n                sx={{\n                  backgroundColor: \"secondary.main\",\n                  color: \"white\",\n                }}\n                className=\"category-btn\"\n                onClick={handleReset}\n              >\n                Reset Question\n              </Button>\n            </ButtonGroup>\n          </DialogContent>\n          <DialogActions>\n            <Button\n              sx={{\n                backgroundColor: \"secondary.main\",\n                color: \"white\",\n              }}\n              className=\"category-btn\"\n              onClick={handleClose}\n            >\n              Cancel\n            </Button>\n            <Button\n              sx={{\n                backgroundColor: \"secondary.main\",\n                color: \"white\",\n              }}\n              onClick={handleQuestion}\n            >\n              Submit Question\n            </Button>\n          </DialogActions>\n        </Dialog>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default AskAI;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}