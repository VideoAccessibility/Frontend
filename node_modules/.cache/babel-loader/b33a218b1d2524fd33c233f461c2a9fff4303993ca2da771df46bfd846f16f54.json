{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nfunction useSpeechRecognition() {\n  _s();\n  const [transcript, setTranscript] = useState('');\n  const [listening, setListening] = useState(false);\n  const recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.lang = 'en-US';\n  useEffect(() => {\n    recognition.onstart = () => {\n      console.log('Speech recognition started');\n      setListening(true);\n    };\n    recognition.onresult = event => {\n      const currentTranscript = event.results[event.results.length - 1][0].transcript;\n      setTranscript(currentTranscript);\n    };\n    recognition.onend = () => {\n      console.log('Speech recognition ended');\n      setListening(false);\n    };\n    recognition.onerror = event => {\n      console.error('Speech recognition error occurred:', event.error);\n      setListening(false);\n    };\n    return () => {\n      recognition.stop();\n    };\n  }, []); // Empty dependency array ensures that this effect runs once after the initial render\n\n  const startListening = () => {\n    recognition.start();\n  };\n  const stopListening = () => {\n    recognition.stop();\n  };\n  return {\n    listening,\n    transcript,\n    startListening,\n    stopListening\n  };\n}\n_s(useSpeechRecognition, \"Fl1m2krd+GScCCC0ZvbFSlXRIWU=\");\nexport default useSpeechRecognition;\n\n// import React, { useEffect, useState } from \"react\";\n\n// let recognition: any = null;\n// if (\"webkitSpeechRecongition\" in window) {\n//   recognition = new window.SpeechRecognition();\n//   recognition.continuous = true;\n//   recognition.lang = \"en-US\";\n// }\n\n// const useSpeechRecognition = () => {\n//   const [text, setText] = useState(\"\");\n//   const [isListening, setIsListening] = useState(false);\n\n//   useEffect(() => {\n//     if (!recognition) return;\n\n//     recognition.onresult = (event) => {\n//       console.log(\"on result event: \", event);\n//       recognition.stop();\n//       setIsListening(false);\n//     };\n//   }, []);\n\n//   const startListening = () => {\n//     setText(\"\");\n//     setIsListening(true);\n//     recognition.start();\n//   }\n\n//   const stopListening = () => {\n//     setIsListening(false);\n//     recognition.stop();\n//   }\n\n//   return {\n//     text,\n//     isListening,\n//     startListening,\n//     stopListening,\n//     hasRecognition: !!recognition, \n//   }\n// };\n\n// export default useSpeechRecognition;","map":{"version":3,"names":["useState","useEffect","useSpeechRecognition","_s","transcript","setTranscript","listening","setListening","recognition","window","SpeechRecognition","continuous","lang","onstart","console","log","onresult","event","currentTranscript","results","length","onend","onerror","error","stop","startListening","start","stopListening"],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/hooks/useSpeechRecognition.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction useSpeechRecognition() {\n  const [transcript, setTranscript] = useState('');\n  const [listening, setListening] = useState(false);\n\n  const recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.lang = 'en-US';\n\n  useEffect(() => {\n    recognition.onstart = () => {\n      console.log('Speech recognition started');\n      setListening(true);\n    };\n\n    recognition.onresult = (event) => {\n      const currentTranscript = event.results[event.results.length - 1][0].transcript;\n      setTranscript(currentTranscript);\n    };\n\n    recognition.onend = () => {\n      console.log('Speech recognition ended');\n      setListening(false);\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Speech recognition error occurred:', event.error);\n      setListening(false);\n    };\n\n    return () => {\n      recognition.stop();\n    };\n  }, []); // Empty dependency array ensures that this effect runs once after the initial render\n\n  const startListening = () => {\n    recognition.start();\n  };\n\n  const stopListening = () => {\n    recognition.stop();\n  };\n\n  return {\n    listening,\n    transcript,\n    startListening,\n    stopListening,\n  };\n}\n\nexport default useSpeechRecognition;\n\n\n\n// import React, { useEffect, useState } from \"react\";\n\n// let recognition: any = null;\n// if (\"webkitSpeechRecongition\" in window) {\n//   recognition = new window.SpeechRecognition();\n//   recognition.continuous = true;\n//   recognition.lang = \"en-US\";\n// }\n\n// const useSpeechRecognition = () => {\n//   const [text, setText] = useState(\"\");\n//   const [isListening, setIsListening] = useState(false);\n\n//   useEffect(() => {\n//     if (!recognition) return;\n\n//     recognition.onresult = (event) => {\n//       console.log(\"on result event: \", event);\n//       recognition.stop();\n//       setIsListening(false);\n//     };\n//   }, []);\n\n//   const startListening = () => {\n//     setText(\"\");\n//     setIsListening(true);\n//     recognition.start();\n//   }\n\n//   const stopListening = () => {\n//     setIsListening(false);\n//     recognition.stop();\n//   }\n\n//   return {\n//     text,\n//     isListening,\n//     startListening,\n//     stopListening,\n//     hasRecognition: !!recognition, \n//   }\n// };\n\n// export default useSpeechRecognition;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMQ,WAAW,GAAG,IAAIC,MAAM,CAACC,iBAAiB,CAAC,CAAC;EAClDF,WAAW,CAACG,UAAU,GAAG,IAAI;EAC7BH,WAAW,CAACI,IAAI,GAAG,OAAO;EAE1BX,SAAS,CAAC,MAAM;IACdO,WAAW,CAACK,OAAO,GAAG,MAAM;MAC1BC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzCR,YAAY,CAAC,IAAI,CAAC;IACpB,CAAC;IAEDC,WAAW,CAACQ,QAAQ,GAAIC,KAAK,IAAK;MAChC,MAAMC,iBAAiB,GAAGD,KAAK,CAACE,OAAO,CAACF,KAAK,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAChB,UAAU;MAC/EC,aAAa,CAACa,iBAAiB,CAAC;IAClC,CAAC;IAEDV,WAAW,CAACa,KAAK,GAAG,MAAM;MACxBP,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvCR,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC;IAEDC,WAAW,CAACc,OAAO,GAAIL,KAAK,IAAK;MAC/BH,OAAO,CAACS,KAAK,CAAC,oCAAoC,EAAEN,KAAK,CAACM,KAAK,CAAC;MAChEhB,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC;IAED,OAAO,MAAM;MACXC,WAAW,CAACgB,IAAI,CAAC,CAAC;IACpB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3BjB,WAAW,CAACkB,KAAK,CAAC,CAAC;EACrB,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1BnB,WAAW,CAACgB,IAAI,CAAC,CAAC;EACpB,CAAC;EAED,OAAO;IACLlB,SAAS;IACTF,UAAU;IACVqB,cAAc;IACdE;EACF,CAAC;AACH;AAACxB,EAAA,CAhDQD,oBAAoB;AAkD7B,eAAeA,oBAAoB;;AAInC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}