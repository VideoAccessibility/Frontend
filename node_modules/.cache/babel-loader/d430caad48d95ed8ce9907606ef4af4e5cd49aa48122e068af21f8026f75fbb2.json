{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import {\n//   FormControl,\n//   InputLabel,\n//   Select,\n//   MenuItem,\n//   Paper,\n//   Grid,\n//   Button,\n//   Typography,\n// } from \"@mui/material\";\n// import StarIcon from \"@mui/icons-material/Star\";\n\n// const ChangeRating = ({ descriptions, parentCallback }) => {\n//   console.log(\"These are my props in change rating\", descriptions)\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [isChangeDescriptionClicked, setIsChangeDescriptionClicked] = useState(false);\n\n//   useEffect(() => {\n//     console.log(\"am I coming here?\")\n//     if (descriptions.length > 0) {\n//       // Extract unique usernames from descriptions\n//       const uniqueUsernames = Array.from(\n//         new Set(descriptions.map((description) => description.username))\n//       );\n//         console.log(\"these are my users\", uniqueUsernames)\n//       // Set the first username as the default selected user\n//       setSelectedUser(uniqueUsernames[0]);\n//     }\n//   }, [descriptions]);\n\n//   const handleUserChange = (event) => {\n//     const username = event.target.value;\n//     setSelectedUser(username);\n\n//     // Filter descriptions based on the selected username and pass them to the parent component\n//     const filteredDescriptions = descriptions.filter(\n//       (description) => description.username === username\n//     );\n//     //parentCallback(filteredDescriptions);\n//   };\n//   // const [starClicks, setStarClicks] = useState(selectedUser.starClicks);\n\n//   // const handleStarClick = () => {\n//   //   setStarClicks(selectedUser.starClicks + 1); // Increase star clicks\n//   //   // You can send the star click data to your API or perform other actions here\n//   // };\n\n//   return (\n//     <Paper\n//       variant=\"outlined\"\n//       sx={{ backgroundColor: \"primary.main\", padding: \"20px\", width: \"60%\" }}\n//     >\n//       <Grid\n//         container\n//         alignItems=\"center\"\n//         justifyContent=\"space-between\"\n//         sx={{ marginBottom: \"20px\" }}\n//       >\n//         <Grid item>\n//           <Typography variant=\"body1\" color=\"primary.dark\">\n//             Described by user: {selectedUser}\n//           </Typography>\n//           {/* <Typography variant=\"body2\" color=\"primary.dark\">\n//             <StarIcon\n//               color=\"secondary.main\"\n//               onClick={handleStarClick}\n//               style={{ cursor: \"pointer\" }}\n//             />\n//             {starClicks} People Rated\n//           </Typography> */}\n//         </Grid>\n//         <Grid item>\n//           <Button\n//             sx={{\n//               backgroundColor: \"secondary.main\",\n//               color: \"white\",\n//               width: \"100%\",\n//               marginTop: \"10px\",\n//             }}\n//             className=\"category-btn\"\n//             onClick={() =>\n//               setIsChangeDescriptionClicked(!isChangeDescriptionClicked)\n//             }\n//           >\n//             Change Description\n//           </Button>\n//         </Grid>\n//       </Grid>\n//       {isChangeDescriptionClicked && (\n//         <div>\n//           <hr />\n//           <Grid container spacing={2} style={{ marginTop: \"20px\" }}>\n//             <Grid item xs={12}>\n//               <FormControl fullWidth>\n//                 <InputLabel id=\"user-select-label\">Select User</InputLabel>\n//                 <Select\n//                   labelId=\"user-select-label\"\n//                   id=\"user-select\"\n//                   value={selectedUser}\n//                   onChange={handleUserChange}\n//                 >\n//                   {descriptions.length > 0 &&\n//                     Array.from(\n//                       new Set(\n//                         descriptions.map((description) => description.username)\n//                       )\n//                     ).map((username) => (\n//                       <MenuItem key={username} value={username}>\n//                         {username}\n//                       </MenuItem>\n//                     ))}\n//                 </Select>\n//               </FormControl>\n//             </Grid>\n//           </Grid>\n//         </div>\n//       )}\n//     </Paper>\n//   );\n// };\n\n// export default ChangeRating;\n\n// // import React, { useState } from \"react\";\n// // import {\n// //   FormControl,\n// //   InputLabel,\n// //   Select,\n// //   MenuItem,\n// //   Paper,\n// //   Grid,\n// //   Button,\n// //   Typography,\n// // } from \"@mui/material\";\n// // import StarIcon from \"@mui/icons-material/Star\";\n\n// // // const fakeUsers = [\n// // //   {\n// // //     id: 1,\n// // //     name: \"User 1\",\n// // //     description: \"Description 1\",\n// // //     rating: 3,\n// // //     starClicks: 5,\n// // //   },\n// // //   {\n// // //     id: 2,\n// // //     name: \"User 2\",\n// // //     description: \"Description 2\",\n// // //     rating: 4,\n// // //     starClicks: 8,\n// // //   },\n// // //   {\n// // //     id: 3,\n// // //     name: \"User 3\",\n// // //     description: \"Description 3\",\n// // //     rating: 5,\n// // //     starClicks: 12,\n// // //   },\n// // // ];\n\n// // const ChangeRating = () => {\n// //   const [selectedUser, setSelectedUser] = useState(fakeUsers[1]); // Default selected user\n// //   const [isChangeDescriptionClicked, setIsChangeDescriptionClicked] =\n// //     useState(false);\n// //   const [starClicks, setStarClicks] = useState(selectedUser.starClicks);\n\n// //   const handleUserChange = (event) => {\n// //     const userId = event.target.value;\n// //     const selected = fakeUsers.find((user) => user.id === userId);\n// //     setSelectedUser(selected);\n// //     setIsChangeDescriptionClicked(false); // Close the change description box when user changes\n// //   };\n\n// //   const handleStarClick = () => {\n// //     setStarClicks(selectedUser.starClicks + 1); // Increase star clicks\n// //     // You can send the star click data to your API or perform other actions here\n// //   };\n\n// //   return (\n// //     <Paper\n// //       variant=\"outlined\"\n// //       sx={{ backgroundColor: \"primary.main\", padding: \"20px\", width: \"60%\" }}\n// //     >\n// //       <Grid container alignItems=\"center\" justifyContent=\"space-between\" sx={{ marginBottom: \"20px\" }}>\n// //         <Grid item>\n// //           <Typography variant=\"body1\" color=\"primary.dark\">\n// //             Described By: {selectedUser.name}\n// //           </Typography>\n// //           <Typography variant=\"body2\" color=\"primary.dark\">\n// //             <StarIcon\n// //               color=\"secondary.main\"\n// //               onClick={handleStarClick}\n// //               style={{ cursor: \"pointer\" }}\n// //             />\n// //             {starClicks} People Rated\n// //           </Typography>\n// //         </Grid>\n// //         <Grid item>\n// //           <Button\n// //             sx={{\n// //               backgroundColor: \"secondary.main\",\n// //               color: \"white\",\n// //               width: \"100%\",\n// //               marginTop: \"10px\",\n// //             }}\n// //             className=\"category-btn\"\n// //             onClick={() =>\n// //               setIsChangeDescriptionClicked(!isChangeDescriptionClicked)\n// //             }\n// //           >\n// //             Change Description\n// //           </Button>\n// //         </Grid>\n// //       </Grid>\n// //       {isChangeDescriptionClicked && (\n// //         <div>\n// //         <hr/>\n// //         <Grid container spacing={2} style={{ marginTop: \"20px\" }}>\n// //           <Grid item xs={12}>\n// //             <FormControl fullWidth>\n// //               <InputLabel id=\"user-select-label\">Select User</InputLabel>\n// //               <Select\n// //                 labelId=\"user-select-label\"\n// //                 id=\"user-select\"\n// //                 value={selectedUser.id}\n// //                 onChange={handleUserChange}\n// //               >\n// //                 {fakeUsers.map((user) => (\n// //                   <MenuItem key={user.id} value={user.id}>\n// //                     {user.name}\n// //                   </MenuItem>\n// //                 ))}\n// //               </Select>\n// //             </FormControl>\n// //           </Grid>\n// //         </Grid>\n// //         </div>\n// //       )}\n\n// //     </Paper>\n// //   );\n// // };\n\n// // export default ChangeRating;","map":{"version":3,"names":[],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/ChangeRating.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import {\n//   FormControl,\n//   InputLabel,\n//   Select,\n//   MenuItem,\n//   Paper,\n//   Grid,\n//   Button,\n//   Typography,\n// } from \"@mui/material\";\n// import StarIcon from \"@mui/icons-material/Star\";\n\n// const ChangeRating = ({ descriptions, parentCallback }) => {\n//   console.log(\"These are my props in change rating\", descriptions)\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [isChangeDescriptionClicked, setIsChangeDescriptionClicked] = useState(false);\n\n//   useEffect(() => {\n//     console.log(\"am I coming here?\")\n//     if (descriptions.length > 0) {\n//       // Extract unique usernames from descriptions\n//       const uniqueUsernames = Array.from(\n//         new Set(descriptions.map((description) => description.username))\n//       );\n//         console.log(\"these are my users\", uniqueUsernames)\n//       // Set the first username as the default selected user\n//       setSelectedUser(uniqueUsernames[0]);\n//     }\n//   }, [descriptions]);\n\n//   const handleUserChange = (event) => {\n//     const username = event.target.value;\n//     setSelectedUser(username);\n\n//     // Filter descriptions based on the selected username and pass them to the parent component\n//     const filteredDescriptions = descriptions.filter(\n//       (description) => description.username === username\n//     );\n//     //parentCallback(filteredDescriptions);\n//   };\n//   // const [starClicks, setStarClicks] = useState(selectedUser.starClicks);\n\n//   // const handleStarClick = () => {\n//   //   setStarClicks(selectedUser.starClicks + 1); // Increase star clicks\n//   //   // You can send the star click data to your API or perform other actions here\n//   // };\n\n//   return (\n//     <Paper\n//       variant=\"outlined\"\n//       sx={{ backgroundColor: \"primary.main\", padding: \"20px\", width: \"60%\" }}\n//     >\n//       <Grid\n//         container\n//         alignItems=\"center\"\n//         justifyContent=\"space-between\"\n//         sx={{ marginBottom: \"20px\" }}\n//       >\n//         <Grid item>\n//           <Typography variant=\"body1\" color=\"primary.dark\">\n//             Described by user: {selectedUser}\n//           </Typography>\n//           {/* <Typography variant=\"body2\" color=\"primary.dark\">\n//             <StarIcon\n//               color=\"secondary.main\"\n//               onClick={handleStarClick}\n//               style={{ cursor: \"pointer\" }}\n//             />\n//             {starClicks} People Rated\n//           </Typography> */}\n//         </Grid>\n//         <Grid item>\n//           <Button\n//             sx={{\n//               backgroundColor: \"secondary.main\",\n//               color: \"white\",\n//               width: \"100%\",\n//               marginTop: \"10px\",\n//             }}\n//             className=\"category-btn\"\n//             onClick={() =>\n//               setIsChangeDescriptionClicked(!isChangeDescriptionClicked)\n//             }\n//           >\n//             Change Description\n//           </Button>\n//         </Grid>\n//       </Grid>\n//       {isChangeDescriptionClicked && (\n//         <div>\n//           <hr />\n//           <Grid container spacing={2} style={{ marginTop: \"20px\" }}>\n//             <Grid item xs={12}>\n//               <FormControl fullWidth>\n//                 <InputLabel id=\"user-select-label\">Select User</InputLabel>\n//                 <Select\n//                   labelId=\"user-select-label\"\n//                   id=\"user-select\"\n//                   value={selectedUser}\n//                   onChange={handleUserChange}\n//                 >\n//                   {descriptions.length > 0 &&\n//                     Array.from(\n//                       new Set(\n//                         descriptions.map((description) => description.username)\n//                       )\n//                     ).map((username) => (\n//                       <MenuItem key={username} value={username}>\n//                         {username}\n//                       </MenuItem>\n//                     ))}\n//                 </Select>\n//               </FormControl>\n//             </Grid>\n//           </Grid>\n//         </div>\n//       )}\n//     </Paper>\n//   );\n// };\n\n// export default ChangeRating;\n\n// // import React, { useState } from \"react\";\n// // import {\n// //   FormControl,\n// //   InputLabel,\n// //   Select,\n// //   MenuItem,\n// //   Paper,\n// //   Grid,\n// //   Button,\n// //   Typography,\n// // } from \"@mui/material\";\n// // import StarIcon from \"@mui/icons-material/Star\";\n\n// // // const fakeUsers = [\n// // //   {\n// // //     id: 1,\n// // //     name: \"User 1\",\n// // //     description: \"Description 1\",\n// // //     rating: 3,\n// // //     starClicks: 5,\n// // //   },\n// // //   {\n// // //     id: 2,\n// // //     name: \"User 2\",\n// // //     description: \"Description 2\",\n// // //     rating: 4,\n// // //     starClicks: 8,\n// // //   },\n// // //   {\n// // //     id: 3,\n// // //     name: \"User 3\",\n// // //     description: \"Description 3\",\n// // //     rating: 5,\n// // //     starClicks: 12,\n// // //   },\n// // // ];\n\n// // const ChangeRating = () => {\n// //   const [selectedUser, setSelectedUser] = useState(fakeUsers[1]); // Default selected user\n// //   const [isChangeDescriptionClicked, setIsChangeDescriptionClicked] =\n// //     useState(false);\n// //   const [starClicks, setStarClicks] = useState(selectedUser.starClicks);\n\n// //   const handleUserChange = (event) => {\n// //     const userId = event.target.value;\n// //     const selected = fakeUsers.find((user) => user.id === userId);\n// //     setSelectedUser(selected);\n// //     setIsChangeDescriptionClicked(false); // Close the change description box when user changes\n// //   };\n\n// //   const handleStarClick = () => {\n// //     setStarClicks(selectedUser.starClicks + 1); // Increase star clicks\n// //     // You can send the star click data to your API or perform other actions here\n// //   };\n\n// //   return (\n// //     <Paper\n// //       variant=\"outlined\"\n// //       sx={{ backgroundColor: \"primary.main\", padding: \"20px\", width: \"60%\" }}\n// //     >\n// //       <Grid container alignItems=\"center\" justifyContent=\"space-between\" sx={{ marginBottom: \"20px\" }}>\n// //         <Grid item>\n// //           <Typography variant=\"body1\" color=\"primary.dark\">\n// //             Described By: {selectedUser.name}\n// //           </Typography>\n// //           <Typography variant=\"body2\" color=\"primary.dark\">\n// //             <StarIcon\n// //               color=\"secondary.main\"\n// //               onClick={handleStarClick}\n// //               style={{ cursor: \"pointer\" }}\n// //             />\n// //             {starClicks} People Rated\n// //           </Typography>\n// //         </Grid>\n// //         <Grid item>\n// //           <Button\n// //             sx={{\n// //               backgroundColor: \"secondary.main\",\n// //               color: \"white\",\n// //               width: \"100%\",\n// //               marginTop: \"10px\",\n// //             }}\n// //             className=\"category-btn\"\n// //             onClick={() =>\n// //               setIsChangeDescriptionClicked(!isChangeDescriptionClicked)\n// //             }\n// //           >\n// //             Change Description\n// //           </Button>\n// //         </Grid>\n// //       </Grid>\n// //       {isChangeDescriptionClicked && (\n// //         <div>\n// //         <hr/>\n// //         <Grid container spacing={2} style={{ marginTop: \"20px\" }}>\n// //           <Grid item xs={12}>\n// //             <FormControl fullWidth>\n// //               <InputLabel id=\"user-select-label\">Select User</InputLabel>\n// //               <Select\n// //                 labelId=\"user-select-label\"\n// //                 id=\"user-select\"\n// //                 value={selectedUser.id}\n// //                 onChange={handleUserChange}\n// //               >\n// //                 {fakeUsers.map((user) => (\n// //                   <MenuItem key={user.id} value={user.id}>\n// //                     {user.name}\n// //                   </MenuItem>\n// //                 ))}\n// //               </Select>\n// //             </FormControl>\n// //           </Grid>\n// //         </Grid>\n// //         </div>\n// //       )}\n\n// //     </Paper>\n// //   );\n// // };\n\n// // export default ChangeRating;\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}