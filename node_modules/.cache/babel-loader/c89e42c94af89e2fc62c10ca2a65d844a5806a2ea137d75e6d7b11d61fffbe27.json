{"ast":null,"code":"var _jsxFileName = \"/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/AskAI.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { AlertBar } from \"./\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Dialog from \"@mui/material/Dialog\";\nimport { ButtonGroup, DialogTitle, DialogContent, DialogActions, DialogContentText, CircularProgress } from \"@mui/material\";\nimport KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\nimport formatTime from \"../utils/functions\";\nimport tokenUsable from \"../utils/loggedIn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AskAI = props => {\n  _s();\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [response, setResponse] = useState(\"\");\n  const [startOrStop, setStartOrStop] = useState(\"Stop\");\n  const [showAlert, setShowAlert] = useState(false); // State to control alert visibility\n\n  useEffect(() => {\n    const handleKeyPress = event => {\n      if (event.key === \"q\" && !open) {\n        handleClickOpen();\n      }\n    };\n    document.addEventListener(\"keydown\", handleKeyPress);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [open]);\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  const handleClickOpen = () => {\n    const token = Cookies.get(\"jwtToken\");\n    if (!token || tokenUsable) {\n      setShowAlert(true); // Set showAlert to true to show the alert\n      return;\n    }\n    SpeechRecognition.startListening({\n      continuous: true\n    });\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n    SpeechRecognition.stopListening();\n    setResponse(\"\");\n    resetTranscript();\n    setStartOrStop(\"Stop\");\n  };\n  const handleAnotherQuestion = () => {\n    setResponse(\"\");\n    resetTranscript();\n  };\n  const handleReset = () => {\n    resetTranscript();\n    SpeechRecognition.startListening({\n      continuous: true\n    });\n    setStartOrStop(\"Stop\");\n  };\n  const handleStartStop = () => {\n    if (startOrStop === \"Stop\") {\n      SpeechRecognition.stopListening();\n      setStartOrStop(\"Start\");\n    } else {\n      SpeechRecognition.startListening({\n        continuous: true\n      });\n      setStartOrStop(\"Stop\");\n    }\n  };\n  const handleQuestion = () => {\n    setLoading(true);\n    const token = Cookies.get(\"jwtToken\");\n    const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n    const postData = {\n      id: props.videoID,\n      question: transcript,\n      currentTime: props.timeStamp,\n      jwt: token\n    };\n    axios.post(apiUrl, postData).then(response => {\n      const synth = window.speechSynthesis;\n      const newUtterance = new SpeechSynthesisUtterance(\"Response: \" + response.data.answer);\n      synth.speak(newUtterance);\n      setResponse(response.data.answer);\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [showAlert && /*#__PURE__*/_jsxDEV(AlertBar, {\n      render: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        backgroundColor: \"secondary.main\",\n        color: \"white\",\n        width: \"100%\",\n        marginTop: \"10px\"\n      },\n      className: \"category-btn\",\n      onClick: handleClickOpen,\n      children: [\"Ask question at \", formatTime(props.timeStamp)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), (loading || response) && /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      fullWidth: true,\n      sx: {\n        textAlign: \"center\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this), !loading && !response && /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      sx: {\n        textAlign: \"center\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(AskAI, \"xJzzWjQYNPTS9V+E520vhYMl97s=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = AskAI;\nexport default AskAI;\n\n// import React, { useCallback, useState, useEffect } from \"react\";\n// import {AlertBar} from './';\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import Dialog from \"@mui/material/Dialog\";\n// import DialogActions from \"@mui/material/DialogActions\";\n// import DialogContent from \"@mui/material/DialogContent\";\n// import {\n//   ButtonGroup,\n//   DialogTitle,\n//   DialogContentText,\n//   CircularProgress,\n// } from \"@mui/material\";\n// import KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\n// import formatTime from \"../utils/functions\";\n// import tokenUsable from \"../utils/loggedIn\";\n\n// const AskAI = (props) => {\n//   const [open, setOpen] = React.useState(false);\n//   const [loading, setLoading] = React.useState(false);\n//   const [response, setResponse] = React.useState(\"\");\n//   const [startOrStop, setStartOrStop] = React.useState(\"Stop\");\n\n//   const playBeep = () => {\n//     const audioStart = new Audio(require('../data/beepStart.mp3')) \n//     audioStart.play()\n//   };\n\n//   const textToSpeech = () => {\n//     const synth = window.speechSynthesis;\n//     const newUtterance = new SpeechSynthesisUtterance(transcript);\n//     synth.speak(newUtterance);\n//   }\n\n//   useEffect(() => {\n//     const handleKeyPress = (event) => {\n//       // Check if the pressed key is \"Q\" and if the dialog is not already open\n//       if (event.key === \"q\" && !open) {\n//         handleClickOpen();\n//       }\n//     };\n\n//     // Add event listener when the component mounts\n//     document.addEventListener(\"keydown\", handleKeyPress);\n\n//     // Remove event listener when the component unmounts\n//     return () => {\n//       document.removeEventListener(\"keydown\", handleKeyPress);\n//     };\n//   }, [open]); \n\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n\n//   const handleClickOpen = () => {\n//     const token = Cookies.get(\"jwtToken\");\n//     if (!token || tokenUsable){\n//       console.log(\"hehehhehe\")\n//       return(\n//         <AlertBar render={true}/>\n//       )\n//     }\n\n//     SpeechRecognition.startListening({continuous:true});\n//     playBeep();\n//     setOpen(true);\n//   };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//     SpeechRecognition.stopListening()\n//     setResponse(\"\")\n//     resetTranscript();\n//     setStartOrStop(\"Stop\")\n//   };\n\n//   const handleAnotherQuestion = () => {\n//     setResponse(\"\")\n//     resetTranscript();\n//   }\n\n//   const handleReset = () => {\n//     resetTranscript();\n//     SpeechRecognition.startListening({continuous:true});\n//     setStartOrStop(\"Stop\");\n//     playBeep();\n//   }\n\n//   const handleStartStop = () => {\n//     if (startOrStop === \"Stop\"){\n//       SpeechRecognition.stopListening()\n//       setStartOrStop(\"Start\")\n//     }\n//     else{\n//       SpeechRecognition.startListening({continuous:true})\n//       setStartOrStop(\"Stop\")\n//     }\n\n//   }\n\n//   const handleQuestion = () => {\n//     setLoading(true);\n//     const token = Cookies.get(\"jwtToken\");\n//     // Define the API endpoint where you want to send the POST request\n//     const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n//     console.log(\"This is my props id\", props.videoID);\n//     const postData = {\n//       id: props.videoID,\n//       question: transcript,\n//       currentTime: props.timeStamp,\n//       jwt: token,\n//     };\n\n//     axios\n//       .post(apiUrl, postData)\n//       .then((response) => {\n//         // Handle the successful response\n//         console.log(\"Response:\", response.data);\n//         const synth = window.speechSynthesis;\n//         const newUtterance = new SpeechSynthesisUtterance(\"Response: \"+ response.data.answer);\n//         synth.speak(newUtterance);\n//         setResponse(response.data.answer);\n//         setLoading(false);\n//       })\n//       .catch((error) => {\n//         // Handle errors, if any\n//         console.error(\"Error:\", error);\n//       });\n//   };\n\n//   return (\n//     <React.Fragment>\n//       <Button\n//         sx={{\n//           backgroundColor: \"secondary.main\",\n//           color: \"white\",\n//           width: \"100%\",\n//           marginTop: \"10px\",\n//         }}\n//         className=\"category-btn\"\n//         onClick={handleClickOpen}\n//       >\n//         Ask question at {formatTime(props.timeStamp)}\n//       </Button>\n//       {(loading || response) && (\n//         <Dialog\n//           open={open}\n//           onClose={handleClose}\n//           fullWidth\n//           sx={{ textAlign: \"center\" }}\n//         >\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>\n//             {!response ? \"Retrieving Response\" : \"Response\"}\n//           </DialogTitle>\n//           <DialogContent>\n//             {loading && <CircularProgress />}\n//             {response && <DialogContentText>Response: {response}</DialogContentText>}\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleAnotherQuestion}\n//             >\n//               Ask another question\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n\n//       {!loading && !response && (\n//         <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>Ask Your Question</DialogTitle>\n//           <DialogContent>\n//             <TextField\n//               id=\"outlined-textarea\"\n//               label=\"Your Question\"\n//               placeholder=\"Your question will be visible here\"\n//               multiline\n//               value={transcript}\n//               fullWidth\n//               disabled\n//               sx={{ margin: \"20px 0\" }}\n//             />\n//             <ButtonGroup aria-label=\"Buttons to control speech recognition\">\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 aria-label = \"This is a button for start or stopping the speech to text\"\n//                 className=\"category-btn\"\n//                 onClick={handleStartStop}\n//               >\n//                 {startOrStop}\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={textToSpeech}\n//               >\n//                 Text To Speech\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={handleReset}\n//               >\n//                 Reset Question\n//               </Button>\n//             </ButtonGroup>\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               onClick={handleQuestion}\n//             >\n//               Submit Question\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n//     </React.Fragment>\n//   );\n// };\n\n// export default AskAI;\nvar _c;\n$RefreshReg$(_c, \"AskAI\");","map":{"version":3,"names":["React","useState","useEffect","AlertBar","SpeechRecognition","useSpeechRecognition","axios","Cookies","Button","TextField","Dialog","ButtonGroup","DialogTitle","DialogContent","DialogActions","DialogContentText","CircularProgress","KeyboardVoiceIcon","formatTime","tokenUsable","jsxDEV","_jsxDEV","AskAI","props","_s","open","setOpen","loading","setLoading","response","setResponse","startOrStop","setStartOrStop","showAlert","setShowAlert","handleKeyPress","event","key","handleClickOpen","document","addEventListener","removeEventListener","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","token","get","startListening","continuous","handleClose","stopListening","handleAnotherQuestion","handleReset","handleStartStop","handleQuestion","apiUrl","postData","id","videoID","question","currentTime","timeStamp","jwt","post","then","synth","window","speechSynthesis","newUtterance","SpeechSynthesisUtterance","data","answer","speak","catch","error","console","Fragment","children","render","fileName","_jsxFileName","lineNumber","columnNumber","sx","backgroundColor","color","width","marginTop","className","onClick","onClose","fullWidth","textAlign","_c","$RefreshReg$"],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/AskAI.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { AlertBar } from \"./\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Dialog from \"@mui/material/Dialog\";\nimport {\n  ButtonGroup,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  DialogContentText,\n  CircularProgress,\n} from \"@mui/material\";\nimport KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\nimport formatTime from \"../utils/functions\";\nimport tokenUsable from \"../utils/loggedIn\";\n\nconst AskAI = (props) => {\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [response, setResponse] = useState(\"\");\n  const [startOrStop, setStartOrStop] = useState(\"Stop\");\n  const [showAlert, setShowAlert] = useState(false); // State to control alert visibility\n\n  useEffect(() => {\n    const handleKeyPress = (event) => {\n      if (event.key === \"q\" && !open) {\n        handleClickOpen();\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyPress);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [open]);\n\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n  } = useSpeechRecognition();\n\n  const handleClickOpen = () => {\n    const token = Cookies.get(\"jwtToken\");\n    if (!token || tokenUsable) {\n      setShowAlert(true); // Set showAlert to true to show the alert\n      return;\n    }\n\n    SpeechRecognition.startListening({ continuous: true });\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    SpeechRecognition.stopListening();\n    setResponse(\"\");\n    resetTranscript();\n    setStartOrStop(\"Stop\");\n  };\n\n  const handleAnotherQuestion = () => {\n    setResponse(\"\");\n    resetTranscript();\n  };\n\n  const handleReset = () => {\n    resetTranscript();\n    SpeechRecognition.startListening({ continuous: true });\n    setStartOrStop(\"Stop\");\n  };\n\n  const handleStartStop = () => {\n    if (startOrStop === \"Stop\") {\n      SpeechRecognition.stopListening();\n      setStartOrStop(\"Start\");\n    } else {\n      SpeechRecognition.startListening({ continuous: true });\n      setStartOrStop(\"Stop\");\n    }\n  };\n\n  const handleQuestion = () => {\n    setLoading(true);\n    const token = Cookies.get(\"jwtToken\");\n    const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n    const postData = {\n      id: props.videoID,\n      question: transcript,\n      currentTime: props.timeStamp,\n      jwt: token,\n    };\n\n    axios\n      .post(apiUrl, postData)\n      .then((response) => {\n        const synth = window.speechSynthesis;\n        const newUtterance = new SpeechSynthesisUtterance(\"Response: \" + response.data.answer);\n        synth.speak(newUtterance);\n        setResponse(response.data.answer);\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      {showAlert && <AlertBar render ={true} />} {/* Conditionally render the AlertBar */}\n      <Button\n        sx={{\n          backgroundColor: \"secondary.main\",\n          color: \"white\",\n          width: \"100%\",\n          marginTop: \"10px\",\n        }}\n        className=\"category-btn\"\n        onClick={handleClickOpen}\n      >\n        Ask question at {formatTime(props.timeStamp)}\n      </Button>\n      {(loading || response) && (\n        <Dialog\n          open={open}\n          onClose={handleClose}\n          fullWidth\n          sx={{ textAlign: \"center\" }}\n        >\n          {/* Dialog content */}\n        </Dialog>\n      )}\n      {!loading && !response && (\n        <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n          {/* Dialog content */}\n        </Dialog>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default AskAI;\n\n\n// import React, { useCallback, useState, useEffect } from \"react\";\n// import {AlertBar} from './';\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import Dialog from \"@mui/material/Dialog\";\n// import DialogActions from \"@mui/material/DialogActions\";\n// import DialogContent from \"@mui/material/DialogContent\";\n// import {\n//   ButtonGroup,\n//   DialogTitle,\n//   DialogContentText,\n//   CircularProgress,\n// } from \"@mui/material\";\n// import KeyboardVoiceIcon from \"@mui/icons-material/KeyboardVoice\";\n// import formatTime from \"../utils/functions\";\n// import tokenUsable from \"../utils/loggedIn\";\n\n// const AskAI = (props) => {\n//   const [open, setOpen] = React.useState(false);\n//   const [loading, setLoading] = React.useState(false);\n//   const [response, setResponse] = React.useState(\"\");\n//   const [startOrStop, setStartOrStop] = React.useState(\"Stop\");\n\n//   const playBeep = () => {\n//     const audioStart = new Audio(require('../data/beepStart.mp3')) \n//     audioStart.play()\n//   };\n\n//   const textToSpeech = () => {\n//     const synth = window.speechSynthesis;\n//     const newUtterance = new SpeechSynthesisUtterance(transcript);\n//     synth.speak(newUtterance);\n//   }\n\n//   useEffect(() => {\n//     const handleKeyPress = (event) => {\n//       // Check if the pressed key is \"Q\" and if the dialog is not already open\n//       if (event.key === \"q\" && !open) {\n//         handleClickOpen();\n//       }\n//     };\n\n//     // Add event listener when the component mounts\n//     document.addEventListener(\"keydown\", handleKeyPress);\n\n//     // Remove event listener when the component unmounts\n//     return () => {\n//       document.removeEventListener(\"keydown\", handleKeyPress);\n//     };\n//   }, [open]); \n\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n\n//   const handleClickOpen = () => {\n//     const token = Cookies.get(\"jwtToken\");\n//     if (!token || tokenUsable){\n//       console.log(\"hehehhehe\")\n//       return(\n//         <AlertBar render={true}/>\n//       )\n//     }\n\n//     SpeechRecognition.startListening({continuous:true});\n//     playBeep();\n//     setOpen(true);\n//   };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//     SpeechRecognition.stopListening()\n//     setResponse(\"\")\n//     resetTranscript();\n//     setStartOrStop(\"Stop\")\n//   };\n\n//   const handleAnotherQuestion = () => {\n//     setResponse(\"\")\n//     resetTranscript();\n//   }\n\n//   const handleReset = () => {\n//     resetTranscript();\n//     SpeechRecognition.startListening({continuous:true});\n//     setStartOrStop(\"Stop\");\n//     playBeep();\n//   }\n\n//   const handleStartStop = () => {\n//     if (startOrStop === \"Stop\"){\n//       SpeechRecognition.stopListening()\n//       setStartOrStop(\"Start\")\n//     }\n//     else{\n//       SpeechRecognition.startListening({continuous:true})\n//       setStartOrStop(\"Stop\")\n//     }\n\n//   }\n\n//   const handleQuestion = () => {\n//     setLoading(true);\n//     const token = Cookies.get(\"jwtToken\");\n//     // Define the API endpoint where you want to send the POST request\n//     const apiUrl = \"http://127.0.0.1:8000/api/ask_question/\";\n//     console.log(\"This is my props id\", props.videoID);\n//     const postData = {\n//       id: props.videoID,\n//       question: transcript,\n//       currentTime: props.timeStamp,\n//       jwt: token,\n//     };\n\n//     axios\n//       .post(apiUrl, postData)\n//       .then((response) => {\n//         // Handle the successful response\n//         console.log(\"Response:\", response.data);\n//         const synth = window.speechSynthesis;\n//         const newUtterance = new SpeechSynthesisUtterance(\"Response: \"+ response.data.answer);\n//         synth.speak(newUtterance);\n//         setResponse(response.data.answer);\n//         setLoading(false);\n//       })\n//       .catch((error) => {\n//         // Handle errors, if any\n//         console.error(\"Error:\", error);\n//       });\n//   };\n\n//   return (\n//     <React.Fragment>\n//       <Button\n//         sx={{\n//           backgroundColor: \"secondary.main\",\n//           color: \"white\",\n//           width: \"100%\",\n//           marginTop: \"10px\",\n//         }}\n//         className=\"category-btn\"\n//         onClick={handleClickOpen}\n//       >\n//         Ask question at {formatTime(props.timeStamp)}\n//       </Button>\n//       {(loading || response) && (\n//         <Dialog\n//           open={open}\n//           onClose={handleClose}\n//           fullWidth\n//           sx={{ textAlign: \"center\" }}\n//         >\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>\n//             {!response ? \"Retrieving Response\" : \"Response\"}\n//           </DialogTitle>\n//           <DialogContent>\n//             {loading && <CircularProgress />}\n//             {response && <DialogContentText>Response: {response}</DialogContentText>}\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleAnotherQuestion}\n//             >\n//               Ask another question\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n\n//       {!loading && !response && (\n//         <Dialog open={open} onClose={handleClose} sx={{ textAlign: \"center\" }}>\n//           <KeyboardVoiceIcon\n//             sx={{\n//               fontSize: \"70px\",\n//               backgroundColor: \"#1D5B79\",\n//               color: listening ? \"#EF6262\" : \"white\",\n//               ml: \"5px\",\n//               borderRadius: \"100%\",\n//               padding: \"20px\",\n//               margin: \"20px auto\",\n//             }}\n//           />\n//           <DialogTitle>Ask Your Question</DialogTitle>\n//           <DialogContent>\n//             <TextField\n//               id=\"outlined-textarea\"\n//               label=\"Your Question\"\n//               placeholder=\"Your question will be visible here\"\n//               multiline\n//               value={transcript}\n//               fullWidth\n//               disabled\n//               sx={{ margin: \"20px 0\" }}\n//             />\n//             <ButtonGroup aria-label=\"Buttons to control speech recognition\">\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 aria-label = \"This is a button for start or stopping the speech to text\"\n//                 className=\"category-btn\"\n//                 onClick={handleStartStop}\n//               >\n//                 {startOrStop}\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={textToSpeech}\n//               >\n//                 Text To Speech\n//               </Button>\n//               <Button\n//                 sx={{\n//                   backgroundColor: \"secondary.main\",\n//                   color: \"white\",\n//                 }}\n//                 className=\"category-btn\"\n//                 onClick={handleReset}\n//               >\n//                 Reset Question\n//               </Button>\n//             </ButtonGroup>\n//           </DialogContent>\n//           <DialogActions>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               className=\"category-btn\"\n//               onClick={handleClose}\n//             >\n//               Cancel\n//             </Button>\n//             <Button\n//               sx={{\n//                 backgroundColor: \"secondary.main\",\n//                 color: \"white\",\n//               }}\n//               onClick={handleQuestion}\n//             >\n//               Submit Question\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n//     </React.Fragment>\n//   );\n// };\n\n// export default AskAI;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}