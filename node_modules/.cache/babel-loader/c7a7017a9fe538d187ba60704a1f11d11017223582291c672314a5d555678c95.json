{"ast":null,"code":"var _jsxFileName = \"/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/ChatGPT.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport VideoPlayer from './VideoPlayer'; // Import your VideoPlayer component\nimport TextToSpeech from './TextToSpeech'; // Import your TextToSpeech component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatGPT = props => {\n  _s();\n  const videoRef = useRef(null);\n  const [videoDescriptions, setVideoDescriptions] = useState([\n    // ... your video descriptions with timestamps\n  ]);\n  const [currentDescriptionIndex, setCurrentDescriptionIndex] = useState(0);\n  const [isVideoPlaying, setIsVideoPlaying] = useState(true); // Initially set to true to start video playing\n\n  // Listen for video pause event and play text-to-speech when video is paused\n  useEffect(() => {\n    const video = videoRef.current;\n    const handleVideoPause = () => {\n      const index = videoDescriptions.findIndex(description => description.timestamp === Math.floor(video.currentTime));\n      if (index !== -1 && index !== currentDescriptionIndex) {\n        setCurrentDescriptionIndex(index);\n      }\n    };\n    video.addEventListener('pause', handleVideoPause);\n    return () => {\n      video.removeEventListener('pause', handleVideoPause);\n    };\n  }, [currentDescriptionIndex, videoDescriptions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(VideoPlayer, {\n      ref: videoRef,\n      path: props.path,\n      isPlaying: isVideoPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Video Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: videoDescriptions[currentDescriptionIndex].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextToSpeech, {\n        text: videoDescriptions[currentDescriptionIndex].description,\n        isPlayed: !isVideoPlaying // Invert the video playing state for text-to-speech\n        ,\n        onStart: () => setIsVideoPlaying(false) // Pause the video when text-to-speech starts\n        ,\n        onEnd: () => setIsVideoPlaying(true) // Resume the video when text-to-speech ends\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatGPT, \"MAXqteJ7ZobrYkHmAtaVfo3UPA0=\");\n_c = ChatGPT;\nexport default ChatGPT;\n\n// import React, { useState, useEffect } from 'react';\n// import { TextToSpeech } from \"./\";\n\n// const ChatGPT = (props) => {\n//   const video = require('./' + props.path);\n//   const [videoDescriptions, setVideoDescriptions] = useState([\n//     { timestamp: 0, description: \"Description for start of video\" },\n//     { timestamp: 5, description: \"Description at 5 seconds\" },\n//     { timestamp: 10, description: \"Description at 10 seconds\" },\n//     // Add more descriptions with timestamps as needed\n//   ]);\n\n//   const [currentDescriptionIndex, setCurrentDescriptionIndex] = useState(0);\n//   const [isPlaying, setIsPlaying] = useState(false);\n//   const [isSpeechPlaying, setIsSpeechPlaying] = useState(false);\n\n//   useEffect(() => {\n//     const video = document.getElementById('video');\n\n//     const handleTimeUpdate = () => {\n//       const currentTime = Math.floor(video.currentTime);\n//       const index = videoDescriptions.findIndex(description => description.timestamp === currentTime);\n\n//       if (index !== -1 && index !== currentDescriptionIndex) {\n//         setCurrentDescriptionIndex(index);\n//         video.pause();\n//       }\n//     };\n\n//     video.addEventListener('timeupdate', handleTimeUpdate);\n\n//     return () => {\n//       video.removeEventListener('timeupdate', handleTimeUpdate);\n//     };\n//   }, [currentDescriptionIndex, videoDescriptions]);\n\n//   return (\n//     <div>\n//       <video id=\"video\" controls width=\"640\" height=\"360\">\n//         <source src={video} type=\"video/mp4\" />\n//         Your browser does not support the video tag.\n//       </video>\n\n//       <div>\n//         <h2>Video Description</h2>\n//         <p>{videoDescriptions[currentDescriptionIndex].description}</p>\n//         <TextToSpeech\n//             text={videoDescriptions[currentDescriptionIndex].description}\n//             isPlayed={isSpeechPlaying}\n//             onStart={() => setIsSpeechPlaying(true)}\n//             onEnd={() => setIsSpeechPlaying(false)}\n//           />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatGPT;\nvar _c;\n$RefreshReg$(_c, \"ChatGPT\");","map":{"version":3,"names":["React","useState","useEffect","useRef","VideoPlayer","TextToSpeech","jsxDEV","_jsxDEV","ChatGPT","props","_s","videoRef","videoDescriptions","setVideoDescriptions","currentDescriptionIndex","setCurrentDescriptionIndex","isVideoPlaying","setIsVideoPlaying","video","current","handleVideoPause","index","findIndex","description","timestamp","Math","floor","currentTime","addEventListener","removeEventListener","children","ref","path","isPlaying","fileName","_jsxFileName","lineNumber","columnNumber","text","isPlayed","onStart","onEnd","_c","$RefreshReg$"],"sources":["/Users/maryamcheema/Documents/VideoAccessibility/frontend/src/components/ChatGPT.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport VideoPlayer from './VideoPlayer'; // Import your VideoPlayer component\nimport TextToSpeech from './TextToSpeech'; // Import your TextToSpeech component\n\nconst ChatGPT = (props) => {\n  const videoRef = useRef(null);\n\n  const [videoDescriptions, setVideoDescriptions] = useState([\n    // ... your video descriptions with timestamps\n  ]);\n  const [currentDescriptionIndex, setCurrentDescriptionIndex] = useState(0);\n  const [isVideoPlaying, setIsVideoPlaying] = useState(true); // Initially set to true to start video playing\n\n  // Listen for video pause event and play text-to-speech when video is paused\n  useEffect(() => {\n    const video = videoRef.current;\n\n    const handleVideoPause = () => {\n      const index = videoDescriptions.findIndex(\n        (description) => description.timestamp === Math.floor(video.currentTime)\n      );\n\n      if (index !== -1 && index !== currentDescriptionIndex) {\n        setCurrentDescriptionIndex(index);\n      }\n    };\n\n    video.addEventListener('pause', handleVideoPause);\n\n    return () => {\n      video.removeEventListener('pause', handleVideoPause);\n    };\n  }, [currentDescriptionIndex, videoDescriptions]);\n\n  return (\n    <div>\n      <VideoPlayer ref={videoRef} path={props.path} isPlaying={isVideoPlaying} />\n      <div>\n        <h2>Video Description</h2>\n        <p>{videoDescriptions[currentDescriptionIndex].description}</p>\n        <TextToSpeech\n          text={videoDescriptions[currentDescriptionIndex].description}\n          isPlayed={!isVideoPlaying} // Invert the video playing state for text-to-speech\n          onStart={() => setIsVideoPlaying(false)} // Pause the video when text-to-speech starts\n          onEnd={() => setIsVideoPlaying(true)} // Resume the video when text-to-speech ends\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatGPT;\n\n\n// import React, { useState, useEffect } from 'react';\n// import { TextToSpeech } from \"./\";\n\n// const ChatGPT = (props) => {\n//   const video = require('./' + props.path);\n//   const [videoDescriptions, setVideoDescriptions] = useState([\n//     { timestamp: 0, description: \"Description for start of video\" },\n//     { timestamp: 5, description: \"Description at 5 seconds\" },\n//     { timestamp: 10, description: \"Description at 10 seconds\" },\n//     // Add more descriptions with timestamps as needed\n//   ]);\n\n//   const [currentDescriptionIndex, setCurrentDescriptionIndex] = useState(0);\n//   const [isPlaying, setIsPlaying] = useState(false);\n//   const [isSpeechPlaying, setIsSpeechPlaying] = useState(false);\n\n//   useEffect(() => {\n//     const video = document.getElementById('video');\n\n//     const handleTimeUpdate = () => {\n//       const currentTime = Math.floor(video.currentTime);\n//       const index = videoDescriptions.findIndex(description => description.timestamp === currentTime);\n\n//       if (index !== -1 && index !== currentDescriptionIndex) {\n//         setCurrentDescriptionIndex(index);\n//         video.pause();\n//       }\n//     };\n\n//     video.addEventListener('timeupdate', handleTimeUpdate);\n\n//     return () => {\n//       video.removeEventListener('timeupdate', handleTimeUpdate);\n//     };\n//   }, [currentDescriptionIndex, videoDescriptions]);\n\n\n//   return (\n//     <div>\n//       <video id=\"video\" controls width=\"640\" height=\"360\">\n//         <source src={video} type=\"video/mp4\" />\n//         Your browser does not support the video tag.\n//       </video>\n\n//       <div>\n//         <h2>Video Description</h2>\n//         <p>{videoDescriptions[currentDescriptionIndex].description}</p>\n//         <TextToSpeech\n//             text={videoDescriptions[currentDescriptionIndex].description}\n//             isPlayed={isSpeechPlaying}\n//             onStart={() => setIsSpeechPlaying(true)}\n//             onEnd={() => setIsSpeechPlaying(false)}\n//           />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatGPT;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}